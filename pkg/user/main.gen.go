// Package user provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.5.0 DO NOT EDIT.
package user

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"path"
	"strings"
	"time"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/oapi-codegen/runtime"
	openapi_types "github.com/oapi-codegen/runtime/types"
)

const (
	X_auth_tokenScopes = "x_auth_token.Scopes"
	X_client_idScopes  = "x_client_id.Scopes"
)

// ServerUrlPreProductionServer defines the Server URL for Pre-production Server
const ServerUrlPreProductionServer = "https://apis-prelive.quran.foundation/auth"

// ServerUrlProductionServer defines the Server URL for Production Server
const ServerUrlProductionServer = "https://apis.quran.foundation/auth"

// Defines values for PreferenceAudioPlaybackRate.
const (
	PreferenceAudioPlaybackRateN025 PreferenceAudioPlaybackRate = 0.25
	PreferenceAudioPlaybackRateN05  PreferenceAudioPlaybackRate = 0.5
	PreferenceAudioPlaybackRateN075 PreferenceAudioPlaybackRate = 0.75
	PreferenceAudioPlaybackRateN1   PreferenceAudioPlaybackRate = 1
	PreferenceAudioPlaybackRateN125 PreferenceAudioPlaybackRate = 1.25
	PreferenceAudioPlaybackRateN15  PreferenceAudioPlaybackRate = 1.5
	PreferenceAudioPlaybackRateN175 PreferenceAudioPlaybackRate = 1.75
	PreferenceAudioPlaybackRateN2   PreferenceAudioPlaybackRate = 2
)

// Defines values for PreferenceLanguageLanguage.
const (
	PreferenceLanguageLanguageAr PreferenceLanguageLanguage = "ar"
	PreferenceLanguageLanguageBn PreferenceLanguageLanguage = "bn"
	PreferenceLanguageLanguageEn PreferenceLanguageLanguage = "en"
	PreferenceLanguageLanguageEs PreferenceLanguageLanguage = "es"
	PreferenceLanguageLanguageFa PreferenceLanguageLanguage = "fa"
	PreferenceLanguageLanguageFr PreferenceLanguageLanguage = "fr"
	PreferenceLanguageLanguageId PreferenceLanguageLanguage = "id"
	PreferenceLanguageLanguageIt PreferenceLanguageLanguage = "it"
	PreferenceLanguageLanguageMs PreferenceLanguageLanguage = "ms"
	PreferenceLanguageLanguageNl PreferenceLanguageLanguage = "nl"
	PreferenceLanguageLanguagePt PreferenceLanguageLanguage = "pt"
	PreferenceLanguageLanguageRu PreferenceLanguageLanguage = "ru"
	PreferenceLanguageLanguageSq PreferenceLanguageLanguage = "sq"
	PreferenceLanguageLanguageSw PreferenceLanguageLanguage = "sw"
	PreferenceLanguageLanguageTh PreferenceLanguageLanguage = "th"
	PreferenceLanguageLanguageTr PreferenceLanguageLanguage = "tr"
	PreferenceLanguageLanguageUr PreferenceLanguageLanguage = "ur"
	PreferenceLanguageLanguageZh PreferenceLanguageLanguage = "zh"
)

// Defines values for PreferenceQuranReaderStylesMushafLines.
const (
	PreferenceQuranReaderStylesMushafLinesN15Lines PreferenceQuranReaderStylesMushafLines = "15_lines"
	PreferenceQuranReaderStylesMushafLinesN16Lines PreferenceQuranReaderStylesMushafLines = "16_lines"
)

// Defines values for PreferenceQuranReaderStylesQuranFont.
const (
	PreferenceQuranReaderStylesQuranFontCodeV1         PreferenceQuranReaderStylesQuranFont = "code_v1"
	PreferenceQuranReaderStylesQuranFontCodeV2         PreferenceQuranReaderStylesQuranFont = "code_v2"
	PreferenceQuranReaderStylesQuranFontQpcUthmaniHafs PreferenceQuranReaderStylesQuranFont = "qpc_uthmani_hafs"
	PreferenceQuranReaderStylesQuranFontTajweed        PreferenceQuranReaderStylesQuranFont = "tajweed"
	PreferenceQuranReaderStylesQuranFontTajweedV4      PreferenceQuranReaderStylesQuranFont = "tajweed_v4"
	PreferenceQuranReaderStylesQuranFontTextIndopak    PreferenceQuranReaderStylesQuranFont = "text_indopak"
	PreferenceQuranReaderStylesQuranFontTextUthmani    PreferenceQuranReaderStylesQuranFont = "text_uthmani"
)

// Defines values for PreferenceReadingReadingPreference.
const (
	PreferenceReadingReadingPreferenceReading     PreferenceReadingReadingPreference = "reading"
	PreferenceReadingReadingPreferenceTranslation PreferenceReadingReadingPreference = "translation"
)

// Defines values for PreferenceReadingSelectedWordByWordLocale.
const (
	PreferenceReadingSelectedWordByWordLocaleBn  PreferenceReadingSelectedWordByWordLocale = "bn"
	PreferenceReadingSelectedWordByWordLocaleDe  PreferenceReadingSelectedWordByWordLocale = "de"
	PreferenceReadingSelectedWordByWordLocaleEn  PreferenceReadingSelectedWordByWordLocale = "en"
	PreferenceReadingSelectedWordByWordLocaleFa  PreferenceReadingSelectedWordByWordLocale = "fa"
	PreferenceReadingSelectedWordByWordLocaleFr  PreferenceReadingSelectedWordByWordLocale = "fr"
	PreferenceReadingSelectedWordByWordLocaleHi  PreferenceReadingSelectedWordByWordLocale = "hi"
	PreferenceReadingSelectedWordByWordLocaleId  PreferenceReadingSelectedWordByWordLocale = "id"
	PreferenceReadingSelectedWordByWordLocaleInh PreferenceReadingSelectedWordByWordLocale = "inh"
	PreferenceReadingSelectedWordByWordLocaleRu  PreferenceReadingSelectedWordByWordLocale = "ru"
	PreferenceReadingSelectedWordByWordLocaleTa  PreferenceReadingSelectedWordByWordLocale = "ta"
	PreferenceReadingSelectedWordByWordLocaleTr  PreferenceReadingSelectedWordByWordLocale = "tr"
	PreferenceReadingSelectedWordByWordLocaleUr  PreferenceReadingSelectedWordByWordLocale = "ur"
)

// Defines values for PreferenceReadingWordByWordContentType.
const (
	PreferenceReadingWordByWordContentTypeTranslation     PreferenceReadingWordByWordContentType = "translation"
	PreferenceReadingWordByWordContentTypeTransliteration PreferenceReadingWordByWordContentType = "transliteration"
)

// Defines values for PreferenceReadingWordByWordDisplay.
const (
	PreferenceReadingWordByWordDisplayInline  PreferenceReadingWordByWordDisplay = "inline"
	PreferenceReadingWordByWordDisplayTooltip PreferenceReadingWordByWordDisplay = "tooltip"
)

// Defines values for PreferenceReadingWordClickFunctionality.
const (
	PreferenceReadingWordClickFunctionalityNoAudio   PreferenceReadingWordClickFunctionality = "no-audio"
	PreferenceReadingWordClickFunctionalityPlayAudio PreferenceReadingWordClickFunctionality = "play-audio"
)

// Defines values for PreferenceThemeType.
const (
	PreferenceThemeTypeAuto  PreferenceThemeType = "auto"
	PreferenceThemeTypeDark  PreferenceThemeType = "dark"
	PreferenceThemeTypeLight PreferenceThemeType = "light"
	PreferenceThemeTypeSepia PreferenceThemeType = "sepia"
)

// Defines values for RoomRoomType.
const (
	RoomRoomTypeGroup RoomRoomType = "group"
	RoomRoomTypePage  RoomRoomType = "page"
)

// Defines values for RoomPostStatus.
const (
	AsRoom      RoomPostStatus = "as_room"
	OnlyMembers RoomPostStatus = "only_members"
	Publicly    RoomPostStatus = "publicly"
)

// Defines values for GetV1ActivityDaysParamsDateOrderBy.
const (
	GetV1ActivityDaysParamsDateOrderByAsc  GetV1ActivityDaysParamsDateOrderBy = "asc"
	GetV1ActivityDaysParamsDateOrderByDesc GetV1ActivityDaysParamsDateOrderBy = "desc"
)

// Defines values for GetV1ActivityDaysParamsType.
const (
	GetV1ActivityDaysParamsTypeLESSON              GetV1ActivityDaysParamsType = "LESSON"
	GetV1ActivityDaysParamsTypeQURAN               GetV1ActivityDaysParamsType = "QURAN"
	GetV1ActivityDaysParamsTypeQURANREADINGPROGRAM GetV1ActivityDaysParamsType = "QURAN_READING_PROGRAM"
)

// Defines values for PostV1ActivityDaysJSONBodyType.
const (
	PostV1ActivityDaysJSONBodyTypeLESSON              PostV1ActivityDaysJSONBodyType = "LESSON"
	PostV1ActivityDaysJSONBodyTypeQURAN               PostV1ActivityDaysJSONBodyType = "QURAN"
	PostV1ActivityDaysJSONBodyTypeQURANREADINGPROGRAM PostV1ActivityDaysJSONBodyType = "QURAN_READING_PROGRAM"
)

// Defines values for PostV1ActivityDaysJSONBody0MushafId.
const (
	PostV1ActivityDaysJSONBody0MushafIdN1  PostV1ActivityDaysJSONBody0MushafId = 1
	PostV1ActivityDaysJSONBody0MushafIdN11 PostV1ActivityDaysJSONBody0MushafId = 11
	PostV1ActivityDaysJSONBody0MushafIdN19 PostV1ActivityDaysJSONBody0MushafId = 19
	PostV1ActivityDaysJSONBody0MushafIdN2  PostV1ActivityDaysJSONBody0MushafId = 2
	PostV1ActivityDaysJSONBody0MushafIdN3  PostV1ActivityDaysJSONBody0MushafId = 3
	PostV1ActivityDaysJSONBody0MushafIdN4  PostV1ActivityDaysJSONBody0MushafId = 4
	PostV1ActivityDaysJSONBody0MushafIdN5  PostV1ActivityDaysJSONBody0MushafId = 5
	PostV1ActivityDaysJSONBody0MushafIdN6  PostV1ActivityDaysJSONBody0MushafId = 6
	PostV1ActivityDaysJSONBody0MushafIdN7  PostV1ActivityDaysJSONBody0MushafId = 7
)

// Defines values for GetV1BookmarksParamsType.
const (
	GetV1BookmarksParamsTypeAyah  GetV1BookmarksParamsType = "ayah"
	GetV1BookmarksParamsTypeJuz   GetV1BookmarksParamsType = "juz"
	GetV1BookmarksParamsTypePage  GetV1BookmarksParamsType = "page"
	GetV1BookmarksParamsTypeSurah GetV1BookmarksParamsType = "surah"
)

// Defines values for GetV1BookmarksParamsMushafId.
const (
	GetV1BookmarksParamsMushafIdN1  GetV1BookmarksParamsMushafId = 1
	GetV1BookmarksParamsMushafIdN11 GetV1BookmarksParamsMushafId = 11
	GetV1BookmarksParamsMushafIdN19 GetV1BookmarksParamsMushafId = 19
	GetV1BookmarksParamsMushafIdN2  GetV1BookmarksParamsMushafId = 2
	GetV1BookmarksParamsMushafIdN3  GetV1BookmarksParamsMushafId = 3
	GetV1BookmarksParamsMushafIdN4  GetV1BookmarksParamsMushafId = 4
	GetV1BookmarksParamsMushafIdN5  GetV1BookmarksParamsMushafId = 5
	GetV1BookmarksParamsMushafIdN6  GetV1BookmarksParamsMushafId = 6
	GetV1BookmarksParamsMushafIdN7  GetV1BookmarksParamsMushafId = 7
)

// Defines values for PostV1BookmarksJSONBody0Mushaf.
const (
	PostV1BookmarksJSONBody0MushafN1  PostV1BookmarksJSONBody0Mushaf = 1
	PostV1BookmarksJSONBody0MushafN11 PostV1BookmarksJSONBody0Mushaf = 11
	PostV1BookmarksJSONBody0MushafN19 PostV1BookmarksJSONBody0Mushaf = 19
	PostV1BookmarksJSONBody0MushafN2  PostV1BookmarksJSONBody0Mushaf = 2
	PostV1BookmarksJSONBody0MushafN3  PostV1BookmarksJSONBody0Mushaf = 3
	PostV1BookmarksJSONBody0MushafN4  PostV1BookmarksJSONBody0Mushaf = 4
	PostV1BookmarksJSONBody0MushafN5  PostV1BookmarksJSONBody0Mushaf = 5
	PostV1BookmarksJSONBody0MushafN6  PostV1BookmarksJSONBody0Mushaf = 6
	PostV1BookmarksJSONBody0MushafN7  PostV1BookmarksJSONBody0Mushaf = 7
)

// Defines values for PostV1BookmarksJSONBody0Type.
const (
	PostV1BookmarksJSONBody0TypeAyah PostV1BookmarksJSONBody0Type = "ayah"
)

// Defines values for PostV1BookmarksJSONBody1Mushaf.
const (
	PostV1BookmarksJSONBody1MushafN1  PostV1BookmarksJSONBody1Mushaf = 1
	PostV1BookmarksJSONBody1MushafN11 PostV1BookmarksJSONBody1Mushaf = 11
	PostV1BookmarksJSONBody1MushafN19 PostV1BookmarksJSONBody1Mushaf = 19
	PostV1BookmarksJSONBody1MushafN2  PostV1BookmarksJSONBody1Mushaf = 2
	PostV1BookmarksJSONBody1MushafN3  PostV1BookmarksJSONBody1Mushaf = 3
	PostV1BookmarksJSONBody1MushafN4  PostV1BookmarksJSONBody1Mushaf = 4
	PostV1BookmarksJSONBody1MushafN5  PostV1BookmarksJSONBody1Mushaf = 5
	PostV1BookmarksJSONBody1MushafN6  PostV1BookmarksJSONBody1Mushaf = 6
	PostV1BookmarksJSONBody1MushafN7  PostV1BookmarksJSONBody1Mushaf = 7
)

// Defines values for PostV1BookmarksJSONBody1Type.
const (
	PostV1BookmarksJSONBody1TypeJuz   PostV1BookmarksJSONBody1Type = "juz"
	PostV1BookmarksJSONBody1TypePage  PostV1BookmarksJSONBody1Type = "page"
	PostV1BookmarksJSONBody1TypeSurah PostV1BookmarksJSONBody1Type = "surah"
)

// Defines values for GetV1BookmarksAyahsRangeParamsMushafId.
const (
	GetV1BookmarksAyahsRangeParamsMushafIdN1  GetV1BookmarksAyahsRangeParamsMushafId = 1
	GetV1BookmarksAyahsRangeParamsMushafIdN11 GetV1BookmarksAyahsRangeParamsMushafId = 11
	GetV1BookmarksAyahsRangeParamsMushafIdN19 GetV1BookmarksAyahsRangeParamsMushafId = 19
	GetV1BookmarksAyahsRangeParamsMushafIdN2  GetV1BookmarksAyahsRangeParamsMushafId = 2
	GetV1BookmarksAyahsRangeParamsMushafIdN3  GetV1BookmarksAyahsRangeParamsMushafId = 3
	GetV1BookmarksAyahsRangeParamsMushafIdN4  GetV1BookmarksAyahsRangeParamsMushafId = 4
	GetV1BookmarksAyahsRangeParamsMushafIdN5  GetV1BookmarksAyahsRangeParamsMushafId = 5
	GetV1BookmarksAyahsRangeParamsMushafIdN6  GetV1BookmarksAyahsRangeParamsMushafId = 6
	GetV1BookmarksAyahsRangeParamsMushafIdN7  GetV1BookmarksAyahsRangeParamsMushafId = 7
)

// Defines values for GetV1BookmarksBookmarkParamsType.
const (
	GetV1BookmarksBookmarkParamsTypeAyah  GetV1BookmarksBookmarkParamsType = "ayah"
	GetV1BookmarksBookmarkParamsTypeJuz   GetV1BookmarksBookmarkParamsType = "juz"
	GetV1BookmarksBookmarkParamsTypePage  GetV1BookmarksBookmarkParamsType = "page"
	GetV1BookmarksBookmarkParamsTypeSurah GetV1BookmarksBookmarkParamsType = "surah"
)

// Defines values for GetV1BookmarksBookmarkParamsMushaf.
const (
	GetV1BookmarksBookmarkParamsMushafN1  GetV1BookmarksBookmarkParamsMushaf = 1
	GetV1BookmarksBookmarkParamsMushafN11 GetV1BookmarksBookmarkParamsMushaf = 11
	GetV1BookmarksBookmarkParamsMushafN19 GetV1BookmarksBookmarkParamsMushaf = 19
	GetV1BookmarksBookmarkParamsMushafN2  GetV1BookmarksBookmarkParamsMushaf = 2
	GetV1BookmarksBookmarkParamsMushafN3  GetV1BookmarksBookmarkParamsMushaf = 3
	GetV1BookmarksBookmarkParamsMushafN4  GetV1BookmarksBookmarkParamsMushaf = 4
	GetV1BookmarksBookmarkParamsMushafN5  GetV1BookmarksBookmarkParamsMushaf = 5
	GetV1BookmarksBookmarkParamsMushafN6  GetV1BookmarksBookmarkParamsMushaf = 6
	GetV1BookmarksBookmarkParamsMushafN7  GetV1BookmarksBookmarkParamsMushaf = 7
)

// Defines values for GetV1BookmarksCollectionsParamsType.
const (
	GetV1BookmarksCollectionsParamsTypeAyah  GetV1BookmarksCollectionsParamsType = "ayah"
	GetV1BookmarksCollectionsParamsTypeJuz   GetV1BookmarksCollectionsParamsType = "juz"
	GetV1BookmarksCollectionsParamsTypePage  GetV1BookmarksCollectionsParamsType = "page"
	GetV1BookmarksCollectionsParamsTypeSurah GetV1BookmarksCollectionsParamsType = "surah"
)

// Defines values for GetV1BookmarksCollectionsParamsMushafId.
const (
	GetV1BookmarksCollectionsParamsMushafIdN1  GetV1BookmarksCollectionsParamsMushafId = 1
	GetV1BookmarksCollectionsParamsMushafIdN11 GetV1BookmarksCollectionsParamsMushafId = 11
	GetV1BookmarksCollectionsParamsMushafIdN19 GetV1BookmarksCollectionsParamsMushafId = 19
	GetV1BookmarksCollectionsParamsMushafIdN2  GetV1BookmarksCollectionsParamsMushafId = 2
	GetV1BookmarksCollectionsParamsMushafIdN3  GetV1BookmarksCollectionsParamsMushafId = 3
	GetV1BookmarksCollectionsParamsMushafIdN4  GetV1BookmarksCollectionsParamsMushafId = 4
	GetV1BookmarksCollectionsParamsMushafIdN5  GetV1BookmarksCollectionsParamsMushafId = 5
	GetV1BookmarksCollectionsParamsMushafIdN6  GetV1BookmarksCollectionsParamsMushafId = 6
	GetV1BookmarksCollectionsParamsMushafIdN7  GetV1BookmarksCollectionsParamsMushafId = 7
)

// Defines values for GetV1CollectionsParamsSortBy.
const (
	Alphabetical    GetV1CollectionsParamsSortBy = "alphabetical"
	RecentlyUpdated GetV1CollectionsParamsSortBy = "recentlyUpdated"
)

// Defines values for GetV1CollectionsAllParamsSortBy.
const (
	GetV1CollectionsAllParamsSortByRecentlyAdded GetV1CollectionsAllParamsSortBy = "recentlyAdded"
	GetV1CollectionsAllParamsSortByVerseKey      GetV1CollectionsAllParamsSortBy = "verseKey"
)

// Defines values for GetV1CollectionsCollectionIdParamsSortBy.
const (
	GetV1CollectionsCollectionIdParamsSortByRecentlyAdded GetV1CollectionsCollectionIdParamsSortBy = "recentlyAdded"
	GetV1CollectionsCollectionIdParamsSortByVerseKey      GetV1CollectionsCollectionIdParamsSortBy = "verseKey"
)

// Defines values for PostV1CollectionsCollectionIdBookmarksJSONBody0Mushaf.
const (
	PostV1CollectionsCollectionIdBookmarksJSONBody0MushafN1  PostV1CollectionsCollectionIdBookmarksJSONBody0Mushaf = 1
	PostV1CollectionsCollectionIdBookmarksJSONBody0MushafN11 PostV1CollectionsCollectionIdBookmarksJSONBody0Mushaf = 11
	PostV1CollectionsCollectionIdBookmarksJSONBody0MushafN19 PostV1CollectionsCollectionIdBookmarksJSONBody0Mushaf = 19
	PostV1CollectionsCollectionIdBookmarksJSONBody0MushafN2  PostV1CollectionsCollectionIdBookmarksJSONBody0Mushaf = 2
	PostV1CollectionsCollectionIdBookmarksJSONBody0MushafN3  PostV1CollectionsCollectionIdBookmarksJSONBody0Mushaf = 3
	PostV1CollectionsCollectionIdBookmarksJSONBody0MushafN4  PostV1CollectionsCollectionIdBookmarksJSONBody0Mushaf = 4
	PostV1CollectionsCollectionIdBookmarksJSONBody0MushafN5  PostV1CollectionsCollectionIdBookmarksJSONBody0Mushaf = 5
	PostV1CollectionsCollectionIdBookmarksJSONBody0MushafN6  PostV1CollectionsCollectionIdBookmarksJSONBody0Mushaf = 6
	PostV1CollectionsCollectionIdBookmarksJSONBody0MushafN7  PostV1CollectionsCollectionIdBookmarksJSONBody0Mushaf = 7
)

// Defines values for PostV1CollectionsCollectionIdBookmarksJSONBody0Type.
const (
	Ayah PostV1CollectionsCollectionIdBookmarksJSONBody0Type = "ayah"
)

// Defines values for PostV1CollectionsCollectionIdBookmarksJSONBody1Mushaf.
const (
	PostV1CollectionsCollectionIdBookmarksJSONBody1MushafN1  PostV1CollectionsCollectionIdBookmarksJSONBody1Mushaf = 1
	PostV1CollectionsCollectionIdBookmarksJSONBody1MushafN11 PostV1CollectionsCollectionIdBookmarksJSONBody1Mushaf = 11
	PostV1CollectionsCollectionIdBookmarksJSONBody1MushafN19 PostV1CollectionsCollectionIdBookmarksJSONBody1Mushaf = 19
	PostV1CollectionsCollectionIdBookmarksJSONBody1MushafN2  PostV1CollectionsCollectionIdBookmarksJSONBody1Mushaf = 2
	PostV1CollectionsCollectionIdBookmarksJSONBody1MushafN3  PostV1CollectionsCollectionIdBookmarksJSONBody1Mushaf = 3
	PostV1CollectionsCollectionIdBookmarksJSONBody1MushafN4  PostV1CollectionsCollectionIdBookmarksJSONBody1Mushaf = 4
	PostV1CollectionsCollectionIdBookmarksJSONBody1MushafN5  PostV1CollectionsCollectionIdBookmarksJSONBody1Mushaf = 5
	PostV1CollectionsCollectionIdBookmarksJSONBody1MushafN6  PostV1CollectionsCollectionIdBookmarksJSONBody1Mushaf = 6
	PostV1CollectionsCollectionIdBookmarksJSONBody1MushafN7  PostV1CollectionsCollectionIdBookmarksJSONBody1Mushaf = 7
)

// Defines values for PostV1CollectionsCollectionIdBookmarksJSONBody1Type.
const (
	Juz   PostV1CollectionsCollectionIdBookmarksJSONBody1Type = "juz"
	Page  PostV1CollectionsCollectionIdBookmarksJSONBody1Type = "page"
	Surah PostV1CollectionsCollectionIdBookmarksJSONBody1Type = "surah"
)

// Defines values for PostV1GoalsParamsMushafId.
const (
	PostV1GoalsParamsMushafIdN1  PostV1GoalsParamsMushafId = 1
	PostV1GoalsParamsMushafIdN11 PostV1GoalsParamsMushafId = 11
	PostV1GoalsParamsMushafIdN19 PostV1GoalsParamsMushafId = 19
	PostV1GoalsParamsMushafIdN2  PostV1GoalsParamsMushafId = 2
	PostV1GoalsParamsMushafIdN3  PostV1GoalsParamsMushafId = 3
	PostV1GoalsParamsMushafIdN4  PostV1GoalsParamsMushafId = 4
	PostV1GoalsParamsMushafIdN5  PostV1GoalsParamsMushafId = 5
	PostV1GoalsParamsMushafIdN6  PostV1GoalsParamsMushafId = 6
	PostV1GoalsParamsMushafIdN7  PostV1GoalsParamsMushafId = 7
)

// Defines values for PostV1GoalsJSONBodyCategory.
const (
	PostV1GoalsJSONBodyCategoryCOURSE              PostV1GoalsJSONBodyCategory = "COURSE"
	PostV1GoalsJSONBodyCategoryQURAN               PostV1GoalsJSONBodyCategory = "QURAN"
	PostV1GoalsJSONBodyCategoryQURANREADINGPROGRAM PostV1GoalsJSONBodyCategory = "QURAN_READING_PROGRAM"
)

// Defines values for PostV1GoalsJSONBodyType.
const (
	PostV1GoalsJSONBodyTypeCOURSE              PostV1GoalsJSONBodyType = "COURSE"
	PostV1GoalsJSONBodyTypeQURANPAGES          PostV1GoalsJSONBodyType = "QURAN_PAGES"
	PostV1GoalsJSONBodyTypeQURANRANGE          PostV1GoalsJSONBodyType = "QURAN_RANGE"
	PostV1GoalsJSONBodyTypeQURANREADINGPROGRAM PostV1GoalsJSONBodyType = "QURAN_READING_PROGRAM"
	PostV1GoalsJSONBodyTypeQURANTIME           PostV1GoalsJSONBodyType = "QURAN_TIME"
)

// Defines values for GetV1GoalsEstimateParamsType.
const (
	GetV1GoalsEstimateParamsTypeCOURSE              GetV1GoalsEstimateParamsType = "COURSE"
	GetV1GoalsEstimateParamsTypeQURANPAGES          GetV1GoalsEstimateParamsType = "QURAN_PAGES"
	GetV1GoalsEstimateParamsTypeQURANRANGE          GetV1GoalsEstimateParamsType = "QURAN_RANGE"
	GetV1GoalsEstimateParamsTypeQURANREADINGPROGRAM GetV1GoalsEstimateParamsType = "QURAN_READING_PROGRAM"
	GetV1GoalsEstimateParamsTypeQURANTIME           GetV1GoalsEstimateParamsType = "QURAN_TIME"
)

// Defines values for GetV1GoalsEstimateParamsMushafId.
const (
	GetV1GoalsEstimateParamsMushafIdN1  GetV1GoalsEstimateParamsMushafId = 1
	GetV1GoalsEstimateParamsMushafIdN11 GetV1GoalsEstimateParamsMushafId = 11
	GetV1GoalsEstimateParamsMushafIdN19 GetV1GoalsEstimateParamsMushafId = 19
	GetV1GoalsEstimateParamsMushafIdN2  GetV1GoalsEstimateParamsMushafId = 2
	GetV1GoalsEstimateParamsMushafIdN3  GetV1GoalsEstimateParamsMushafId = 3
	GetV1GoalsEstimateParamsMushafIdN4  GetV1GoalsEstimateParamsMushafId = 4
	GetV1GoalsEstimateParamsMushafIdN5  GetV1GoalsEstimateParamsMushafId = 5
	GetV1GoalsEstimateParamsMushafIdN6  GetV1GoalsEstimateParamsMushafId = 6
	GetV1GoalsEstimateParamsMushafIdN7  GetV1GoalsEstimateParamsMushafId = 7
)

// Defines values for GetV1GoalsGetTodaysPlanParamsType.
const (
	GetV1GoalsGetTodaysPlanParamsTypeCOURSE              GetV1GoalsGetTodaysPlanParamsType = "COURSE"
	GetV1GoalsGetTodaysPlanParamsTypeQURANPAGES          GetV1GoalsGetTodaysPlanParamsType = "QURAN_PAGES"
	GetV1GoalsGetTodaysPlanParamsTypeQURANRANGE          GetV1GoalsGetTodaysPlanParamsType = "QURAN_RANGE"
	GetV1GoalsGetTodaysPlanParamsTypeQURANREADINGPROGRAM GetV1GoalsGetTodaysPlanParamsType = "QURAN_READING_PROGRAM"
	GetV1GoalsGetTodaysPlanParamsTypeQURANTIME           GetV1GoalsGetTodaysPlanParamsType = "QURAN_TIME"
)

// Defines values for DeleteV1GoalsIdParamsCategory.
const (
	DeleteV1GoalsIdParamsCategoryCOURSE              DeleteV1GoalsIdParamsCategory = "COURSE"
	DeleteV1GoalsIdParamsCategoryQURAN               DeleteV1GoalsIdParamsCategory = "QURAN"
	DeleteV1GoalsIdParamsCategoryQURANREADINGPROGRAM DeleteV1GoalsIdParamsCategory = "QURAN_READING_PROGRAM"
)

// Defines values for PutV1GoalsIdParamsMushafId.
const (
	PutV1GoalsIdParamsMushafIdN1  PutV1GoalsIdParamsMushafId = 1
	PutV1GoalsIdParamsMushafIdN11 PutV1GoalsIdParamsMushafId = 11
	PutV1GoalsIdParamsMushafIdN19 PutV1GoalsIdParamsMushafId = 19
	PutV1GoalsIdParamsMushafIdN2  PutV1GoalsIdParamsMushafId = 2
	PutV1GoalsIdParamsMushafIdN3  PutV1GoalsIdParamsMushafId = 3
	PutV1GoalsIdParamsMushafIdN4  PutV1GoalsIdParamsMushafId = 4
	PutV1GoalsIdParamsMushafIdN5  PutV1GoalsIdParamsMushafId = 5
	PutV1GoalsIdParamsMushafIdN6  PutV1GoalsIdParamsMushafId = 6
	PutV1GoalsIdParamsMushafIdN7  PutV1GoalsIdParamsMushafId = 7
)

// Defines values for PutV1GoalsIdJSONBodyCategory.
const (
	PutV1GoalsIdJSONBodyCategoryCOURSE              PutV1GoalsIdJSONBodyCategory = "COURSE"
	PutV1GoalsIdJSONBodyCategoryQURAN               PutV1GoalsIdJSONBodyCategory = "QURAN"
	PutV1GoalsIdJSONBodyCategoryQURANREADINGPROGRAM PutV1GoalsIdJSONBodyCategory = "QURAN_READING_PROGRAM"
)

// Defines values for PutV1GoalsIdJSONBodyType.
const (
	COURSE              PutV1GoalsIdJSONBodyType = "COURSE"
	QURANPAGES          PutV1GoalsIdJSONBodyType = "QURAN_PAGES"
	QURANRANGE          PutV1GoalsIdJSONBodyType = "QURAN_RANGE"
	QURANREADINGPROGRAM PutV1GoalsIdJSONBodyType = "QURAN_READING_PROGRAM"
	QURANTIME           PutV1GoalsIdJSONBodyType = "QURAN_TIME"
)

// Defines values for GetV1NotesParamsSortBy.
const (
	GetV1NotesParamsSortByNewest GetV1NotesParamsSortBy = "newest"
	GetV1NotesParamsSortByOldest GetV1NotesParamsSortBy = "oldest"
)

// Defines values for PostV1NotesJSONBodyAttachedEntityEntityType.
const (
	PostV1NotesJSONBodyAttachedEntityEntityTypeReflection PostV1NotesJSONBodyAttachedEntityEntityType = "reflection"
)

// Defines values for GetV1NotesByAttachedEntityParamsEntityType.
const (
	GetV1NotesByAttachedEntityParamsEntityTypeReflection GetV1NotesByAttachedEntityParamsEntityType = "reflection"
)

// Defines values for GetV1PostsParamsFiltersReferencesOperation.
const (
	GetV1PostsParamsFiltersReferencesOperationAND GetV1PostsParamsFiltersReferencesOperation = "AND"
	GetV1PostsParamsFiltersReferencesOperationOR  GetV1PostsParamsFiltersReferencesOperation = "OR"
)

// Defines values for GetV1PostsParamsFiltersTagsOperation.
const (
	GetV1PostsParamsFiltersTagsOperationAND GetV1PostsParamsFiltersTagsOperation = "AND"
	GetV1PostsParamsFiltersTagsOperationOR  GetV1PostsParamsFiltersTagsOperation = "OR"
)

// Defines values for GetV1PostsParamsTab.
const (
	GetV1PostsParamsTabDraft           GetV1PostsParamsTab = "draft"
	GetV1PostsParamsTabFavorite        GetV1PostsParamsTab = "favorite"
	GetV1PostsParamsTabFeed            GetV1PostsParamsTab = "feed"
	GetV1PostsParamsTabFollowing       GetV1PostsParamsTab = "following"
	GetV1PostsParamsTabMostPopular     GetV1PostsParamsTab = "most_popular"
	GetV1PostsParamsTabNewest          GetV1PostsParamsTab = "newest"
	GetV1PostsParamsTabOnlyRoomMembers GetV1PostsParamsTab = "only_room_members"
	GetV1PostsParamsTabPublic          GetV1PostsParamsTab = "public"
)

// Defines values for PostV1PostsReportPostIdJSONBodyAbuse.
const (
	InappropriateContent PostV1PostsReportPostIdJSONBodyAbuse = "Inappropriate content"
	OffensiveLanguage    PostV1PostsReportPostIdJSONBodyAbuse = "Offensive language"
	Other                PostV1PostsReportPostIdJSONBodyAbuse = "Other"
)

// Defines values for PostV1PreferencesParamsMushafId.
const (
	PostV1PreferencesParamsMushafIdN1  PostV1PreferencesParamsMushafId = 1
	PostV1PreferencesParamsMushafIdN11 PostV1PreferencesParamsMushafId = 11
	PostV1PreferencesParamsMushafIdN19 PostV1PreferencesParamsMushafId = 19
	PostV1PreferencesParamsMushafIdN2  PostV1PreferencesParamsMushafId = 2
	PostV1PreferencesParamsMushafIdN3  PostV1PreferencesParamsMushafId = 3
	PostV1PreferencesParamsMushafIdN4  PostV1PreferencesParamsMushafId = 4
	PostV1PreferencesParamsMushafIdN5  PostV1PreferencesParamsMushafId = 5
	PostV1PreferencesParamsMushafIdN6  PostV1PreferencesParamsMushafId = 6
	PostV1PreferencesParamsMushafIdN7  PostV1PreferencesParamsMushafId = 7
)

// Defines values for PostV1PreferencesJSONBodyGroup.
const (
	PostV1PreferencesJSONBodyGroupAudio             PostV1PreferencesJSONBodyGroup = "audio"
	PostV1PreferencesJSONBodyGroupLanguage          PostV1PreferencesJSONBodyGroup = "language"
	PostV1PreferencesJSONBodyGroupQuranReaderStyles PostV1PreferencesJSONBodyGroup = "quranReaderStyles"
	PostV1PreferencesJSONBodyGroupReading           PostV1PreferencesJSONBodyGroup = "reading"
	PostV1PreferencesJSONBodyGroupTafsirs           PostV1PreferencesJSONBodyGroup = "tafsirs"
	PostV1PreferencesJSONBodyGroupTheme             PostV1PreferencesJSONBodyGroup = "theme"
	PostV1PreferencesJSONBodyGroupTranslations      PostV1PreferencesJSONBodyGroup = "translations"
)

// Defines values for PostV1PreferencesJSONBody0Key.
const (
	Type PostV1PreferencesJSONBody0Key = "type"
)

// Defines values for PostV1PreferencesJSONBody1Key.
const (
	IsReadingByRevelationOrder PostV1PreferencesJSONBody1Key = "isReadingByRevelationOrder"
	ReadingPreference          PostV1PreferencesJSONBody1Key = "readingPreference"
	SelectedWordByWordLocale   PostV1PreferencesJSONBody1Key = "selectedWordByWordLocale"
	WordByWordContentType      PostV1PreferencesJSONBody1Key = "wordByWordContentType"
	WordByWordDisplay          PostV1PreferencesJSONBody1Key = "wordByWordDisplay"
	WordClickFunctionality     PostV1PreferencesJSONBody1Key = "wordClickFunctionality"
)

// Defines values for PostV1PreferencesJSONBody2Key.
const (
	MushafLines          PostV1PreferencesJSONBody2Key = "mushafLines"
	QuranFont            PostV1PreferencesJSONBody2Key = "quranFont"
	QuranTextFontScale   PostV1PreferencesJSONBody2Key = "quranTextFontScale"
	TafsirFontScale      PostV1PreferencesJSONBody2Key = "tafsirFontScale"
	TranslationFontScale PostV1PreferencesJSONBody2Key = "translationFontScale"
	WordByWordFontScale  PostV1PreferencesJSONBody2Key = "wordByWordFontScale"
)

// Defines values for PostV1PreferencesJSONBody3Key.
const (
	SelectedTranslations PostV1PreferencesJSONBody3Key = "selectedTranslations"
)

// Defines values for PostV1PreferencesJSONBody4Key.
const (
	SelectedTafsirs PostV1PreferencesJSONBody4Key = "selectedTafsirs"
)

// Defines values for PostV1PreferencesJSONBody5Key.
const (
	EnableAutoScrolling         PostV1PreferencesJSONBody5Key = "enableAutoScrolling"
	PlaybackRate                PostV1PreferencesJSONBody5Key = "playbackRate"
	Reciter                     PostV1PreferencesJSONBody5Key = "reciter"
	RepeatSettings              PostV1PreferencesJSONBody5Key = "repeatSettings"
	ShowTooltipWhenPlayingAudio PostV1PreferencesJSONBody5Key = "showTooltipWhenPlayingAudio"
)

// Defines values for PostV1PreferencesJSONBody6Key.
const (
	PostV1PreferencesJSONBody6KeyLanguage PostV1PreferencesJSONBody6Key = "language"
)

// Defines values for PostV1PreferencesJSONBody7Value.
const (
	PostV1PreferencesJSONBody7ValueAr PostV1PreferencesJSONBody7Value = "ar"
	PostV1PreferencesJSONBody7ValueBn PostV1PreferencesJSONBody7Value = "bn"
	PostV1PreferencesJSONBody7ValueEn PostV1PreferencesJSONBody7Value = "en"
	PostV1PreferencesJSONBody7ValueEs PostV1PreferencesJSONBody7Value = "es"
	PostV1PreferencesJSONBody7ValueFa PostV1PreferencesJSONBody7Value = "fa"
	PostV1PreferencesJSONBody7ValueFr PostV1PreferencesJSONBody7Value = "fr"
	PostV1PreferencesJSONBody7ValueId PostV1PreferencesJSONBody7Value = "id"
	PostV1PreferencesJSONBody7ValueIt PostV1PreferencesJSONBody7Value = "it"
	PostV1PreferencesJSONBody7ValueMs PostV1PreferencesJSONBody7Value = "ms"
	PostV1PreferencesJSONBody7ValueNl PostV1PreferencesJSONBody7Value = "nl"
	PostV1PreferencesJSONBody7ValuePt PostV1PreferencesJSONBody7Value = "pt"
	PostV1PreferencesJSONBody7ValueRu PostV1PreferencesJSONBody7Value = "ru"
	PostV1PreferencesJSONBody7ValueSq PostV1PreferencesJSONBody7Value = "sq"
	PostV1PreferencesJSONBody7ValueSw PostV1PreferencesJSONBody7Value = "sw"
	PostV1PreferencesJSONBody7ValueTh PostV1PreferencesJSONBody7Value = "th"
	PostV1PreferencesJSONBody7ValueTr PostV1PreferencesJSONBody7Value = "tr"
	PostV1PreferencesJSONBody7ValueUr PostV1PreferencesJSONBody7Value = "ur"
	PostV1PreferencesJSONBody7ValueZh PostV1PreferencesJSONBody7Value = "zh"
)

// Defines values for PostV1PreferencesJSONBody8Value.
const (
	PostV1PreferencesJSONBody8ValueAuto  PostV1PreferencesJSONBody8Value = "auto"
	PostV1PreferencesJSONBody8ValueDark  PostV1PreferencesJSONBody8Value = "dark"
	PostV1PreferencesJSONBody8ValueLight PostV1PreferencesJSONBody8Value = "light"
	PostV1PreferencesJSONBody8ValueSepia PostV1PreferencesJSONBody8Value = "sepia"
)

// Defines values for PostV1PreferencesJSONBody9Value.
const (
	PostV1PreferencesJSONBody9ValueReading     PostV1PreferencesJSONBody9Value = "reading"
	PostV1PreferencesJSONBody9ValueTranslation PostV1PreferencesJSONBody9Value = "translation"
)

// Defines values for PostV1PreferencesJSONBody10Value.
const (
	PostV1PreferencesJSONBody10ValueBn  PostV1PreferencesJSONBody10Value = "bn"
	PostV1PreferencesJSONBody10ValueDe  PostV1PreferencesJSONBody10Value = "de"
	PostV1PreferencesJSONBody10ValueEn  PostV1PreferencesJSONBody10Value = "en"
	PostV1PreferencesJSONBody10ValueFa  PostV1PreferencesJSONBody10Value = "fa"
	PostV1PreferencesJSONBody10ValueFr  PostV1PreferencesJSONBody10Value = "fr"
	PostV1PreferencesJSONBody10ValueHi  PostV1PreferencesJSONBody10Value = "hi"
	PostV1PreferencesJSONBody10ValueId  PostV1PreferencesJSONBody10Value = "id"
	PostV1PreferencesJSONBody10ValueInh PostV1PreferencesJSONBody10Value = "inh"
	PostV1PreferencesJSONBody10ValueRu  PostV1PreferencesJSONBody10Value = "ru"
	PostV1PreferencesJSONBody10ValueTa  PostV1PreferencesJSONBody10Value = "ta"
	PostV1PreferencesJSONBody10ValueTr  PostV1PreferencesJSONBody10Value = "tr"
	PostV1PreferencesJSONBody10ValueUr  PostV1PreferencesJSONBody10Value = "ur"
)

// Defines values for PostV1PreferencesJSONBody11Value.
const (
	PostV1PreferencesJSONBody11ValueNoAudio   PostV1PreferencesJSONBody11Value = "no-audio"
	PostV1PreferencesJSONBody11ValuePlayAudio PostV1PreferencesJSONBody11Value = "play-audio"
)

// Defines values for PostV1PreferencesJSONBody13Value.
const (
	PostV1PreferencesJSONBody13ValueTranslation     PostV1PreferencesJSONBody13Value = "translation"
	PostV1PreferencesJSONBody13ValueTransliteration PostV1PreferencesJSONBody13Value = "transliteration"
)

// Defines values for PostV1PreferencesJSONBody14Value.
const (
	PostV1PreferencesJSONBody14ValueInline  PostV1PreferencesJSONBody14Value = "inline"
	PostV1PreferencesJSONBody14ValueTooltip PostV1PreferencesJSONBody14Value = "tooltip"
)

// Defines values for PostV1PreferencesJSONBody15Value.
const (
	PostV1PreferencesJSONBody15ValueCodeV1         PostV1PreferencesJSONBody15Value = "code_v1"
	PostV1PreferencesJSONBody15ValueCodeV2         PostV1PreferencesJSONBody15Value = "code_v2"
	PostV1PreferencesJSONBody15ValueQpcUthmaniHafs PostV1PreferencesJSONBody15Value = "qpc_uthmani_hafs"
	PostV1PreferencesJSONBody15ValueTajweed        PostV1PreferencesJSONBody15Value = "tajweed"
	PostV1PreferencesJSONBody15ValueTajweedV4      PostV1PreferencesJSONBody15Value = "tajweed_v4"
	PostV1PreferencesJSONBody15ValueTextIndopak    PostV1PreferencesJSONBody15Value = "text_indopak"
	PostV1PreferencesJSONBody15ValueTextUthmani    PostV1PreferencesJSONBody15Value = "text_uthmani"
)

// Defines values for PostV1PreferencesJSONBody16Value.
const (
	PostV1PreferencesJSONBody16ValueN15Lines PostV1PreferencesJSONBody16Value = "15_lines"
	PostV1PreferencesJSONBody16ValueN16Lines PostV1PreferencesJSONBody16Value = "16_lines"
)

// Defines values for PostV1PreferencesJSONBody21Value.
const (
	PostV1PreferencesJSONBody21ValueN025 PostV1PreferencesJSONBody21Value = 0.25
	PostV1PreferencesJSONBody21ValueN05  PostV1PreferencesJSONBody21Value = 0.5
	PostV1PreferencesJSONBody21ValueN075 PostV1PreferencesJSONBody21Value = 0.75
	PostV1PreferencesJSONBody21ValueN1   PostV1PreferencesJSONBody21Value = 1
	PostV1PreferencesJSONBody21ValueN125 PostV1PreferencesJSONBody21Value = 1.25
	PostV1PreferencesJSONBody21ValueN15  PostV1PreferencesJSONBody21Value = 1.5
	PostV1PreferencesJSONBody21ValueN175 PostV1PreferencesJSONBody21Value = 1.75
	PostV1PreferencesJSONBody21ValueN2   PostV1PreferencesJSONBody21Value = 2
)

// Defines values for PostV1PreferencesBulkParamsMushafId.
const (
	PostV1PreferencesBulkParamsMushafIdN1  PostV1PreferencesBulkParamsMushafId = 1
	PostV1PreferencesBulkParamsMushafIdN11 PostV1PreferencesBulkParamsMushafId = 11
	PostV1PreferencesBulkParamsMushafIdN19 PostV1PreferencesBulkParamsMushafId = 19
	PostV1PreferencesBulkParamsMushafIdN2  PostV1PreferencesBulkParamsMushafId = 2
	PostV1PreferencesBulkParamsMushafIdN3  PostV1PreferencesBulkParamsMushafId = 3
	PostV1PreferencesBulkParamsMushafIdN4  PostV1PreferencesBulkParamsMushafId = 4
	PostV1PreferencesBulkParamsMushafIdN5  PostV1PreferencesBulkParamsMushafId = 5
	PostV1PreferencesBulkParamsMushafIdN6  PostV1PreferencesBulkParamsMushafId = 6
	PostV1PreferencesBulkParamsMushafIdN7  PostV1PreferencesBulkParamsMushafId = 7
)

// Defines values for GetV1StreaksParamsType.
const (
	GetV1StreaksParamsTypeQURAN GetV1StreaksParamsType = "QURAN"
)

// Defines values for GetV1StreaksParamsSortOrder.
const (
	GetV1StreaksParamsSortOrderAsc  GetV1StreaksParamsSortOrder = "asc"
	GetV1StreaksParamsSortOrderDesc GetV1StreaksParamsSortOrder = "desc"
)

// Defines values for GetV1StreaksParamsOrderBy.
const (
	Days      GetV1StreaksParamsOrderBy = "days"
	StartDate GetV1StreaksParamsOrderBy = "startDate"
)

// Defines values for GetV1StreaksParamsStatus.
const (
	ACTIVE GetV1StreaksParamsStatus = "ACTIVE"
	BROKEN GetV1StreaksParamsStatus = "BROKEN"
)

// Defines values for GetV1StreaksCurrentStreakDaysParamsType.
const (
	GetV1StreaksCurrentStreakDaysParamsTypeQURAN GetV1StreaksCurrentStreakDaysParamsType = "QURAN"
)

// Author Details about the author.
type Author struct {
	// DisplayName The display name of the author of the comment.
	DisplayName string `json:"displayName"`

	// FirstName The first name of the author of the comment.
	FirstName string `json:"firstName"`

	// Followed Whether the current user is following the author of the comment or not.
	Followed bool `json:"followed"`

	// Id The id of the author of the comment.
	Id int `json:"id"`

	// LastName The first name of the author of the comment.
	LastName string `json:"lastName"`

	// ProfileImage The profile image of the author of the comment. Will be `null` if it's empty
	ProfileImage *string `json:"profileImage"`

	// Username The username of the author of the comment.
	Username string `json:"username"`

	// Verified Whether the comment's author has been verified.
	Verified bool `json:"verified"`
}

// Bookmark defines model for Bookmark.
type Bookmark struct {
	CreatedAt   time.Time `json:"createdAt"`
	Group       *string   `json:"group,omitempty"`
	Id          string    `json:"id"`
	Key         int       `json:"key"`
	Type        string    `json:"type"`
	VerseNumber *int      `json:"verseNumber,omitempty"`
}

// Collection defines model for Collection.
type Collection struct {
	Id        string    `json:"id"`
	Name      string    `json:"name"`
	UpdatedAt time.Time `json:"updatedAt"`
}

// Comment defines model for Comment.
type Comment struct {
	// Author Details about the author.
	Author *Author `json:"author,omitempty"`

	// Body The body of the comment.
	Body string `json:"body"`

	// CreatedAt The creation date of the comment.
	CreatedAt string `json:"createdAt"`

	// Hidden Whether the comment is hidden.
	Hidden bool `json:"hidden"`

	// Id The id of the comment.
	Id int `json:"id"`

	// ParentId The parent comment's id. Will be `null` if this comment does not have a parent.
	ParentId *int `json:"parentId"`
}

// EstimatedGoalTimeline defines model for EstimatedGoalTimeline.
type EstimatedGoalTimeline struct {
	Week *[]EstimatedGoalTimelineDay `json:"week,omitempty"`
}

// EstimatedGoalTimelineDay defines model for EstimatedGoalTimelineDay.
type EstimatedGoalTimelineDay struct {
	// Amount The amount of the day's goal.
	Amount EstimatedGoalTimelineDay_Amount `json:"amount"`

	// Date The date of the estimated day
	Date time.Time `json:"date"`
}

// EstimatedGoalTimelineDayAmount0 defines model for .
type EstimatedGoalTimelineDayAmount0 = string

// EstimatedGoalTimelineDayAmount1 defines model for .
type EstimatedGoalTimelineDayAmount1 = int

// EstimatedGoalTimelineDay_Amount The amount of the day's goal.
type EstimatedGoalTimelineDay_Amount struct {
	union json.RawMessage
}

// Notification defines model for Notification.
type Notification struct {
	// AvatarUrl The Avatar url of the user the notification is related to.
	AvatarUrl string `json:"avatarUrl"`

	// Body The notification body. Might contain HTML.
	Body string `json:"body"`

	// CreatedAt The creation date of the notification.
	CreatedAt string `json:"createdAt"`

	// Id The notification Id.
	Id int `json:"id"`

	// PostUrl The post URL the notification is related to.
	PostUrl string `json:"postUrl"`
}

// NotificationSettings defines model for NotificationSettings.
type NotificationSettings struct {
	// AddedPostInGroupNotification User receives an email when someone in a group the user is in creates a new post.
	AddedPostInGroupNotification *bool `json:"addedPostInGroupNotification,omitempty"`

	// AddedPostInGroupPushNotification User receives a notification when someone in a group the user is in creates a new post.
	AddedPostInGroupPushNotification *bool `json:"addedPostInGroupPushNotification,omitempty"`

	// EmailsDisabled Disable Email Notifications
	EmailsDisabled *bool `json:"emailsDisabled,omitempty"`

	// FollowNotification User receives an email when someone follows the user
	FollowNotification *bool `json:"followNotification,omitempty"`

	// FollowPushNotification User receives a notification when someone follows the user.
	FollowPushNotification *bool `json:"followPushNotification,omitempty"`

	// FollowedUserAddedPostNotification User receives an email when someone the user follows adds a new post.
	FollowedUserAddedPostNotification *bool `json:"followedUserAddedPostNotification,omitempty"`

	// FollowedUserAddedPostPushNotification User receives a notification when someone that the user follows adds a new post.
	FollowedUserAddedPostPushNotification *bool `json:"followedUserAddedPostPushNotification,omitempty"`

	// MentionNotification User receives an email when someone mentions the user in a post or comment.
	MentionNotification *bool `json:"mentionNotification,omitempty"`

	// MentionPushNotification User receives a notification when someone mentions the user in a post or comment.
	MentionPushNotification *bool `json:"mentionPushNotification,omitempty"`

	// PostCommentedNotification Receive email when someone comments on the user's post.
	PostCommentedNotification *bool `json:"postCommentedNotification,omitempty"`

	// PostCommentedPushNotification User receives a notification when someone comments on the user's post.
	PostCommentedPushNotification *bool `json:"postCommentedPushNotification,omitempty"`

	// PostLikedNotification Receive email when someone likes the user's post.
	PostLikedNotification *bool `json:"postLikedNotification,omitempty"`

	// PostLikedPushNotification User receives a notification when someone likes the user's post.
	PostLikedPushNotification *bool `json:"postLikedPushNotification,omitempty"`
}

// Post defines model for Post.
type Post struct {
	// Author Details about the author.
	Author *Author `json:"author,omitempty"`

	// Body The body of the post.
	Body string `json:"body"`

	// Comments List of comments that belong to the post.
	Comments *[]Comment `json:"comments,omitempty"`

	// CommentsCount The number of comments the post has. This includes private comments.
	CommentsCount int `json:"commentsCount"`

	// CreatedAt The date the post was created at. Format of the date is `MMMM dd, yyyy HH:mm`
	CreatedAt string `json:"createdAt"`

	// Deletable Whether the post is deletable or not. It will be `true` if the post belongs to the current user.
	Deletable bool `json:"deletable"`

	// Editable Whether the post is editable or not. It will be `true` if the post belongs to the current user.
	Editable bool `json:"editable"`

	// EstimatedReadingTime The average number of milliseconds it takes to read the post. It can be `0` if the value could not be estimated.
	EstimatedReadingTime float32 `json:"estimatedReadingTime"`

	// Global Whether the post is global or not. A post inside a room can be set to global and becomes visible to everyone.
	Global bool `json:"global"`

	// Group The name of the group the post belongs to. Will be `null` it the post does not belong to a group.
	Group *string `json:"group"`

	// GroupLink The link to the group the post belongs to. Will be `null` it the post does not belong to a group.
	GroupLink *string `json:"groupLink"`

	// Hidden Whether the post is hidden or not.
	Hidden bool `json:"hidden"`

	// Id The ID of the post.
	Id int `json:"id"`

	// IsPrivate Whether the post should be publicly viewed or not.
	IsPrivate bool `json:"isPrivate"`

	// Language The language of the post.
	Language string `json:"language"`

	// LastUpdated The date the post was last updated. Format of the date is `MMMM dd, yyyy HH:mm`
	LastUpdated string `json:"lastUpdated"`

	// Liked Whether the post was liked by the current user or not.
	Liked bool `json:"liked"`

	// Likes The number of likes.
	Likes int `json:"likes"`

	// PostTitle A social-media sharable title of the post.
	PostTitle string `json:"postTitle"`

	// PublicCommentsCount The number of public comments the post has.
	PublicCommentsCount int `json:"publicCommentsCount"`

	// PublishedAt The date the post was published at. Format of the date is `MMMM dd, yyyy HH:mm`
	PublishedAt string           `json:"publishedAt"`
	References  *[]PostReference `json:"references,omitempty"`

	// Reportable Whether the current user can report the post or not.
	Reportable bool `json:"reportable"`

	// Restorable Whether the current user can restore the post after it was deleted or not.
	Restorable bool `json:"restorable"`

	// RoomId The Id of the room the post belongs to.
	RoomId *int `json:"roomId"`

	// RoomPostStatus The room post status.
	RoomPostStatus RoomPostStatus `json:"roomPostStatus"`

	// Saved Whether the post was saved by the current user or not.
	Saved bool `json:"saved"`

	// Tags List of tags the post belongs to. If `tags` not passed with update post API, existing references of the post will be removed.
	Tags *[]PostTag `json:"tags,omitempty"`

	// Verified Whether the post is verified or not.
	Verified bool `json:"verified"`

	// Views The number of views.
	Views int `json:"views"`
}

// PostReference defines model for PostReference.
type PostReference struct {
	// FromAyah The start of the range of Ayah(s) in a Surah that the post relates to.
	//
	//  If it's a single Ayah,`fromAyah` and `toAyah` should have the same value.
	//
	//  If the post belongs to the entire Surah, `fromAyah` and `toAyah` should be left empty
	FromAyah *int `json:"fromAyah"`

	// IsSurah Whether the post belongs to the entire Surah.
	IsSurah *bool `json:"isSurah,omitempty"`

	// SurahId The Surah number
	SurahId int `json:"surahId"`

	// ToAyah The end of the range of Ayah(s) in a Surah that the post relates to.
	//
	//  If it's a single Ayah,`fromAyah` and `toAyah` should have the same value.
	//
	//  If the post belongs to the entire Surah, `fromAyah` and `toAyah` should be left empty
	ToAyah *int `json:"toAyah"`
}

// PostTag defines model for PostTag.
type PostTag struct {
	// Id The Id of the tag
	Id int `json:"id"`

	// Language The language of the tag.
	Language string `json:"language"`

	// Name The name of the tag.
	Name string `json:"name"`
}

// Preference defines model for Preference.
type Preference struct {
	Audio *struct {
		EnableAutoScrolling         *bool                        `json:"enableAutoScrolling,omitempty"`
		PlaybackRate                *PreferenceAudioPlaybackRate `json:"playbackRate,omitempty"`
		Reciter                     int                          `json:"reciter"`
		ShowTooltipWhenPlayingAudio *bool                        `json:"showTooltipWhenPlayingAudio,omitempty"`
	} `json:"audio,omitempty"`
	Language *struct {
		Language *PreferenceLanguageLanguage `json:"language,omitempty"`
	} `json:"language,omitempty"`
	QuranReaderStyles *struct {
		MushafLines          *PreferenceQuranReaderStylesMushafLines `json:"mushafLines,omitempty"`
		QuranFont            *PreferenceQuranReaderStylesQuranFont   `json:"quranFont,omitempty"`
		QuranTextFontScale   int                                     `json:"quranTextFontScale"`
		TafsirFontScale      int                                     `json:"tafsirFontScale"`
		TranslationFontScale int                                     `json:"translationFontScale"`
		WordByWordFontScale  int                                     `json:"wordByWordFontScale"`
	} `json:"quranReaderStyles,omitempty"`
	Reading *struct {
		IsReadingByRevelationOrder *bool                                     `json:"isReadingByRevelationOrder,omitempty"`
		ReadingPreference          PreferenceReadingReadingPreference        `json:"readingPreference"`
		SelectedWordByWordLocale   PreferenceReadingSelectedWordByWordLocale `json:"selectedWordByWordLocale"`
		WordByWordContentType      []PreferenceReadingWordByWordContentType  `json:"wordByWordContentType"`
		WordByWordDisplay          []PreferenceReadingWordByWordDisplay      `json:"wordByWordDisplay"`
		WordClickFunctionality     PreferenceReadingWordClickFunctionality   `json:"wordClickFunctionality"`
	} `json:"reading,omitempty"`
	Tafsirs *struct {
		SelectedTafsirs *[]string `json:"selectedTafsirs,omitempty"`
	} `json:"tafsirs,omitempty"`
	Theme *struct {
		Type *PreferenceThemeType `json:"type,omitempty"`
	} `json:"theme,omitempty"`
	Translations *struct {
		SelectedTranslations *[]int `json:"selectedTranslations,omitempty"`
	} `json:"translations,omitempty"`
}

// PreferenceAudioPlaybackRate defines model for Preference.Audio.PlaybackRate.
type PreferenceAudioPlaybackRate int

// PreferenceLanguageLanguage defines model for Preference.Language.Language.
type PreferenceLanguageLanguage string

// PreferenceQuranReaderStylesMushafLines defines model for Preference.QuranReaderStyles.MushafLines.
type PreferenceQuranReaderStylesMushafLines string

// PreferenceQuranReaderStylesQuranFont defines model for Preference.QuranReaderStyles.QuranFont.
type PreferenceQuranReaderStylesQuranFont string

// PreferenceReadingReadingPreference defines model for Preference.Reading.ReadingPreference.
type PreferenceReadingReadingPreference string

// PreferenceReadingSelectedWordByWordLocale defines model for Preference.Reading.SelectedWordByWordLocale.
type PreferenceReadingSelectedWordByWordLocale string

// PreferenceReadingWordByWordContentType defines model for Preference.Reading.WordByWordContentType.
type PreferenceReadingWordByWordContentType string

// PreferenceReadingWordByWordDisplay defines model for Preference.Reading.WordByWordDisplay.
type PreferenceReadingWordByWordDisplay string

// PreferenceReadingWordClickFunctionality defines model for Preference.Reading.WordClickFunctionality.
type PreferenceReadingWordClickFunctionality string

// PreferenceThemeType defines model for Preference.Theme.Type.
type PreferenceThemeType string

// ReadingSession defines model for ReadingSession.
type ReadingSession struct {
	ChapterNumber *int      `json:"chapterNumber,omitempty"`
	Id            string    `json:"id"`
	UpdatedAt     time.Time `json:"updatedAt"`
	VerseNumber   *int      `json:"verseNumber,omitempty"`
}

// Room defines model for Room.
type Room struct {
	// Active Whether the group is active or not.
	Active bool `json:"active"`

	// Avatar The avatar of the group.
	Avatar string `json:"avatar"`

	// CurrentUserIsAdmin Whether the current user is an admin or not.
	CurrentUserIsAdmin bool `json:"currentUserIsAdmin"`

	// Description The description of the room.
	Description string `json:"description"`

	// Group The group slug. Will be empty when it is a page.
	Group string `json:"group"`

	// Id The id of the room.
	Id int `json:"id"`

	// Link The link of the group/page. Will contain only the base domain when it is a page.
	Link string `json:"link"`

	// MembersCount The number of members.
	MembersCount int `json:"membersCount"`

	// Name The name of the room.
	Name string `json:"name"`

	// PostsCount The number of posts.
	PostsCount int `json:"postsCount"`

	// Public Whether the group is public or not.
	Public bool `json:"public"`

	// RoomType The type of the group
	RoomType RoomRoomType `json:"roomType"`

	// Subdomain The subdomain of the page. Will be empty when it is a group.
	Subdomain string `json:"subdomain"`

	// Verified Whether the group is verified or not. Will be `true` if it's a page.
	Verified bool `json:"verified"`
}

// RoomRoomType The type of the group
type RoomRoomType string

// RoomPostStatus The room post status.
type RoomPostStatus string

// UserProfile defines model for UserProfile.
type UserProfile struct {
	CreatedAt *time.Time `json:"createdAt,omitempty"`
	Email     *string    `json:"email,omitempty"`
	FirstName *string    `json:"firstName,omitempty"`
	Id        *string    `json:"id,omitempty"`
	LastName  *string    `json:"lastName,omitempty"`
	PhotoUrl  *string    `json:"photoUrl,omitempty"`
}

// GetV1ActivityDaysParams defines parameters for GetV1ActivityDays.
type GetV1ActivityDaysParams struct {
	// From The start date of the activity days
	From *string `form:"from,omitempty" json:"from,omitempty"`

	// To The last date of the activity days
	To *string `form:"to,omitempty" json:"to,omitempty"`

	// DateOrderBy Order by activity day's date
	DateOrderBy *GetV1ActivityDaysParamsDateOrderBy `form:"dateOrderBy,omitempty" json:"dateOrderBy,omitempty"`

	// Type The type of the activity day
	Type *GetV1ActivityDaysParamsType `form:"type,omitempty" json:"type,omitempty"`

	// Last The number of items to be fetched. Should be used together with `before`
	Last *int `form:"last,omitempty" json:"last,omitempty"`

	// First The number of items to be fetched.
	First *int `form:"first,omitempty" json:"first,omitempty"`

	// After The cursor after which you want to get the next page of items. Should be used together with `first`
	After *string `form:"after,omitempty" json:"after,omitempty"`

	// Before The cursor before which the previous page of items will be fetched. Should be used together with `last`
	Before *string `form:"before,omitempty" json:"before,omitempty"`
}

// GetV1ActivityDaysParamsDateOrderBy defines parameters for GetV1ActivityDays.
type GetV1ActivityDaysParamsDateOrderBy string

// GetV1ActivityDaysParamsType defines parameters for GetV1ActivityDays.
type GetV1ActivityDaysParamsType string

// PostV1ActivityDaysJSONBody defines parameters for PostV1ActivityDays.
type PostV1ActivityDaysJSONBody struct {
	// Date The date of the activity day, can be today or a past date. If not passed, default to today
	Date *string `json:"date,omitempty"`

	// Type The type of the activity day
	Type  PostV1ActivityDaysJSONBodyType `json:"type"`
	union json.RawMessage
}

// PostV1ActivityDaysParams defines parameters for PostV1ActivityDays.
type PostV1ActivityDaysParams struct {
	// XTimezone The current timezone of the user. Not providing the value might affect the accuracy of how we calculate days and streaks.
	XTimezone *string `json:"x-timezone,omitempty"`
}

// PostV1ActivityDaysJSONBodyType defines parameters for PostV1ActivityDays.
type PostV1ActivityDaysJSONBodyType string

// PostV1ActivityDaysJSONBody0 defines parameters for PostV1ActivityDays.
type PostV1ActivityDaysJSONBody0 struct {
	// MushafId The id of the Mushaf being used.
	//
	// 1 = QCFV2
	//
	//   2 = QCFV1
	//
	//   3 = Indopak
	//
	//   4 = UthmaniHafs
	//
	//   5 = KFGQPCHAFS
	//
	//   6 = Indopak15Lines
	//
	//   7 = Indopak16Lines
	//
	//   11 = Tajweeed
	//
	//   19 = QCFTajweedV4
	MushafId PostV1ActivityDaysJSONBody0MushafId `json:"mushafId"`

	// Ranges Current request's read range of Ayahs
	Ranges []string `json:"ranges"`

	// Seconds Seconds spent reading the current request's ranges
	Seconds int `json:"seconds"`
}

// PostV1ActivityDaysJSONBody0MushafId defines parameters for PostV1ActivityDays.
type PostV1ActivityDaysJSONBody0MushafId int

// GetV1ActivityDaysEstimateReadingTimeParams defines parameters for GetV1ActivityDaysEstimateReadingTime.
type GetV1ActivityDaysEstimateReadingTimeParams struct {
	// Ranges a comma separated string of Ayah ranges e.g. 1:1-1:2
	Ranges string `form:"ranges" json:"ranges"`
}

// GetV1BookmarksParams defines parameters for GetV1Bookmarks.
type GetV1BookmarksParams struct {
	// Type The bookmark type.
	Type *GetV1BookmarksParamsType `form:"type,omitempty" json:"type,omitempty"`

	// MushafId The id of the Mushaf being used.
	//
	// 1 = QCFV2
	//
	//   2 = QCFV1
	//
	//   3 = Indopak
	//
	//   4 = UthmaniHafs
	//
	//   5 = KFGQPCHAFS
	//
	//   6 = Indopak15Lines
	//
	//   7 = Indopak16Lines
	//
	//   11 = Tajweeed
	//
	//   19 = QCFTajweedV4
	MushafId GetV1BookmarksParamsMushafId `form:"mushafId" json:"mushafId"`

	// Last The number of items to be fetched. Should be used together with `before`
	Last *int `form:"last,omitempty" json:"last,omitempty"`

	// First The number of items to be fetched.
	First *int `form:"first,omitempty" json:"first,omitempty"`

	// After The cursor after which you want to get the next page of items. Should be used together with `first`
	After *string `form:"after,omitempty" json:"after,omitempty"`

	// Before The cursor before which the previous page of items will be fetched. Should be used together with `last`
	Before *string `form:"before,omitempty" json:"before,omitempty"`
}

// GetV1BookmarksParamsType defines parameters for GetV1Bookmarks.
type GetV1BookmarksParamsType string

// GetV1BookmarksParamsMushafId defines parameters for GetV1Bookmarks.
type GetV1BookmarksParamsMushafId int

// PostV1BookmarksJSONBody defines parameters for PostV1Bookmarks.
type PostV1BookmarksJSONBody struct {
	union json.RawMessage
}

// PostV1BookmarksJSONBody0 defines parameters for PostV1Bookmarks.
type PostV1BookmarksJSONBody0 struct {
	// Key The Surah number.
	Key int `json:"key"`

	// Mushaf The id of the Mushaf being used.
	//
	// 1 = QCFV2
	//
	//   2 = QCFV1
	//
	//   3 = Indopak
	//
	//   4 = UthmaniHafs
	//
	//   5 = KFGQPCHAFS
	//
	//   6 = Indopak15Lines
	//
	//   7 = Indopak16Lines
	//
	//   11 = Tajweeed
	//
	//   19 = QCFTajweedV4
	Mushaf PostV1BookmarksJSONBody0Mushaf `json:"mushaf"`

	// Type The bookmark type.
	Type *PostV1BookmarksJSONBody0Type `json:"type,omitempty"`

	// VerseNumber The Ayah number to be added.
	VerseNumber int `json:"verseNumber"`
}

// PostV1BookmarksJSONBody0Mushaf defines parameters for PostV1Bookmarks.
type PostV1BookmarksJSONBody0Mushaf int

// PostV1BookmarksJSONBody0Type defines parameters for PostV1Bookmarks.
type PostV1BookmarksJSONBody0Type string

// PostV1BookmarksJSONBody1 defines parameters for PostV1Bookmarks.
type PostV1BookmarksJSONBody1 struct {
	// Key Surah, Juz or page number.
	Key int `json:"key"`

	// Mushaf The id of the Mushaf being used.
	//
	// 1 = QCFV2
	//
	//   2 = QCFV1
	//
	//   3 = Indopak
	//
	//   4 = UthmaniHafs
	//
	//   5 = KFGQPCHAFS
	//
	//   6 = Indopak15Lines
	//
	//   7 = Indopak16Lines
	//
	//   11 = Tajweeed
	//
	//   19 = QCFTajweedV4
	Mushaf PostV1BookmarksJSONBody1Mushaf `json:"mushaf"`

	// Type The bookmark type.
	Type *PostV1BookmarksJSONBody1Type `json:"type,omitempty"`
}

// PostV1BookmarksJSONBody1Mushaf defines parameters for PostV1Bookmarks.
type PostV1BookmarksJSONBody1Mushaf int

// PostV1BookmarksJSONBody1Type defines parameters for PostV1Bookmarks.
type PostV1BookmarksJSONBody1Type string

// GetV1BookmarksAyahsRangeParams defines parameters for GetV1BookmarksAyahsRange.
type GetV1BookmarksAyahsRangeParams struct {
	// ChapterNumber The number of the Surah that the Ayahs range belong to.
	ChapterNumber int `form:"chapterNumber" json:"chapterNumber"`

	// RangeStartAyahNumber The Ayah number at which the range starts.
	RangeStartAyahNumber int `form:"rangeStartAyahNumber" json:"rangeStartAyahNumber"`

	// RangeEndAyahNumber The Ayah number at which the range ends.
	RangeEndAyahNumber int `form:"rangeEndAyahNumber" json:"rangeEndAyahNumber"`

	// MushafId The id of the Mushaf being used.
	//
	// 1 = QCFV2
	//
	//   2 = QCFV1
	//
	//   3 = Indopak
	//
	//   4 = UthmaniHafs
	//
	//   5 = KFGQPCHAFS
	//
	//   6 = Indopak15Lines
	//
	//   7 = Indopak16Lines
	//
	//   11 = Tajweeed
	//
	//   19 = QCFTajweedV4
	MushafId GetV1BookmarksAyahsRangeParamsMushafId `form:"mushafId" json:"mushafId"`
}

// GetV1BookmarksAyahsRangeParamsMushafId defines parameters for GetV1BookmarksAyahsRange.
type GetV1BookmarksAyahsRangeParamsMushafId int

// GetV1BookmarksBookmarkParams defines parameters for GetV1BookmarksBookmark.
type GetV1BookmarksBookmarkParams struct {
	// Key Surah, Juz or page number.
	Key int `form:"key" json:"key"`

	// Type The bookmark type.
	Type *GetV1BookmarksBookmarkParamsType `form:"type,omitempty" json:"type,omitempty"`

	// VerseNumber The Ayah number of the bookmark
	VerseNumber *int `form:"verseNumber,omitempty" json:"verseNumber,omitempty"`

	// Mushaf The id of the Mushaf being used.
	//
	// 1 = QCFV2
	//
	//   2 = QCFV1
	//
	//   3 = Indopak
	//
	//   4 = UthmaniHafs
	//
	//   5 = KFGQPCHAFS
	//
	//   6 = Indopak15Lines
	//
	//   7 = Indopak16Lines
	//
	//   11 = Tajweeed
	//
	//   19 = QCFTajweedV4
	Mushaf GetV1BookmarksBookmarkParamsMushaf `form:"mushaf" json:"mushaf"`
}

// GetV1BookmarksBookmarkParamsType defines parameters for GetV1BookmarksBookmark.
type GetV1BookmarksBookmarkParamsType string

// GetV1BookmarksBookmarkParamsMushaf defines parameters for GetV1BookmarksBookmark.
type GetV1BookmarksBookmarkParamsMushaf int

// GetV1BookmarksCollectionsParams defines parameters for GetV1BookmarksCollections.
type GetV1BookmarksCollectionsParams struct {
	// Key Surah, Juz or page number.
	Key float32 `form:"key" json:"key"`

	// Type The bookmark type.
	Type *GetV1BookmarksCollectionsParamsType `form:"type,omitempty" json:"type,omitempty"`

	// MushafId The id of the Mushaf being used.
	//
	// 1 = QCFV2
	//
	//   2 = QCFV1
	//
	//   3 = Indopak
	//
	//   4 = UthmaniHafs
	//
	//   5 = KFGQPCHAFS
	//
	//   6 = Indopak15Lines
	//
	//   7 = Indopak16Lines
	//
	//   11 = Tajweeed
	//
	//   19 = QCFTajweedV4
	MushafId GetV1BookmarksCollectionsParamsMushafId `form:"mushafId" json:"mushafId"`

	// Last The number of items to be fetched. Should be used together with `before`
	Last *int `form:"last,omitempty" json:"last,omitempty"`

	// First The number of items to be fetched.
	First *int `form:"first,omitempty" json:"first,omitempty"`

	// After The cursor after which you want to get the next page of items. Should be used together with `first`
	After *string `form:"after,omitempty" json:"after,omitempty"`

	// Before The cursor before which the previous page of items will be fetched. Should be used together with `last`
	Before *string `form:"before,omitempty" json:"before,omitempty"`
}

// GetV1BookmarksCollectionsParamsType defines parameters for GetV1BookmarksCollections.
type GetV1BookmarksCollectionsParamsType string

// GetV1BookmarksCollectionsParamsMushafId defines parameters for GetV1BookmarksCollections.
type GetV1BookmarksCollectionsParamsMushafId int

// GetV1CollectionsParams defines parameters for GetV1Collections.
type GetV1CollectionsParams struct {
	// SortBy Sort the collections list either by the time they were updated at descendingly or alphabetically.
	SortBy *GetV1CollectionsParamsSortBy `form:"sortBy,omitempty" json:"sortBy,omitempty"`

	// Last The number of items to be fetched. Should be used together with `before`
	Last *int `form:"last,omitempty" json:"last,omitempty"`

	// First The number of items to be fetched.
	First *int `form:"first,omitempty" json:"first,omitempty"`

	// After The cursor after which you want to get the next page of items. Should be used together with `first`
	After *string `form:"after,omitempty" json:"after,omitempty"`

	// Before The cursor before which the previous page of items will be fetched. Should be used together with `last`
	Before *string `form:"before,omitempty" json:"before,omitempty"`
}

// GetV1CollectionsParamsSortBy defines parameters for GetV1Collections.
type GetV1CollectionsParamsSortBy string

// PostV1CollectionsJSONBody defines parameters for PostV1Collections.
type PostV1CollectionsJSONBody struct {
	// Name The name of the new collection to be created.
	Name string `json:"name"`
}

// GetV1CollectionsAllParams defines parameters for GetV1CollectionsAll.
type GetV1CollectionsAllParams struct {
	// SortBy Sort the collection items either by the time they were added at descendingly or alphabetically.
	SortBy *GetV1CollectionsAllParamsSortBy `form:"sortBy,omitempty" json:"sortBy,omitempty"`

	// Last The number of items to be fetched. Should be used together with `before`
	Last *int `form:"last,omitempty" json:"last,omitempty"`

	// First The number of items to be fetched.
	First *int `form:"first,omitempty" json:"first,omitempty"`

	// After The cursor after which you want to get the next page of items. Should be used together with `first`
	After *string `form:"after,omitempty" json:"after,omitempty"`

	// Before The cursor before which the previous page of items will be fetched. Should be used together with `last`
	Before *string `form:"before,omitempty" json:"before,omitempty"`
}

// GetV1CollectionsAllParamsSortBy defines parameters for GetV1CollectionsAll.
type GetV1CollectionsAllParamsSortBy string

// GetV1CollectionsCollectionIdParams defines parameters for GetV1CollectionsCollectionId.
type GetV1CollectionsCollectionIdParams struct {
	// SortBy Sort the collection items either by the time they were added at descendingly or by Ayah key.
	SortBy *GetV1CollectionsCollectionIdParamsSortBy `form:"sortBy,omitempty" json:"sortBy,omitempty"`

	// Last The number of items to be fetched. Should be used together with `before`
	Last *int `form:"last,omitempty" json:"last,omitempty"`

	// First The number of items to be fetched.
	First *int `form:"first,omitempty" json:"first,omitempty"`

	// After The cursor after which you want to get the next page of items. Should be used together with `first`
	After *string `form:"after,omitempty" json:"after,omitempty"`

	// Before The cursor before which the previous page of items will be fetched. Should be used together with `last`
	Before *string `form:"before,omitempty" json:"before,omitempty"`
}

// GetV1CollectionsCollectionIdParamsSortBy defines parameters for GetV1CollectionsCollectionId.
type GetV1CollectionsCollectionIdParamsSortBy string

// PostV1CollectionsCollectionIdJSONBody defines parameters for PostV1CollectionsCollectionId.
type PostV1CollectionsCollectionIdJSONBody struct {
	// Name The new name of the collection to be updated.
	Name string `json:"name"`
}

// PostV1CollectionsCollectionIdBookmarksJSONBody defines parameters for PostV1CollectionsCollectionIdBookmarks.
type PostV1CollectionsCollectionIdBookmarksJSONBody struct {
	union json.RawMessage
}

// PostV1CollectionsCollectionIdBookmarksJSONBody0 defines parameters for PostV1CollectionsCollectionIdBookmarks.
type PostV1CollectionsCollectionIdBookmarksJSONBody0 struct {
	// Key The Surah number.
	Key int `json:"key"`

	// Mushaf The id of the Mushaf being used.
	//
	// 1 = QCFV2
	//
	//   2 = QCFV1
	//
	//   3 = Indopak
	//
	//   4 = UthmaniHafs
	//
	//   5 = KFGQPCHAFS
	//
	//   6 = Indopak15Lines
	//
	//   7 = Indopak16Lines
	//
	//   11 = Tajweeed
	//
	//   19 = QCFTajweedV4
	Mushaf PostV1CollectionsCollectionIdBookmarksJSONBody0Mushaf `json:"mushaf"`

	// Type The bookmark type.
	Type        *PostV1CollectionsCollectionIdBookmarksJSONBody0Type `json:"type,omitempty"`
	VerseNumber int                                                  `json:"verseNumber"`
}

// PostV1CollectionsCollectionIdBookmarksJSONBody0Mushaf defines parameters for PostV1CollectionsCollectionIdBookmarks.
type PostV1CollectionsCollectionIdBookmarksJSONBody0Mushaf int

// PostV1CollectionsCollectionIdBookmarksJSONBody0Type defines parameters for PostV1CollectionsCollectionIdBookmarks.
type PostV1CollectionsCollectionIdBookmarksJSONBody0Type string

// PostV1CollectionsCollectionIdBookmarksJSONBody1 defines parameters for PostV1CollectionsCollectionIdBookmarks.
type PostV1CollectionsCollectionIdBookmarksJSONBody1 struct {
	// Key Surah, Juz or page number.
	Key int `json:"key"`

	// Mushaf The id of the Mushaf being used.
	//
	// 1 = QCFV2
	//
	//   2 = QCFV1
	//
	//   3 = Indopak
	//
	//   4 = UthmaniHafs
	//
	//   5 = KFGQPCHAFS
	//
	//   6 = Indopak15Lines
	//
	//   7 = Indopak16Lines
	//
	//   11 = Tajweeed
	//
	//   19 = QCFTajweedV4
	Mushaf PostV1CollectionsCollectionIdBookmarksJSONBody1Mushaf `json:"mushaf"`

	// Type The bookmark type.
	Type *PostV1CollectionsCollectionIdBookmarksJSONBody1Type `json:"type,omitempty"`
}

// PostV1CollectionsCollectionIdBookmarksJSONBody1Mushaf defines parameters for PostV1CollectionsCollectionIdBookmarks.
type PostV1CollectionsCollectionIdBookmarksJSONBody1Mushaf int

// PostV1CollectionsCollectionIdBookmarksJSONBody1Type defines parameters for PostV1CollectionsCollectionIdBookmarks.
type PostV1CollectionsCollectionIdBookmarksJSONBody1Type string

// PostV1CommentsJSONBody defines parameters for PostV1Comments.
type PostV1CommentsJSONBody struct {
	union json.RawMessage
}

// PostV1CommentsJSONBody0 defines parameters for PostV1Comments.
type PostV1CommentsJSONBody0 struct {
	// Body The body of the comment.
	Body string `json:"body"`

	// IsPrivate Whether the comment should be publicly viewed or not.
	IsPrivate *bool `json:"isPrivate,omitempty"`

	// PostId The ID of the post the comment will be added to.
	PostId int `json:"postId"`
}

// PutV1CommentsCommentIdJSONBody defines parameters for PutV1CommentsCommentId.
type PutV1CommentsCommentIdJSONBody struct {
	// Body The updated body of the comment.
	Body string `json:"body"`
}

// PostV1GoalsJSONBody defines parameters for PostV1Goals.
type PostV1GoalsJSONBody struct {
	// Amount The amount of the goal. Depending on the goal type, the amount value and format will be different
	Amount PostV1GoalsJSONBody_Amount `json:"amount"`

	// Category The category of the goal
	Category PostV1GoalsJSONBodyCategory `json:"category"`

	// Duration The duration of the goal in days. If it's empty it means the goal is a daily goal and not duration-based.
	Duration *int `json:"duration,omitempty"`

	// Type The type of the goal.
	Type PostV1GoalsJSONBodyType `json:"type"`
}

// PostV1GoalsParams defines parameters for PostV1Goals.
type PostV1GoalsParams struct {
	// MushafId The id of the Mushaf being used.
	//
	// 1 = QCFV2
	//
	//   2 = QCFV1
	//
	//   3 = Indopak
	//
	//   4 = UthmaniHafs
	//
	//   5 = KFGQPCHAFS
	//
	//   6 = Indopak15Lines
	//
	//   7 = Indopak16Lines
	//
	//   11 = Tajweeed
	//
	//   19 = QCFTajweedV4
	MushafId PostV1GoalsParamsMushafId `form:"mushafId" json:"mushafId"`

	// XTimezone The current timezone of the user. Not providing the value might affect the accuracy of how we calculate days and streaks.
	XTimezone *string `json:"x-timezone,omitempty"`
}

// PostV1GoalsParamsMushafId defines parameters for PostV1Goals.
type PostV1GoalsParamsMushafId int

// PostV1GoalsJSONBodyAmount0 defines parameters for PostV1Goals.
type PostV1GoalsJSONBodyAmount0 = string

// PostV1GoalsJSONBodyAmount1 defines parameters for PostV1Goals.
type PostV1GoalsJSONBodyAmount1 = int

// PostV1GoalsJSONBody_Amount defines parameters for PostV1Goals.
type PostV1GoalsJSONBody_Amount struct {
	union json.RawMessage
}

// PostV1GoalsJSONBodyCategory defines parameters for PostV1Goals.
type PostV1GoalsJSONBodyCategory string

// PostV1GoalsJSONBodyType defines parameters for PostV1Goals.
type PostV1GoalsJSONBodyType string

// GetV1GoalsEstimateParams defines parameters for GetV1GoalsEstimate.
type GetV1GoalsEstimateParams struct {
	// Type The type of the goal.
	Type GetV1GoalsEstimateParamsType `form:"type" json:"type"`

	// Amount The amount of the goal. Depending on the goal type, the amount value and format will be different
	Amount struct {
		union json.RawMessage
	} `form:"amount" json:"amount"`

	// Duration The duration of the goal in days. If it's empty it means the goal is a daily goal and not duration-based.
	Duration *int `form:"duration,omitempty" json:"duration,omitempty"`

	// MushafId The id of the Mushaf being used.
	//
	// 1 = QCFV2
	//
	//   2 = QCFV1
	//
	//   3 = Indopak
	//
	//   4 = UthmaniHafs
	//
	//   5 = KFGQPCHAFS
	//
	//   6 = Indopak15Lines
	//
	//   7 = Indopak16Lines
	//
	//   11 = Tajweeed
	//
	//   19 = QCFTajweedV4
	MushafId GetV1GoalsEstimateParamsMushafId `form:"mushafId" json:"mushafId"`

	// XTimezone The current timezone of the user. Not providing the value might affect the accuracy of how we calculate days and streaks.
	XTimezone *string `json:"x-timezone,omitempty"`
}

// GetV1GoalsEstimateParamsType defines parameters for GetV1GoalsEstimate.
type GetV1GoalsEstimateParamsType string

// GetV1GoalsEstimateParamsAmount0 defines parameters for GetV1GoalsEstimate.
type GetV1GoalsEstimateParamsAmount0 = string

// GetV1GoalsEstimateParamsAmount1 defines parameters for GetV1GoalsEstimate.
type GetV1GoalsEstimateParamsAmount1 = int

// GetV1GoalsEstimateParamsMushafId defines parameters for GetV1GoalsEstimate.
type GetV1GoalsEstimateParamsMushafId int

// GetV1GoalsGetTodaysPlanParams defines parameters for GetV1GoalsGetTodaysPlan.
type GetV1GoalsGetTodaysPlanParams struct {
	// Type The type of the goal.
	Type GetV1GoalsGetTodaysPlanParamsType `form:"type" json:"type"`

	// XTimezone The current timezone of the user. Not providing the value might affect the accuracy of how we calculate days and streaks.
	XTimezone *string `json:"x-timezone,omitempty"`
}

// GetV1GoalsGetTodaysPlanParamsType defines parameters for GetV1GoalsGetTodaysPlan.
type GetV1GoalsGetTodaysPlanParamsType string

// DeleteV1GoalsIdParams defines parameters for DeleteV1GoalsId.
type DeleteV1GoalsIdParams struct {
	// Category The category of the goal
	Category DeleteV1GoalsIdParamsCategory `form:"category" json:"category"`

	// XTimezone The current timezone of the user. Not providing the value might affect the accuracy of how we calculate days and streaks.
	XTimezone *string `json:"x-timezone,omitempty"`
}

// DeleteV1GoalsIdParamsCategory defines parameters for DeleteV1GoalsId.
type DeleteV1GoalsIdParamsCategory string

// PutV1GoalsIdJSONBody defines parameters for PutV1GoalsId.
type PutV1GoalsIdJSONBody struct {
	// Amount The amount of the goal. Depending on the goal type, the amount value and format will be different
	Amount *PutV1GoalsIdJSONBody_Amount `json:"amount,omitempty"`

	// Category The category of the goal
	Category *PutV1GoalsIdJSONBodyCategory `json:"category,omitempty"`

	// Duration The duration of the goal in days. If it's empty it means the goal is a daily goal and not duration-based.
	Duration *int `json:"duration,omitempty"`

	// Type The type of the goal.
	Type *PutV1GoalsIdJSONBodyType `json:"type,omitempty"`
}

// PutV1GoalsIdParams defines parameters for PutV1GoalsId.
type PutV1GoalsIdParams struct {
	// MushafId The id of the Mushaf being used.
	//
	// 1 = QCFV2
	//
	//   2 = QCFV1
	//
	//   3 = Indopak
	//
	//   4 = UthmaniHafs
	//
	//   5 = KFGQPCHAFS
	//
	//   6 = Indopak15Lines
	//
	//   7 = Indopak16Lines
	//
	//   11 = Tajweeed
	//
	//   19 = QCFTajweedV4
	MushafId PutV1GoalsIdParamsMushafId `form:"mushafId" json:"mushafId"`

	// XTimezone The current timezone of the user. Not providing the value might affect the accuracy of how we calculate days and streaks.
	XTimezone *string `json:"x-timezone,omitempty"`
}

// PutV1GoalsIdParamsMushafId defines parameters for PutV1GoalsId.
type PutV1GoalsIdParamsMushafId int

// PutV1GoalsIdJSONBodyAmount0 defines parameters for PutV1GoalsId.
type PutV1GoalsIdJSONBodyAmount0 = string

// PutV1GoalsIdJSONBodyAmount1 defines parameters for PutV1GoalsId.
type PutV1GoalsIdJSONBodyAmount1 = int

// PutV1GoalsIdJSONBody_Amount defines parameters for PutV1GoalsId.
type PutV1GoalsIdJSONBody_Amount struct {
	union json.RawMessage
}

// PutV1GoalsIdJSONBodyCategory defines parameters for PutV1GoalsId.
type PutV1GoalsIdJSONBodyCategory string

// PutV1GoalsIdJSONBodyType defines parameters for PutV1GoalsId.
type PutV1GoalsIdJSONBodyType string

// PutV1GroupsGroupIdAssignAsAdminJSONBody defines parameters for PutV1GroupsGroupIdAssignAsAdmin.
type PutV1GroupsGroupIdAssignAsAdminJSONBody struct {
	// UserId The ID of the user being assigned as an admin.
	UserId int `json:"userId"`
}

// PutV1GroupsGroupIdInviteUserJSONBody defines parameters for PutV1GroupsGroupIdInviteUser.
type PutV1GroupsGroupIdInviteUserJSONBody struct {
	// Email The email of the user being invited to group.
	Email *string `json:"email,omitempty"`

	// UserId The ID of the user being invited to group.
	UserId *int `json:"userId,omitempty"`
}

// PutV1GroupsGroupIdRemoveUserJSONBody defines parameters for PutV1GroupsGroupIdRemoveUser.
type PutV1GroupsGroupIdRemoveUserJSONBody struct {
	// UserId The ID of the user being removed from group.
	UserId int `json:"userId"`
}

// GetV1NotesParams defines parameters for GetV1Notes.
type GetV1NotesParams struct {
	// Cursor A cursor for pagination, used to fetch the next set of results.
	Cursor *string `form:"cursor,omitempty" json:"cursor,omitempty"`

	// Limit The maximum number of notes to return, defaults to 20.
	Limit *float32 `form:"limit,omitempty" json:"limit,omitempty"`

	// SortBy The sorting order of the notes, defaults to newest first.
	SortBy *GetV1NotesParamsSortBy `form:"sortBy,omitempty" json:"sortBy,omitempty"`
}

// GetV1NotesParamsSortBy defines parameters for GetV1Notes.
type GetV1NotesParamsSortBy string

// PostV1NotesJSONBody defines parameters for PostV1Notes.
type PostV1NotesJSONBody struct {
	AttachedEntity *struct {
		// EntityId The unique identifier for the attached entity.
		EntityId string `json:"entityId"`

		// EntityMetadata Additional metadata for the attached entity.
		EntityMetadata *map[string]interface{} `json:"entityMetadata,omitempty"`

		// EntityType The type of the attached entity, must be one of the predefined NoteEntityType values.
		EntityType PostV1NotesJSONBodyAttachedEntityEntityType `json:"entityType"`
	} `json:"attachedEntity,omitempty"`

	// Body The main content of the note, must be between the specified minimum and maximum length.
	Body string `json:"body"`

	// Ranges An array of verse ranges associated with the note.
	Ranges *[]string `json:"ranges,omitempty"`

	// SaveToQR Indicates whether the note should be saved to the QuranReflect.
	SaveToQR bool `json:"saveToQR"`
}

// PostV1NotesJSONBodyAttachedEntityEntityType defines parameters for PostV1Notes.
type PostV1NotesJSONBodyAttachedEntityEntityType string

// GetV1NotesByAttachedEntityParams defines parameters for GetV1NotesByAttachedEntity.
type GetV1NotesByAttachedEntityParams struct {
	// EntityId The unique identifier for the attached entity.
	EntityId string `form:"entityId" json:"entityId"`

	// EntityType The type of the attached entity, must be one of the predefined NoteEntityType values.
	EntityType GetV1NotesByAttachedEntityParamsEntityType `form:"entityType" json:"entityType"`
}

// GetV1NotesByAttachedEntityParamsEntityType defines parameters for GetV1NotesByAttachedEntity.
type GetV1NotesByAttachedEntityParamsEntityType string

// GetV1NotesByRangeParams defines parameters for GetV1NotesByRange.
type GetV1NotesByRangeParams struct {
	// From The starting verse key of the range.
	From string `form:"from" json:"from"`

	// To The ending verse key of the range.
	To string `form:"to" json:"to"`
}

// GetV1NotesCountWithinRangeParams defines parameters for GetV1NotesCountWithinRange.
type GetV1NotesCountWithinRangeParams struct {
	// From The starting verse key of the range.
	From string `form:"from" json:"from"`

	// To The ending verse key of the range.
	To string `form:"to" json:"to"`
}

// GetV1NotesNoteIdParams defines parameters for GetV1NotesNoteId.
type GetV1NotesNoteIdParams struct {
	// WithAttachedEntities Specifies whether to include attached entities in the response, defaults to true.
	WithAttachedEntities *bool `form:"withAttachedEntities,omitempty" json:"withAttachedEntities,omitempty"`
}

// PatchV1NotesNoteIdJSONBody defines parameters for PatchV1NotesNoteId.
type PatchV1NotesNoteIdJSONBody struct {
	// Body The main content of the note, must be between the specified minimum and maximum length.
	Body string `json:"body"`

	// SaveToQR Indicates whether the updated note should be saved to the QuranReflect, defaults to false.
	SaveToQR *bool `json:"saveToQR,omitempty"`
}

// PostV1NotesNoteIdPublishJSONBody defines parameters for PostV1NotesNoteIdPublish.
type PostV1NotesNoteIdPublishJSONBody struct {
	// Body The main content of the note, must be between the specified minimum and maximum length.
	Body string `json:"body"`

	// Ranges An array of verse ranges associated with the note.
	Ranges *[]string `json:"ranges,omitempty"`
}

// GetV1PostsParams defines parameters for GetV1Posts.
type GetV1PostsParams struct {
	// ExactAyah Get posts of an exact Ayah only and not of range of Ayahs (the default behavior).
	ExactAyah *bool `form:"exactAyah,omitempty" json:"exactAyah,omitempty"`

	// Languages Comma-separated language iso codes, to fetch posts in a specific language(s).
	Languages *string `form:"languages,omitempty" json:"languages,omitempty"`

	// ScholarsPosts Include posts of scholars
	ScholarsPosts *bool `form:"scholarsPosts,omitempty" json:"scholarsPosts,omitempty"`

	// AuthorIds The Ids of the authors of the posts
	AuthorIds *[]int `form:"authorIds,omitempty" json:"authorIds,omitempty"`

	// StudentsOfKnowledgePosts Include posts of students of knowledge
	StudentsOfKnowledgePosts *bool `form:"studentsOfKnowledgePosts,omitempty" json:"studentsOfKnowledgePosts,omitempty"`

	// Verified Include verified posts
	Verified *bool `form:"verified,omitempty" json:"verified,omitempty"`

	// Approved Include approved posts
	Approved *bool `form:"approved,omitempty" json:"approved,omitempty"`

	// UpdatedSince Get posts that are updated after the given date (inclusive).
	UpdatedSince *string `form:"updatedSince,omitempty" json:"updatedSince,omitempty"`

	// Filters Further customize the results, you can fetch posts of specific members, post that have specific tags, post for specific surah, ayah range or single ayah etc.
	Filters *struct {
		// PostTypeIds The Ids of the types the post is attached to
		PostTypeIds *[]int `json:"postTypeIds,omitempty"`

		// References The Surahs/Ayahs the post relates to.
		References *[]PostReference `json:"references,omitempty"`

		// ReferencesOperation **`OR`** = Will get posts that match **any** of the passed filters
		//
		//   **`AND`** = Will get posts that match **all** of the passed filters
		ReferencesOperation *GetV1PostsParamsFiltersReferencesOperation `json:"referencesOperation,omitempty"`

		// TagIds The Ids of the tags the post is attached to
		TagIds *[]int `json:"tagIds,omitempty"`

		// TagsOperation **`OR`** = Will get posts that match **any** of the passed filters
		//
		//   **`AND`** = Will get posts that match **all** of the passed filters
		TagsOperation *GetV1PostsParamsFiltersTagsOperation `json:"tagsOperation,omitempty"`
	} `form:"filters,omitempty" json:"filters,omitempty"`

	// Tab **`newest`** = Recent posts will be at the top.
	//
	//   **`following`** = Get posts of authors the current user is following.
	//
	//   **`draft`** = Get current user's private posts.
	//
	//   **`favorite`** = Get current user's favorite posts.
	//
	//   **`most_popular`** = Get most popular posts.
	//
	//   **`only_room_members`** = Get posts that are posted by current room members.
	//
	//   **`public`** = Include public posts of private rooms.
	//
	//   **`feed`** = When passed, this will ignore most passed filters and send `verified` posts (if `verified` = `true`), posts by scholars and student of knowledge, verified posts, posts from author the user is following.
	Tab *GetV1PostsParamsTab `form:"tab,omitempty" json:"tab,omitempty"`

	// Feed Include only trusted posts and posts by author the user is following.
	Feed *bool `form:"feed,omitempty" json:"feed,omitempty"`

	// Page The current post page. Each page will have 25 posts by default. `pages` response field will have the total number of pages.
	Page *int `form:"page,omitempty" json:"page,omitempty"`
}

// GetV1PostsParamsFiltersReferencesOperation defines parameters for GetV1Posts.
type GetV1PostsParamsFiltersReferencesOperation string

// GetV1PostsParamsFiltersTagsOperation defines parameters for GetV1Posts.
type GetV1PostsParamsFiltersTagsOperation string

// GetV1PostsParamsTab defines parameters for GetV1Posts.
type GetV1PostsParamsTab string

// PostV1PostsJSONBody defines parameters for PostV1Posts.
type PostV1PostsJSONBody struct {
	union json.RawMessage
}

// PostV1PostsJSONBody0 defines parameters for PostV1Posts.
type PostV1PostsJSONBody0 struct {
	// Body The body of the post.
	Body string `json:"body"`

	// IsPrivate Whether the post should be posted as a private note.
	IsPrivate *bool `json:"isPrivate,omitempty"`

	// References The Surahs/Ayahs the post relates to.
	References *[]PostReference `json:"references,omitempty"`

	// RoomId The Id of the room the post will be posted in.
	RoomId *int `json:"roomId,omitempty"`

	// TagIds The Ids of the tags the post is attached to
	TagIds *[]int `json:"tagIds,omitempty"`
}

// PostV1PostsReportPostIdJSONBody defines parameters for PostV1PostsReportPostId.
type PostV1PostsReportPostIdJSONBody struct {
	// Abuse The report abuse type
	Abuse PostV1PostsReportPostIdJSONBodyAbuse `json:"abuse"`

	// Comment Report description/details.
	Comment string `json:"comment"`
}

// PostV1PostsReportPostIdJSONBodyAbuse defines parameters for PostV1PostsReportPostId.
type PostV1PostsReportPostIdJSONBodyAbuse string

// PostV1PostsToggleLikePostIdJSONBody defines parameters for PostV1PostsToggleLikePostId.
type PostV1PostsToggleLikePostIdJSONBody = map[string]interface{}

// PostV1PostsToggleSavePostIdJSONBody defines parameters for PostV1PostsToggleSavePostId.
type PostV1PostsToggleSavePostIdJSONBody = map[string]interface{}

// PostV1PostsViewPostIdJSONBody defines parameters for PostV1PostsViewPostId.
type PostV1PostsViewPostIdJSONBody = map[string]interface{}

// PutV1PostsPostIdJSONBody defines parameters for PutV1PostsPostId.
type PutV1PostsPostIdJSONBody struct {
	// Body The body of the post.
	Body string `json:"body"`

	// IsPrivate Whether the post should be posted as a private note.
	IsPrivate *bool `json:"isPrivate,omitempty"`

	// References The Surahs/Ayahs the post relates to. If `references` is not passed with update post API, existing references of the post will be removed.
	References *[]PostReference `json:"references,omitempty"`

	// RoomId The Id of the room the post will be posted in.
	RoomId *int `json:"roomId,omitempty"`

	// TagIds The Ids of the tags the post is attached to
	TagIds *[]int `json:"tagIds,omitempty"`
}

// PostV1PreferencesJSONBody defines parameters for PostV1Preferences.
type PostV1PreferencesJSONBody struct {
	// Group The preference group to be added or updated.
	Group PostV1PreferencesJSONBodyGroup `json:"group"`

	// Key The preference key to be added or updated.
	Key string `json:"key"`

	// Value The preference value to be added or updated.
	Value interface{} `json:"value"`
	union json.RawMessage
}

// PostV1PreferencesParams defines parameters for PostV1Preferences.
type PostV1PreferencesParams struct {
	// MushafId The id of the Mushaf being used.
	//
	// 1 = QCFV2
	//
	//   2 = QCFV1
	//
	//   3 = Indopak
	//
	//   4 = UthmaniHafs
	//
	//   5 = KFGQPCHAFS
	//
	//   6 = Indopak15Lines
	//
	//   7 = Indopak16Lines
	//
	//   11 = Tajweeed
	//
	//   19 = QCFTajweedV4
	MushafId PostV1PreferencesParamsMushafId `form:"mushafId" json:"mushafId"`
}

// PostV1PreferencesParamsMushafId defines parameters for PostV1Preferences.
type PostV1PreferencesParamsMushafId int

// PostV1PreferencesJSONBodyGroup defines parameters for PostV1Preferences.
type PostV1PreferencesJSONBodyGroup string

// PostV1PreferencesJSONBody0 defines parameters for PostV1Preferences.
type PostV1PreferencesJSONBody0 struct {
	Key *PostV1PreferencesJSONBody0Key `json:"key,omitempty"`
}

// PostV1PreferencesJSONBody0Key defines parameters for PostV1Preferences.
type PostV1PreferencesJSONBody0Key string

// PostV1PreferencesJSONBody1 defines parameters for PostV1Preferences.
type PostV1PreferencesJSONBody1 struct {
	Key *PostV1PreferencesJSONBody1Key `json:"key,omitempty"`
}

// PostV1PreferencesJSONBody1Key defines parameters for PostV1Preferences.
type PostV1PreferencesJSONBody1Key string

// PostV1PreferencesJSONBody2 defines parameters for PostV1Preferences.
type PostV1PreferencesJSONBody2 struct {
	Key *PostV1PreferencesJSONBody2Key `json:"key,omitempty"`
}

// PostV1PreferencesJSONBody2Key defines parameters for PostV1Preferences.
type PostV1PreferencesJSONBody2Key string

// PostV1PreferencesJSONBody3 defines parameters for PostV1Preferences.
type PostV1PreferencesJSONBody3 struct {
	Key *PostV1PreferencesJSONBody3Key `json:"key,omitempty"`
}

// PostV1PreferencesJSONBody3Key defines parameters for PostV1Preferences.
type PostV1PreferencesJSONBody3Key string

// PostV1PreferencesJSONBody4 defines parameters for PostV1Preferences.
type PostV1PreferencesJSONBody4 struct {
	Key *PostV1PreferencesJSONBody4Key `json:"key,omitempty"`
}

// PostV1PreferencesJSONBody4Key defines parameters for PostV1Preferences.
type PostV1PreferencesJSONBody4Key string

// PostV1PreferencesJSONBody5 defines parameters for PostV1Preferences.
type PostV1PreferencesJSONBody5 struct {
	Key *PostV1PreferencesJSONBody5Key `json:"key,omitempty"`
}

// PostV1PreferencesJSONBody5Key defines parameters for PostV1Preferences.
type PostV1PreferencesJSONBody5Key string

// PostV1PreferencesJSONBody6 defines parameters for PostV1Preferences.
type PostV1PreferencesJSONBody6 struct {
	Key *PostV1PreferencesJSONBody6Key `json:"key,omitempty"`
}

// PostV1PreferencesJSONBody6Key defines parameters for PostV1Preferences.
type PostV1PreferencesJSONBody6Key string

// PostV1PreferencesJSONBody7 defines parameters for PostV1Preferences.
type PostV1PreferencesJSONBody7 struct {
	Value *PostV1PreferencesJSONBody7Value `json:"value,omitempty"`
}

// PostV1PreferencesJSONBody7Value defines parameters for PostV1Preferences.
type PostV1PreferencesJSONBody7Value string

// PostV1PreferencesJSONBody8 defines parameters for PostV1Preferences.
type PostV1PreferencesJSONBody8 struct {
	Value *PostV1PreferencesJSONBody8Value `json:"value,omitempty"`
}

// PostV1PreferencesJSONBody8Value defines parameters for PostV1Preferences.
type PostV1PreferencesJSONBody8Value string

// PostV1PreferencesJSONBody9 defines parameters for PostV1Preferences.
type PostV1PreferencesJSONBody9 struct {
	Value PostV1PreferencesJSONBody9Value `json:"value"`
}

// PostV1PreferencesJSONBody9Value defines parameters for PostV1Preferences.
type PostV1PreferencesJSONBody9Value string

// PostV1PreferencesJSONBody10 defines parameters for PostV1Preferences.
type PostV1PreferencesJSONBody10 struct {
	Value PostV1PreferencesJSONBody10Value `json:"value"`
}

// PostV1PreferencesJSONBody10Value defines parameters for PostV1Preferences.
type PostV1PreferencesJSONBody10Value string

// PostV1PreferencesJSONBody11 defines parameters for PostV1Preferences.
type PostV1PreferencesJSONBody11 struct {
	Value PostV1PreferencesJSONBody11Value `json:"value"`
}

// PostV1PreferencesJSONBody11Value defines parameters for PostV1Preferences.
type PostV1PreferencesJSONBody11Value string

// PostV1PreferencesJSONBody12 defines parameters for PostV1Preferences.
type PostV1PreferencesJSONBody12 struct {
	Value *bool `json:"value,omitempty"`
}

// PostV1PreferencesJSONBody13 defines parameters for PostV1Preferences.
type PostV1PreferencesJSONBody13 struct {
	Value []PostV1PreferencesJSONBody13Value `json:"value"`
}

// PostV1PreferencesJSONBody13Value defines parameters for PostV1Preferences.
type PostV1PreferencesJSONBody13Value string

// PostV1PreferencesJSONBody14 defines parameters for PostV1Preferences.
type PostV1PreferencesJSONBody14 struct {
	Value []PostV1PreferencesJSONBody14Value `json:"value"`
}

// PostV1PreferencesJSONBody14Value defines parameters for PostV1Preferences.
type PostV1PreferencesJSONBody14Value string

// PostV1PreferencesJSONBody15 defines parameters for PostV1Preferences.
type PostV1PreferencesJSONBody15 struct {
	Value *PostV1PreferencesJSONBody15Value `json:"value,omitempty"`
}

// PostV1PreferencesJSONBody15Value defines parameters for PostV1Preferences.
type PostV1PreferencesJSONBody15Value string

// PostV1PreferencesJSONBody16 defines parameters for PostV1Preferences.
type PostV1PreferencesJSONBody16 struct {
	Value *PostV1PreferencesJSONBody16Value `json:"value,omitempty"`
}

// PostV1PreferencesJSONBody16Value defines parameters for PostV1Preferences.
type PostV1PreferencesJSONBody16Value string

// PostV1PreferencesJSONBody17 defines parameters for PostV1Preferences.
type PostV1PreferencesJSONBody17 struct {
	Value int `json:"value"`
}

// PostV1PreferencesJSONBody18 defines parameters for PostV1Preferences.
type PostV1PreferencesJSONBody18 struct {
	Value *int `json:"value,omitempty"`
}

// PostV1PreferencesJSONBody19 defines parameters for PostV1Preferences.
type PostV1PreferencesJSONBody19 struct {
	Value *[]int `json:"value,omitempty"`
}

// PostV1PreferencesJSONBody20 defines parameters for PostV1Preferences.
type PostV1PreferencesJSONBody20 struct {
	Value *[]string `json:"value,omitempty"`
}

// PostV1PreferencesJSONBody21 defines parameters for PostV1Preferences.
type PostV1PreferencesJSONBody21 struct {
	Value *PostV1PreferencesJSONBody21Value `json:"value,omitempty"`
}

// PostV1PreferencesJSONBody21Value defines parameters for PostV1Preferences.
type PostV1PreferencesJSONBody21Value int

// PostV1PreferencesBulkParams defines parameters for PostV1PreferencesBulk.
type PostV1PreferencesBulkParams struct {
	// MushafId The id of the Mushaf being used.
	//
	// 1 = QCFV2
	//
	//   2 = QCFV1
	//
	//   3 = Indopak
	//
	//   4 = UthmaniHafs
	//
	//   5 = KFGQPCHAFS
	//
	//   6 = Indopak15Lines
	//
	//   7 = Indopak16Lines
	//
	//   11 = Tajweeed
	//
	//   19 = QCFTajweedV4
	MushafId PostV1PreferencesBulkParamsMushafId `form:"mushafId" json:"mushafId"`
}

// PostV1PreferencesBulkParamsMushafId defines parameters for PostV1PreferencesBulk.
type PostV1PreferencesBulkParamsMushafId int

// GetV1ReadingSessionsParams defines parameters for GetV1ReadingSessions.
type GetV1ReadingSessionsParams struct {
	// Last The number of items to be fetched. Should be used together with `before`
	Last *int `form:"last,omitempty" json:"last,omitempty"`

	// First The number of items to be fetched.
	First *int `form:"first,omitempty" json:"first,omitempty"`

	// After The cursor after which you want to get the next page of items. Should be used together with `first`
	After *string `form:"after,omitempty" json:"after,omitempty"`

	// Before The cursor before which the previous page of items will be fetched. Should be used together with `last`
	Before *string `form:"before,omitempty" json:"before,omitempty"`
}

// PostV1ReadingSessionsJSONBody defines parameters for PostV1ReadingSessions.
type PostV1ReadingSessionsJSONBody struct {
	// ChapterNumber The Surah number to be added to reading session.
	ChapterNumber int `json:"chapterNumber"`

	// VerseNumber The Ayah number to be added to reading session.
	VerseNumber int `json:"verseNumber"`
}

// GetV1StreaksParams defines parameters for GetV1Streaks.
type GetV1StreaksParams struct {
	// From The date after which any streaks would be returned (inclusive)
	From *string `form:"from,omitempty" json:"from,omitempty"`

	// To The date before which any streaks would be returned (inclusive)
	To *string `form:"to,omitempty" json:"to,omitempty"`

	// Type The type of the streak
	Type *GetV1StreaksParamsType `form:"type,omitempty" json:"type,omitempty"`

	// SortOrder The sorting order of `orderBy` field
	SortOrder *GetV1StreaksParamsSortOrder `form:"sortOrder,omitempty" json:"sortOrder,omitempty"`

	// OrderBy Which field to order the streaks by
	OrderBy *GetV1StreaksParamsOrderBy `form:"orderBy,omitempty" json:"orderBy,omitempty"`

	// Status The status of the streak.
	Status *GetV1StreaksParamsStatus `form:"status,omitempty" json:"status,omitempty"`

	// Last The number of items to be fetched. Should be used together with `before`
	Last *int `form:"last,omitempty" json:"last,omitempty"`

	// First The number of items to be fetched.
	First *int `form:"first,omitempty" json:"first,omitempty"`

	// After The cursor after which you want to get the next page of items. Should be used together with `first`
	After *string `form:"after,omitempty" json:"after,omitempty"`

	// Before The cursor before which the previous page of items will be fetched. Should be used together with `last`
	Before *string `form:"before,omitempty" json:"before,omitempty"`
}

// GetV1StreaksParamsType defines parameters for GetV1Streaks.
type GetV1StreaksParamsType string

// GetV1StreaksParamsSortOrder defines parameters for GetV1Streaks.
type GetV1StreaksParamsSortOrder string

// GetV1StreaksParamsOrderBy defines parameters for GetV1Streaks.
type GetV1StreaksParamsOrderBy string

// GetV1StreaksParamsStatus defines parameters for GetV1Streaks.
type GetV1StreaksParamsStatus string

// GetV1StreaksCurrentStreakDaysParams defines parameters for GetV1StreaksCurrentStreakDays.
type GetV1StreaksCurrentStreakDaysParams struct {
	// Type The type of the streak
	Type GetV1StreaksCurrentStreakDaysParamsType `form:"type" json:"type"`

	// XTimezone The current timezone of the user. Not providing the value might affect the accuracy of how we calculate days and streaks.
	XTimezone *string `json:"x-timezone,omitempty"`
}

// GetV1StreaksCurrentStreakDaysParamsType defines parameters for GetV1StreaksCurrentStreakDays.
type GetV1StreaksCurrentStreakDaysParamsType string

// PostV1UsersConfirmationEmailJSONBody defines parameters for PostV1UsersConfirmationEmail.
type PostV1UsersConfirmationEmailJSONBody struct {
	// Email The email to send the confirmation email to.
	Email openapi_types.Email `json:"email"`
}

// PostV1UsersPasswordResetEmailJSONBody defines parameters for PostV1UsersPasswordResetEmail.
type PostV1UsersPasswordResetEmailJSONBody struct {
	// Email The email to send the reset password email to.
	Email openapi_types.Email `json:"email"`
}

// PutV1UsersProfileJSONBody defines parameters for PutV1UsersProfile.
type PutV1UsersProfileJSONBody struct {
	// FirstName The first name of the user.
	FirstName string `json:"firstName"`

	// LastName The last name of the user.
	LastName string `json:"lastName"`
}

// PostV1UsersUsernameRegisterAndroidDeviceJSONBody defines parameters for PostV1UsersUsernameRegisterAndroidDevice.
type PostV1UsersUsernameRegisterAndroidDeviceJSONBody struct {
	// RegistrationId The Android device registration id of the user.
	RegistrationId string `json:"registrationId"`
}

// PostV1UsersUsernameToggleFollowJSONBody defines parameters for PostV1UsersUsernameToggleFollow.
type PostV1UsersUsernameToggleFollowJSONBody = map[string]interface{}

// PostV1ActivityDaysJSONRequestBody defines body for PostV1ActivityDays for application/json ContentType.
type PostV1ActivityDaysJSONRequestBody PostV1ActivityDaysJSONBody

// PostV1BookmarksJSONRequestBody defines body for PostV1Bookmarks for application/json ContentType.
type PostV1BookmarksJSONRequestBody PostV1BookmarksJSONBody

// PostV1CollectionsJSONRequestBody defines body for PostV1Collections for application/json ContentType.
type PostV1CollectionsJSONRequestBody PostV1CollectionsJSONBody

// PostV1CollectionsCollectionIdJSONRequestBody defines body for PostV1CollectionsCollectionId for application/json ContentType.
type PostV1CollectionsCollectionIdJSONRequestBody PostV1CollectionsCollectionIdJSONBody

// PostV1CollectionsCollectionIdBookmarksJSONRequestBody defines body for PostV1CollectionsCollectionIdBookmarks for application/json ContentType.
type PostV1CollectionsCollectionIdBookmarksJSONRequestBody PostV1CollectionsCollectionIdBookmarksJSONBody

// PostV1CommentsJSONRequestBody defines body for PostV1Comments for application/json ContentType.
type PostV1CommentsJSONRequestBody PostV1CommentsJSONBody

// PutV1CommentsCommentIdJSONRequestBody defines body for PutV1CommentsCommentId for application/json ContentType.
type PutV1CommentsCommentIdJSONRequestBody PutV1CommentsCommentIdJSONBody

// PostV1GoalsJSONRequestBody defines body for PostV1Goals for application/json ContentType.
type PostV1GoalsJSONRequestBody PostV1GoalsJSONBody

// PutV1GoalsIdJSONRequestBody defines body for PutV1GoalsId for application/json ContentType.
type PutV1GoalsIdJSONRequestBody PutV1GoalsIdJSONBody

// PutV1GroupsGroupIdAssignAsAdminJSONRequestBody defines body for PutV1GroupsGroupIdAssignAsAdmin for application/json ContentType.
type PutV1GroupsGroupIdAssignAsAdminJSONRequestBody PutV1GroupsGroupIdAssignAsAdminJSONBody

// PutV1GroupsGroupIdInviteUserJSONRequestBody defines body for PutV1GroupsGroupIdInviteUser for application/json ContentType.
type PutV1GroupsGroupIdInviteUserJSONRequestBody PutV1GroupsGroupIdInviteUserJSONBody

// PutV1GroupsGroupIdRemoveUserJSONRequestBody defines body for PutV1GroupsGroupIdRemoveUser for application/json ContentType.
type PutV1GroupsGroupIdRemoveUserJSONRequestBody PutV1GroupsGroupIdRemoveUserJSONBody

// PostV1NotesJSONRequestBody defines body for PostV1Notes for application/json ContentType.
type PostV1NotesJSONRequestBody PostV1NotesJSONBody

// PatchV1NotesNoteIdJSONRequestBody defines body for PatchV1NotesNoteId for application/json ContentType.
type PatchV1NotesNoteIdJSONRequestBody PatchV1NotesNoteIdJSONBody

// PostV1NotesNoteIdPublishJSONRequestBody defines body for PostV1NotesNoteIdPublish for application/json ContentType.
type PostV1NotesNoteIdPublishJSONRequestBody PostV1NotesNoteIdPublishJSONBody

// PostV1PostsJSONRequestBody defines body for PostV1Posts for application/json ContentType.
type PostV1PostsJSONRequestBody PostV1PostsJSONBody

// PostV1PostsReportPostIdJSONRequestBody defines body for PostV1PostsReportPostId for application/json ContentType.
type PostV1PostsReportPostIdJSONRequestBody PostV1PostsReportPostIdJSONBody

// PostV1PostsToggleLikePostIdJSONRequestBody defines body for PostV1PostsToggleLikePostId for application/json ContentType.
type PostV1PostsToggleLikePostIdJSONRequestBody = PostV1PostsToggleLikePostIdJSONBody

// PostV1PostsToggleSavePostIdJSONRequestBody defines body for PostV1PostsToggleSavePostId for application/json ContentType.
type PostV1PostsToggleSavePostIdJSONRequestBody = PostV1PostsToggleSavePostIdJSONBody

// PostV1PostsViewPostIdJSONRequestBody defines body for PostV1PostsViewPostId for application/json ContentType.
type PostV1PostsViewPostIdJSONRequestBody = PostV1PostsViewPostIdJSONBody

// PutV1PostsPostIdJSONRequestBody defines body for PutV1PostsPostId for application/json ContentType.
type PutV1PostsPostIdJSONRequestBody PutV1PostsPostIdJSONBody

// PostV1PreferencesJSONRequestBody defines body for PostV1Preferences for application/json ContentType.
type PostV1PreferencesJSONRequestBody PostV1PreferencesJSONBody

// PostV1PreferencesBulkJSONRequestBody defines body for PostV1PreferencesBulk for application/json ContentType.
type PostV1PreferencesBulkJSONRequestBody = Preference

// PostV1ReadingSessionsJSONRequestBody defines body for PostV1ReadingSessions for application/json ContentType.
type PostV1ReadingSessionsJSONRequestBody PostV1ReadingSessionsJSONBody

// PostV1UsersConfirmationEmailJSONRequestBody defines body for PostV1UsersConfirmationEmail for application/json ContentType.
type PostV1UsersConfirmationEmailJSONRequestBody PostV1UsersConfirmationEmailJSONBody

// PutV1UsersNotificationsSettingIdJSONRequestBody defines body for PutV1UsersNotificationsSettingId for application/json ContentType.
type PutV1UsersNotificationsSettingIdJSONRequestBody = NotificationSettings

// PostV1UsersPasswordResetEmailJSONRequestBody defines body for PostV1UsersPasswordResetEmail for application/json ContentType.
type PostV1UsersPasswordResetEmailJSONRequestBody PostV1UsersPasswordResetEmailJSONBody

// PutV1UsersProfileJSONRequestBody defines body for PutV1UsersProfile for application/json ContentType.
type PutV1UsersProfileJSONRequestBody PutV1UsersProfileJSONBody

// PostV1UsersUsernameRegisterAndroidDeviceJSONRequestBody defines body for PostV1UsersUsernameRegisterAndroidDevice for application/json ContentType.
type PostV1UsersUsernameRegisterAndroidDeviceJSONRequestBody PostV1UsersUsernameRegisterAndroidDeviceJSONBody

// PostV1UsersUsernameToggleFollowJSONRequestBody defines body for PostV1UsersUsernameToggleFollow for application/json ContentType.
type PostV1UsersUsernameToggleFollowJSONRequestBody = PostV1UsersUsernameToggleFollowJSONBody

// AsEstimatedGoalTimelineDayAmount0 returns the union data inside the EstimatedGoalTimelineDay_Amount as a EstimatedGoalTimelineDayAmount0
func (t EstimatedGoalTimelineDay_Amount) AsEstimatedGoalTimelineDayAmount0() (EstimatedGoalTimelineDayAmount0, error) {
	var body EstimatedGoalTimelineDayAmount0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromEstimatedGoalTimelineDayAmount0 overwrites any union data inside the EstimatedGoalTimelineDay_Amount as the provided EstimatedGoalTimelineDayAmount0
func (t *EstimatedGoalTimelineDay_Amount) FromEstimatedGoalTimelineDayAmount0(v EstimatedGoalTimelineDayAmount0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeEstimatedGoalTimelineDayAmount0 performs a merge with any union data inside the EstimatedGoalTimelineDay_Amount, using the provided EstimatedGoalTimelineDayAmount0
func (t *EstimatedGoalTimelineDay_Amount) MergeEstimatedGoalTimelineDayAmount0(v EstimatedGoalTimelineDayAmount0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsEstimatedGoalTimelineDayAmount1 returns the union data inside the EstimatedGoalTimelineDay_Amount as a EstimatedGoalTimelineDayAmount1
func (t EstimatedGoalTimelineDay_Amount) AsEstimatedGoalTimelineDayAmount1() (EstimatedGoalTimelineDayAmount1, error) {
	var body EstimatedGoalTimelineDayAmount1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromEstimatedGoalTimelineDayAmount1 overwrites any union data inside the EstimatedGoalTimelineDay_Amount as the provided EstimatedGoalTimelineDayAmount1
func (t *EstimatedGoalTimelineDay_Amount) FromEstimatedGoalTimelineDayAmount1(v EstimatedGoalTimelineDayAmount1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeEstimatedGoalTimelineDayAmount1 performs a merge with any union data inside the EstimatedGoalTimelineDay_Amount, using the provided EstimatedGoalTimelineDayAmount1
func (t *EstimatedGoalTimelineDay_Amount) MergeEstimatedGoalTimelineDayAmount1(v EstimatedGoalTimelineDayAmount1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t EstimatedGoalTimelineDay_Amount) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *EstimatedGoalTimelineDay_Amount) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// GetV1ActivityDays request
	GetV1ActivityDays(ctx context.Context, params *GetV1ActivityDaysParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostV1ActivityDaysWithBody request with any body
	PostV1ActivityDaysWithBody(ctx context.Context, params *PostV1ActivityDaysParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostV1ActivityDays(ctx context.Context, params *PostV1ActivityDaysParams, body PostV1ActivityDaysJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetV1ActivityDaysEstimateReadingTime request
	GetV1ActivityDaysEstimateReadingTime(ctx context.Context, params *GetV1ActivityDaysEstimateReadingTimeParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetV1Bookmarks request
	GetV1Bookmarks(ctx context.Context, params *GetV1BookmarksParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostV1BookmarksWithBody request with any body
	PostV1BookmarksWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostV1Bookmarks(ctx context.Context, body PostV1BookmarksJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetV1BookmarksAyahsRange request
	GetV1BookmarksAyahsRange(ctx context.Context, params *GetV1BookmarksAyahsRangeParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetV1BookmarksBookmark request
	GetV1BookmarksBookmark(ctx context.Context, params *GetV1BookmarksBookmarkParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetV1BookmarksCollections request
	GetV1BookmarksCollections(ctx context.Context, params *GetV1BookmarksCollectionsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteV1BookmarksBookmarkId request
	DeleteV1BookmarksBookmarkId(ctx context.Context, bookmarkId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetV1Collections request
	GetV1Collections(ctx context.Context, params *GetV1CollectionsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostV1CollectionsWithBody request with any body
	PostV1CollectionsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostV1Collections(ctx context.Context, body PostV1CollectionsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetV1CollectionsAll request
	GetV1CollectionsAll(ctx context.Context, params *GetV1CollectionsAllParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteV1CollectionsCollectionId request
	DeleteV1CollectionsCollectionId(ctx context.Context, collectionId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetV1CollectionsCollectionId request
	GetV1CollectionsCollectionId(ctx context.Context, collectionId string, params *GetV1CollectionsCollectionIdParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostV1CollectionsCollectionIdWithBody request with any body
	PostV1CollectionsCollectionIdWithBody(ctx context.Context, collectionId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostV1CollectionsCollectionId(ctx context.Context, collectionId string, body PostV1CollectionsCollectionIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostV1CollectionsCollectionIdBookmarksWithBody request with any body
	PostV1CollectionsCollectionIdBookmarksWithBody(ctx context.Context, collectionId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostV1CollectionsCollectionIdBookmarks(ctx context.Context, collectionId string, body PostV1CollectionsCollectionIdBookmarksJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteV1CollectionsCollectionIdBookmarksBookmarkId request
	DeleteV1CollectionsCollectionIdBookmarksBookmarkId(ctx context.Context, collectionId string, bookmarkId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostV1CommentsWithBody request with any body
	PostV1CommentsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostV1Comments(ctx context.Context, body PostV1CommentsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteV1CommentsCommentId request
	DeleteV1CommentsCommentId(ctx context.Context, commentId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutV1CommentsCommentIdWithBody request with any body
	PutV1CommentsCommentIdWithBody(ctx context.Context, commentId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutV1CommentsCommentId(ctx context.Context, commentId string, body PutV1CommentsCommentIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostV1GoalsWithBody request with any body
	PostV1GoalsWithBody(ctx context.Context, params *PostV1GoalsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostV1Goals(ctx context.Context, params *PostV1GoalsParams, body PostV1GoalsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetV1GoalsEstimate request
	GetV1GoalsEstimate(ctx context.Context, params *GetV1GoalsEstimateParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetV1GoalsGetTodaysPlan request
	GetV1GoalsGetTodaysPlan(ctx context.Context, params *GetV1GoalsGetTodaysPlanParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteV1GoalsId request
	DeleteV1GoalsId(ctx context.Context, id string, params *DeleteV1GoalsIdParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutV1GoalsIdWithBody request with any body
	PutV1GoalsIdWithBody(ctx context.Context, id string, params *PutV1GoalsIdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutV1GoalsId(ctx context.Context, id string, params *PutV1GoalsIdParams, body PutV1GoalsIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetV1Groups request
	GetV1Groups(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetV1GroupsGroupId request
	GetV1GroupsGroupId(ctx context.Context, groupId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutV1GroupsGroupIdAssignAsAdminWithBody request with any body
	PutV1GroupsGroupIdAssignAsAdminWithBody(ctx context.Context, groupId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutV1GroupsGroupIdAssignAsAdmin(ctx context.Context, groupId string, body PutV1GroupsGroupIdAssignAsAdminJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutV1GroupsGroupIdInviteUserWithBody request with any body
	PutV1GroupsGroupIdInviteUserWithBody(ctx context.Context, groupId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutV1GroupsGroupIdInviteUser(ctx context.Context, groupId string, body PutV1GroupsGroupIdInviteUserJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutV1GroupsGroupIdRemoveUserWithBody request with any body
	PutV1GroupsGroupIdRemoveUserWithBody(ctx context.Context, groupId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutV1GroupsGroupIdRemoveUser(ctx context.Context, groupId string, body PutV1GroupsGroupIdRemoveUserJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetV1Notes request
	GetV1Notes(ctx context.Context, params *GetV1NotesParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostV1NotesWithBody request with any body
	PostV1NotesWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostV1Notes(ctx context.Context, body PostV1NotesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetV1NotesByAttachedEntity request
	GetV1NotesByAttachedEntity(ctx context.Context, params *GetV1NotesByAttachedEntityParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetV1NotesByRange request
	GetV1NotesByRange(ctx context.Context, params *GetV1NotesByRangeParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetV1NotesByVerseVerseKey request
	GetV1NotesByVerseVerseKey(ctx context.Context, verseKey string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetV1NotesCountWithinRange request
	GetV1NotesCountWithinRange(ctx context.Context, params *GetV1NotesCountWithinRangeParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteV1NotesNoteId request
	DeleteV1NotesNoteId(ctx context.Context, noteId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetV1NotesNoteId request
	GetV1NotesNoteId(ctx context.Context, noteId string, params *GetV1NotesNoteIdParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PatchV1NotesNoteIdWithBody request with any body
	PatchV1NotesNoteIdWithBody(ctx context.Context, noteId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PatchV1NotesNoteId(ctx context.Context, noteId string, body PatchV1NotesNoteIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostV1NotesNoteIdPublishWithBody request with any body
	PostV1NotesNoteIdPublishWithBody(ctx context.Context, noteId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostV1NotesNoteIdPublish(ctx context.Context, noteId string, body PostV1NotesNoteIdPublishJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetV1Posts request
	GetV1Posts(ctx context.Context, params *GetV1PostsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostV1PostsWithBody request with any body
	PostV1PostsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostV1Posts(ctx context.Context, body PostV1PostsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostV1PostsReportPostIdWithBody request with any body
	PostV1PostsReportPostIdWithBody(ctx context.Context, postId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostV1PostsReportPostId(ctx context.Context, postId string, body PostV1PostsReportPostIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostV1PostsToggleLikePostIdWithBody request with any body
	PostV1PostsToggleLikePostIdWithBody(ctx context.Context, postId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostV1PostsToggleLikePostId(ctx context.Context, postId string, body PostV1PostsToggleLikePostIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostV1PostsToggleSavePostIdWithBody request with any body
	PostV1PostsToggleSavePostIdWithBody(ctx context.Context, postId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostV1PostsToggleSavePostId(ctx context.Context, postId string, body PostV1PostsToggleSavePostIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostV1PostsViewPostIdWithBody request with any body
	PostV1PostsViewPostIdWithBody(ctx context.Context, postId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostV1PostsViewPostId(ctx context.Context, postId string, body PostV1PostsViewPostIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteV1PostsPostId request
	DeleteV1PostsPostId(ctx context.Context, postId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetV1PostsPostId request
	GetV1PostsPostId(ctx context.Context, postId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutV1PostsPostIdWithBody request with any body
	PutV1PostsPostIdWithBody(ctx context.Context, postId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutV1PostsPostId(ctx context.Context, postId string, body PutV1PostsPostIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetV1PostsPostIdComments request
	GetV1PostsPostIdComments(ctx context.Context, postId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetV1Preferences request
	GetV1Preferences(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostV1PreferencesWithBody request with any body
	PostV1PreferencesWithBody(ctx context.Context, params *PostV1PreferencesParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostV1Preferences(ctx context.Context, params *PostV1PreferencesParams, body PostV1PreferencesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostV1PreferencesBulkWithBody request with any body
	PostV1PreferencesBulkWithBody(ctx context.Context, params *PostV1PreferencesBulkParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostV1PreferencesBulk(ctx context.Context, params *PostV1PreferencesBulkParams, body PostV1PreferencesBulkJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetV1ReadingSessions request
	GetV1ReadingSessions(ctx context.Context, params *GetV1ReadingSessionsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostV1ReadingSessionsWithBody request with any body
	PostV1ReadingSessionsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostV1ReadingSessions(ctx context.Context, body PostV1ReadingSessionsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetV1Streaks request
	GetV1Streaks(ctx context.Context, params *GetV1StreaksParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetV1StreaksCurrentStreakDays request
	GetV1StreaksCurrentStreakDays(ctx context.Context, params *GetV1StreaksCurrentStreakDaysParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostV1UsersConfirmationEmailWithBody request with any body
	PostV1UsersConfirmationEmailWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostV1UsersConfirmationEmail(ctx context.Context, body PostV1UsersConfirmationEmailJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetV1UsersNotifications request
	GetV1UsersNotifications(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutV1UsersNotificationsSettingIdWithBody request with any body
	PutV1UsersNotificationsSettingIdWithBody(ctx context.Context, settingId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutV1UsersNotificationsSettingId(ctx context.Context, settingId string, body PutV1UsersNotificationsSettingIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostV1UsersPasswordResetEmailWithBody request with any body
	PostV1UsersPasswordResetEmailWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostV1UsersPasswordResetEmail(ctx context.Context, body PostV1UsersPasswordResetEmailJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetV1UsersProfile request
	GetV1UsersProfile(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutV1UsersProfileWithBody request with any body
	PutV1UsersProfileWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutV1UsersProfile(ctx context.Context, body PutV1UsersProfileJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostV1UsersUsernameRegisterAndroidDeviceWithBody request with any body
	PostV1UsersUsernameRegisterAndroidDeviceWithBody(ctx context.Context, username string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostV1UsersUsernameRegisterAndroidDevice(ctx context.Context, username string, body PostV1UsersUsernameRegisterAndroidDeviceJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostV1UsersUsernameToggleFollowWithBody request with any body
	PostV1UsersUsernameToggleFollowWithBody(ctx context.Context, username string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostV1UsersUsernameToggleFollow(ctx context.Context, username string, body PostV1UsersUsernameToggleFollowJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) GetV1ActivityDays(ctx context.Context, params *GetV1ActivityDaysParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetV1ActivityDaysRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostV1ActivityDaysWithBody(ctx context.Context, params *PostV1ActivityDaysParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostV1ActivityDaysRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostV1ActivityDays(ctx context.Context, params *PostV1ActivityDaysParams, body PostV1ActivityDaysJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostV1ActivityDaysRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetV1ActivityDaysEstimateReadingTime(ctx context.Context, params *GetV1ActivityDaysEstimateReadingTimeParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetV1ActivityDaysEstimateReadingTimeRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetV1Bookmarks(ctx context.Context, params *GetV1BookmarksParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetV1BookmarksRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostV1BookmarksWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostV1BookmarksRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostV1Bookmarks(ctx context.Context, body PostV1BookmarksJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostV1BookmarksRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetV1BookmarksAyahsRange(ctx context.Context, params *GetV1BookmarksAyahsRangeParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetV1BookmarksAyahsRangeRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetV1BookmarksBookmark(ctx context.Context, params *GetV1BookmarksBookmarkParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetV1BookmarksBookmarkRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetV1BookmarksCollections(ctx context.Context, params *GetV1BookmarksCollectionsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetV1BookmarksCollectionsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteV1BookmarksBookmarkId(ctx context.Context, bookmarkId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteV1BookmarksBookmarkIdRequest(c.Server, bookmarkId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetV1Collections(ctx context.Context, params *GetV1CollectionsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetV1CollectionsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostV1CollectionsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostV1CollectionsRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostV1Collections(ctx context.Context, body PostV1CollectionsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostV1CollectionsRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetV1CollectionsAll(ctx context.Context, params *GetV1CollectionsAllParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetV1CollectionsAllRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteV1CollectionsCollectionId(ctx context.Context, collectionId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteV1CollectionsCollectionIdRequest(c.Server, collectionId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetV1CollectionsCollectionId(ctx context.Context, collectionId string, params *GetV1CollectionsCollectionIdParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetV1CollectionsCollectionIdRequest(c.Server, collectionId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostV1CollectionsCollectionIdWithBody(ctx context.Context, collectionId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostV1CollectionsCollectionIdRequestWithBody(c.Server, collectionId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostV1CollectionsCollectionId(ctx context.Context, collectionId string, body PostV1CollectionsCollectionIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostV1CollectionsCollectionIdRequest(c.Server, collectionId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostV1CollectionsCollectionIdBookmarksWithBody(ctx context.Context, collectionId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostV1CollectionsCollectionIdBookmarksRequestWithBody(c.Server, collectionId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostV1CollectionsCollectionIdBookmarks(ctx context.Context, collectionId string, body PostV1CollectionsCollectionIdBookmarksJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostV1CollectionsCollectionIdBookmarksRequest(c.Server, collectionId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteV1CollectionsCollectionIdBookmarksBookmarkId(ctx context.Context, collectionId string, bookmarkId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteV1CollectionsCollectionIdBookmarksBookmarkIdRequest(c.Server, collectionId, bookmarkId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostV1CommentsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostV1CommentsRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostV1Comments(ctx context.Context, body PostV1CommentsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostV1CommentsRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteV1CommentsCommentId(ctx context.Context, commentId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteV1CommentsCommentIdRequest(c.Server, commentId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutV1CommentsCommentIdWithBody(ctx context.Context, commentId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutV1CommentsCommentIdRequestWithBody(c.Server, commentId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutV1CommentsCommentId(ctx context.Context, commentId string, body PutV1CommentsCommentIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutV1CommentsCommentIdRequest(c.Server, commentId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostV1GoalsWithBody(ctx context.Context, params *PostV1GoalsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostV1GoalsRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostV1Goals(ctx context.Context, params *PostV1GoalsParams, body PostV1GoalsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostV1GoalsRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetV1GoalsEstimate(ctx context.Context, params *GetV1GoalsEstimateParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetV1GoalsEstimateRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetV1GoalsGetTodaysPlan(ctx context.Context, params *GetV1GoalsGetTodaysPlanParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetV1GoalsGetTodaysPlanRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteV1GoalsId(ctx context.Context, id string, params *DeleteV1GoalsIdParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteV1GoalsIdRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutV1GoalsIdWithBody(ctx context.Context, id string, params *PutV1GoalsIdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutV1GoalsIdRequestWithBody(c.Server, id, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutV1GoalsId(ctx context.Context, id string, params *PutV1GoalsIdParams, body PutV1GoalsIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutV1GoalsIdRequest(c.Server, id, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetV1Groups(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetV1GroupsRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetV1GroupsGroupId(ctx context.Context, groupId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetV1GroupsGroupIdRequest(c.Server, groupId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutV1GroupsGroupIdAssignAsAdminWithBody(ctx context.Context, groupId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutV1GroupsGroupIdAssignAsAdminRequestWithBody(c.Server, groupId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutV1GroupsGroupIdAssignAsAdmin(ctx context.Context, groupId string, body PutV1GroupsGroupIdAssignAsAdminJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutV1GroupsGroupIdAssignAsAdminRequest(c.Server, groupId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutV1GroupsGroupIdInviteUserWithBody(ctx context.Context, groupId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutV1GroupsGroupIdInviteUserRequestWithBody(c.Server, groupId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutV1GroupsGroupIdInviteUser(ctx context.Context, groupId string, body PutV1GroupsGroupIdInviteUserJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutV1GroupsGroupIdInviteUserRequest(c.Server, groupId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutV1GroupsGroupIdRemoveUserWithBody(ctx context.Context, groupId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutV1GroupsGroupIdRemoveUserRequestWithBody(c.Server, groupId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutV1GroupsGroupIdRemoveUser(ctx context.Context, groupId string, body PutV1GroupsGroupIdRemoveUserJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutV1GroupsGroupIdRemoveUserRequest(c.Server, groupId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetV1Notes(ctx context.Context, params *GetV1NotesParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetV1NotesRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostV1NotesWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostV1NotesRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostV1Notes(ctx context.Context, body PostV1NotesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostV1NotesRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetV1NotesByAttachedEntity(ctx context.Context, params *GetV1NotesByAttachedEntityParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetV1NotesByAttachedEntityRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetV1NotesByRange(ctx context.Context, params *GetV1NotesByRangeParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetV1NotesByRangeRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetV1NotesByVerseVerseKey(ctx context.Context, verseKey string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetV1NotesByVerseVerseKeyRequest(c.Server, verseKey)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetV1NotesCountWithinRange(ctx context.Context, params *GetV1NotesCountWithinRangeParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetV1NotesCountWithinRangeRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteV1NotesNoteId(ctx context.Context, noteId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteV1NotesNoteIdRequest(c.Server, noteId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetV1NotesNoteId(ctx context.Context, noteId string, params *GetV1NotesNoteIdParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetV1NotesNoteIdRequest(c.Server, noteId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchV1NotesNoteIdWithBody(ctx context.Context, noteId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchV1NotesNoteIdRequestWithBody(c.Server, noteId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchV1NotesNoteId(ctx context.Context, noteId string, body PatchV1NotesNoteIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchV1NotesNoteIdRequest(c.Server, noteId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostV1NotesNoteIdPublishWithBody(ctx context.Context, noteId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostV1NotesNoteIdPublishRequestWithBody(c.Server, noteId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostV1NotesNoteIdPublish(ctx context.Context, noteId string, body PostV1NotesNoteIdPublishJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostV1NotesNoteIdPublishRequest(c.Server, noteId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetV1Posts(ctx context.Context, params *GetV1PostsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetV1PostsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostV1PostsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostV1PostsRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostV1Posts(ctx context.Context, body PostV1PostsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostV1PostsRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostV1PostsReportPostIdWithBody(ctx context.Context, postId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostV1PostsReportPostIdRequestWithBody(c.Server, postId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostV1PostsReportPostId(ctx context.Context, postId string, body PostV1PostsReportPostIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostV1PostsReportPostIdRequest(c.Server, postId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostV1PostsToggleLikePostIdWithBody(ctx context.Context, postId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostV1PostsToggleLikePostIdRequestWithBody(c.Server, postId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostV1PostsToggleLikePostId(ctx context.Context, postId string, body PostV1PostsToggleLikePostIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostV1PostsToggleLikePostIdRequest(c.Server, postId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostV1PostsToggleSavePostIdWithBody(ctx context.Context, postId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostV1PostsToggleSavePostIdRequestWithBody(c.Server, postId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostV1PostsToggleSavePostId(ctx context.Context, postId string, body PostV1PostsToggleSavePostIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostV1PostsToggleSavePostIdRequest(c.Server, postId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostV1PostsViewPostIdWithBody(ctx context.Context, postId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostV1PostsViewPostIdRequestWithBody(c.Server, postId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostV1PostsViewPostId(ctx context.Context, postId string, body PostV1PostsViewPostIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostV1PostsViewPostIdRequest(c.Server, postId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteV1PostsPostId(ctx context.Context, postId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteV1PostsPostIdRequest(c.Server, postId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetV1PostsPostId(ctx context.Context, postId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetV1PostsPostIdRequest(c.Server, postId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutV1PostsPostIdWithBody(ctx context.Context, postId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutV1PostsPostIdRequestWithBody(c.Server, postId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutV1PostsPostId(ctx context.Context, postId string, body PutV1PostsPostIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutV1PostsPostIdRequest(c.Server, postId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetV1PostsPostIdComments(ctx context.Context, postId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetV1PostsPostIdCommentsRequest(c.Server, postId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetV1Preferences(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetV1PreferencesRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostV1PreferencesWithBody(ctx context.Context, params *PostV1PreferencesParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostV1PreferencesRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostV1Preferences(ctx context.Context, params *PostV1PreferencesParams, body PostV1PreferencesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostV1PreferencesRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostV1PreferencesBulkWithBody(ctx context.Context, params *PostV1PreferencesBulkParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostV1PreferencesBulkRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostV1PreferencesBulk(ctx context.Context, params *PostV1PreferencesBulkParams, body PostV1PreferencesBulkJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostV1PreferencesBulkRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetV1ReadingSessions(ctx context.Context, params *GetV1ReadingSessionsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetV1ReadingSessionsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostV1ReadingSessionsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostV1ReadingSessionsRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostV1ReadingSessions(ctx context.Context, body PostV1ReadingSessionsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostV1ReadingSessionsRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetV1Streaks(ctx context.Context, params *GetV1StreaksParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetV1StreaksRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetV1StreaksCurrentStreakDays(ctx context.Context, params *GetV1StreaksCurrentStreakDaysParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetV1StreaksCurrentStreakDaysRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostV1UsersConfirmationEmailWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostV1UsersConfirmationEmailRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostV1UsersConfirmationEmail(ctx context.Context, body PostV1UsersConfirmationEmailJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostV1UsersConfirmationEmailRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetV1UsersNotifications(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetV1UsersNotificationsRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutV1UsersNotificationsSettingIdWithBody(ctx context.Context, settingId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutV1UsersNotificationsSettingIdRequestWithBody(c.Server, settingId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutV1UsersNotificationsSettingId(ctx context.Context, settingId string, body PutV1UsersNotificationsSettingIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutV1UsersNotificationsSettingIdRequest(c.Server, settingId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostV1UsersPasswordResetEmailWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostV1UsersPasswordResetEmailRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostV1UsersPasswordResetEmail(ctx context.Context, body PostV1UsersPasswordResetEmailJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostV1UsersPasswordResetEmailRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetV1UsersProfile(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetV1UsersProfileRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutV1UsersProfileWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutV1UsersProfileRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutV1UsersProfile(ctx context.Context, body PutV1UsersProfileJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutV1UsersProfileRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostV1UsersUsernameRegisterAndroidDeviceWithBody(ctx context.Context, username string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostV1UsersUsernameRegisterAndroidDeviceRequestWithBody(c.Server, username, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostV1UsersUsernameRegisterAndroidDevice(ctx context.Context, username string, body PostV1UsersUsernameRegisterAndroidDeviceJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostV1UsersUsernameRegisterAndroidDeviceRequest(c.Server, username, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostV1UsersUsernameToggleFollowWithBody(ctx context.Context, username string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostV1UsersUsernameToggleFollowRequestWithBody(c.Server, username, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostV1UsersUsernameToggleFollow(ctx context.Context, username string, body PostV1UsersUsernameToggleFollowJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostV1UsersUsernameToggleFollowRequest(c.Server, username, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewGetV1ActivityDaysRequest generates requests for GetV1ActivityDays
func NewGetV1ActivityDaysRequest(server string, params *GetV1ActivityDaysParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/activity-days/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.From != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "from", runtime.ParamLocationQuery, *params.From); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.To != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "to", runtime.ParamLocationQuery, *params.To); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.DateOrderBy != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "dateOrderBy", runtime.ParamLocationQuery, *params.DateOrderBy); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Type != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "type", runtime.ParamLocationQuery, *params.Type); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Last != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "last", runtime.ParamLocationQuery, *params.Last); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.First != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "first", runtime.ParamLocationQuery, *params.First); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.After != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "after", runtime.ParamLocationQuery, *params.After); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Before != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "before", runtime.ParamLocationQuery, *params.Before); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostV1ActivityDaysRequest calls the generic PostV1ActivityDays builder with application/json body
func NewPostV1ActivityDaysRequest(server string, params *PostV1ActivityDaysParams, body PostV1ActivityDaysJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostV1ActivityDaysRequestWithBody(server, params, "application/json", bodyReader)
}

// NewPostV1ActivityDaysRequestWithBody generates requests for PostV1ActivityDays with any type of body
func NewPostV1ActivityDaysRequestWithBody(server string, params *PostV1ActivityDaysParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/activity-days/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params != nil {

		if params.XTimezone != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "x-timezone", runtime.ParamLocationHeader, *params.XTimezone)
			if err != nil {
				return nil, err
			}

			req.Header.Set("x-timezone", headerParam0)
		}

	}

	return req, nil
}

// NewGetV1ActivityDaysEstimateReadingTimeRequest generates requests for GetV1ActivityDaysEstimateReadingTime
func NewGetV1ActivityDaysEstimateReadingTimeRequest(server string, params *GetV1ActivityDaysEstimateReadingTimeParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/activity-days/estimate-reading-time")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "ranges", runtime.ParamLocationQuery, params.Ranges); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetV1BookmarksRequest generates requests for GetV1Bookmarks
func NewGetV1BookmarksRequest(server string, params *GetV1BookmarksParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/bookmarks/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Type != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "type", runtime.ParamLocationQuery, *params.Type); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "mushafId", runtime.ParamLocationQuery, params.MushafId); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.Last != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "last", runtime.ParamLocationQuery, *params.Last); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.First != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "first", runtime.ParamLocationQuery, *params.First); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.After != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "after", runtime.ParamLocationQuery, *params.After); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Before != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "before", runtime.ParamLocationQuery, *params.Before); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostV1BookmarksRequest calls the generic PostV1Bookmarks builder with application/json body
func NewPostV1BookmarksRequest(server string, body PostV1BookmarksJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostV1BookmarksRequestWithBody(server, "application/json", bodyReader)
}

// NewPostV1BookmarksRequestWithBody generates requests for PostV1Bookmarks with any type of body
func NewPostV1BookmarksRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/bookmarks/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetV1BookmarksAyahsRangeRequest generates requests for GetV1BookmarksAyahsRange
func NewGetV1BookmarksAyahsRangeRequest(server string, params *GetV1BookmarksAyahsRangeParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/bookmarks/ayahs-range")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "chapterNumber", runtime.ParamLocationQuery, params.ChapterNumber); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "rangeStartAyahNumber", runtime.ParamLocationQuery, params.RangeStartAyahNumber); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "rangeEndAyahNumber", runtime.ParamLocationQuery, params.RangeEndAyahNumber); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "mushafId", runtime.ParamLocationQuery, params.MushafId); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetV1BookmarksBookmarkRequest generates requests for GetV1BookmarksBookmark
func NewGetV1BookmarksBookmarkRequest(server string, params *GetV1BookmarksBookmarkParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/bookmarks/bookmark")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "key", runtime.ParamLocationQuery, params.Key); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.Type != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "type", runtime.ParamLocationQuery, *params.Type); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.VerseNumber != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "verseNumber", runtime.ParamLocationQuery, *params.VerseNumber); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "mushaf", runtime.ParamLocationQuery, params.Mushaf); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetV1BookmarksCollectionsRequest generates requests for GetV1BookmarksCollections
func NewGetV1BookmarksCollectionsRequest(server string, params *GetV1BookmarksCollectionsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/bookmarks/collections")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "key", runtime.ParamLocationQuery, params.Key); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.Type != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "type", runtime.ParamLocationQuery, *params.Type); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "mushafId", runtime.ParamLocationQuery, params.MushafId); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.Last != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "last", runtime.ParamLocationQuery, *params.Last); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.First != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "first", runtime.ParamLocationQuery, *params.First); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.After != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "after", runtime.ParamLocationQuery, *params.After); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Before != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "before", runtime.ParamLocationQuery, *params.Before); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDeleteV1BookmarksBookmarkIdRequest generates requests for DeleteV1BookmarksBookmarkId
func NewDeleteV1BookmarksBookmarkIdRequest(server string, bookmarkId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "bookmarkId", runtime.ParamLocationPath, bookmarkId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/bookmarks/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetV1CollectionsRequest generates requests for GetV1Collections
func NewGetV1CollectionsRequest(server string, params *GetV1CollectionsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/collections/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.SortBy != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sortBy", runtime.ParamLocationQuery, *params.SortBy); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Last != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "last", runtime.ParamLocationQuery, *params.Last); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.First != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "first", runtime.ParamLocationQuery, *params.First); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.After != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "after", runtime.ParamLocationQuery, *params.After); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Before != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "before", runtime.ParamLocationQuery, *params.Before); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostV1CollectionsRequest calls the generic PostV1Collections builder with application/json body
func NewPostV1CollectionsRequest(server string, body PostV1CollectionsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostV1CollectionsRequestWithBody(server, "application/json", bodyReader)
}

// NewPostV1CollectionsRequestWithBody generates requests for PostV1Collections with any type of body
func NewPostV1CollectionsRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/collections/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetV1CollectionsAllRequest generates requests for GetV1CollectionsAll
func NewGetV1CollectionsAllRequest(server string, params *GetV1CollectionsAllParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/collections/all")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.SortBy != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sortBy", runtime.ParamLocationQuery, *params.SortBy); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Last != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "last", runtime.ParamLocationQuery, *params.Last); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.First != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "first", runtime.ParamLocationQuery, *params.First); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.After != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "after", runtime.ParamLocationQuery, *params.After); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Before != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "before", runtime.ParamLocationQuery, *params.Before); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDeleteV1CollectionsCollectionIdRequest generates requests for DeleteV1CollectionsCollectionId
func NewDeleteV1CollectionsCollectionIdRequest(server string, collectionId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "collectionId", runtime.ParamLocationPath, collectionId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/collections/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetV1CollectionsCollectionIdRequest generates requests for GetV1CollectionsCollectionId
func NewGetV1CollectionsCollectionIdRequest(server string, collectionId string, params *GetV1CollectionsCollectionIdParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "collectionId", runtime.ParamLocationPath, collectionId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/collections/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.SortBy != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sortBy", runtime.ParamLocationQuery, *params.SortBy); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Last != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "last", runtime.ParamLocationQuery, *params.Last); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.First != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "first", runtime.ParamLocationQuery, *params.First); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.After != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "after", runtime.ParamLocationQuery, *params.After); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Before != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "before", runtime.ParamLocationQuery, *params.Before); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostV1CollectionsCollectionIdRequest calls the generic PostV1CollectionsCollectionId builder with application/json body
func NewPostV1CollectionsCollectionIdRequest(server string, collectionId string, body PostV1CollectionsCollectionIdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostV1CollectionsCollectionIdRequestWithBody(server, collectionId, "application/json", bodyReader)
}

// NewPostV1CollectionsCollectionIdRequestWithBody generates requests for PostV1CollectionsCollectionId with any type of body
func NewPostV1CollectionsCollectionIdRequestWithBody(server string, collectionId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "collectionId", runtime.ParamLocationPath, collectionId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/collections/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostV1CollectionsCollectionIdBookmarksRequest calls the generic PostV1CollectionsCollectionIdBookmarks builder with application/json body
func NewPostV1CollectionsCollectionIdBookmarksRequest(server string, collectionId string, body PostV1CollectionsCollectionIdBookmarksJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostV1CollectionsCollectionIdBookmarksRequestWithBody(server, collectionId, "application/json", bodyReader)
}

// NewPostV1CollectionsCollectionIdBookmarksRequestWithBody generates requests for PostV1CollectionsCollectionIdBookmarks with any type of body
func NewPostV1CollectionsCollectionIdBookmarksRequestWithBody(server string, collectionId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "collectionId", runtime.ParamLocationPath, collectionId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/collections/%s/bookmarks", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteV1CollectionsCollectionIdBookmarksBookmarkIdRequest generates requests for DeleteV1CollectionsCollectionIdBookmarksBookmarkId
func NewDeleteV1CollectionsCollectionIdBookmarksBookmarkIdRequest(server string, collectionId string, bookmarkId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "collectionId", runtime.ParamLocationPath, collectionId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "bookmarkId", runtime.ParamLocationPath, bookmarkId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/collections/%s/bookmarks/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostV1CommentsRequest calls the generic PostV1Comments builder with application/json body
func NewPostV1CommentsRequest(server string, body PostV1CommentsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostV1CommentsRequestWithBody(server, "application/json", bodyReader)
}

// NewPostV1CommentsRequestWithBody generates requests for PostV1Comments with any type of body
func NewPostV1CommentsRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/comments/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteV1CommentsCommentIdRequest generates requests for DeleteV1CommentsCommentId
func NewDeleteV1CommentsCommentIdRequest(server string, commentId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "commentId", runtime.ParamLocationPath, commentId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/comments/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutV1CommentsCommentIdRequest calls the generic PutV1CommentsCommentId builder with application/json body
func NewPutV1CommentsCommentIdRequest(server string, commentId string, body PutV1CommentsCommentIdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutV1CommentsCommentIdRequestWithBody(server, commentId, "application/json", bodyReader)
}

// NewPutV1CommentsCommentIdRequestWithBody generates requests for PutV1CommentsCommentId with any type of body
func NewPutV1CommentsCommentIdRequestWithBody(server string, commentId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "commentId", runtime.ParamLocationPath, commentId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/comments/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostV1GoalsRequest calls the generic PostV1Goals builder with application/json body
func NewPostV1GoalsRequest(server string, params *PostV1GoalsParams, body PostV1GoalsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostV1GoalsRequestWithBody(server, params, "application/json", bodyReader)
}

// NewPostV1GoalsRequestWithBody generates requests for PostV1Goals with any type of body
func NewPostV1GoalsRequestWithBody(server string, params *PostV1GoalsParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/goals/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "mushafId", runtime.ParamLocationQuery, params.MushafId); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params != nil {

		if params.XTimezone != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "x-timezone", runtime.ParamLocationHeader, *params.XTimezone)
			if err != nil {
				return nil, err
			}

			req.Header.Set("x-timezone", headerParam0)
		}

	}

	return req, nil
}

// NewGetV1GoalsEstimateRequest generates requests for GetV1GoalsEstimate
func NewGetV1GoalsEstimateRequest(server string, params *GetV1GoalsEstimateParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/goals/estimate")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "type", runtime.ParamLocationQuery, params.Type); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "amount", runtime.ParamLocationQuery, params.Amount); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.Duration != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "duration", runtime.ParamLocationQuery, *params.Duration); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "mushafId", runtime.ParamLocationQuery, params.MushafId); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		if params.XTimezone != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "x-timezone", runtime.ParamLocationHeader, *params.XTimezone)
			if err != nil {
				return nil, err
			}

			req.Header.Set("x-timezone", headerParam0)
		}

	}

	return req, nil
}

// NewGetV1GoalsGetTodaysPlanRequest generates requests for GetV1GoalsGetTodaysPlan
func NewGetV1GoalsGetTodaysPlanRequest(server string, params *GetV1GoalsGetTodaysPlanParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/goals/get-todays-plan")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "type", runtime.ParamLocationQuery, params.Type); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		if params.XTimezone != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "x-timezone", runtime.ParamLocationHeader, *params.XTimezone)
			if err != nil {
				return nil, err
			}

			req.Header.Set("x-timezone", headerParam0)
		}

	}

	return req, nil
}

// NewDeleteV1GoalsIdRequest generates requests for DeleteV1GoalsId
func NewDeleteV1GoalsIdRequest(server string, id string, params *DeleteV1GoalsIdParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/goals/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "category", runtime.ParamLocationQuery, params.Category); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		if params.XTimezone != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "x-timezone", runtime.ParamLocationHeader, *params.XTimezone)
			if err != nil {
				return nil, err
			}

			req.Header.Set("x-timezone", headerParam0)
		}

	}

	return req, nil
}

// NewPutV1GoalsIdRequest calls the generic PutV1GoalsId builder with application/json body
func NewPutV1GoalsIdRequest(server string, id string, params *PutV1GoalsIdParams, body PutV1GoalsIdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutV1GoalsIdRequestWithBody(server, id, params, "application/json", bodyReader)
}

// NewPutV1GoalsIdRequestWithBody generates requests for PutV1GoalsId with any type of body
func NewPutV1GoalsIdRequestWithBody(server string, id string, params *PutV1GoalsIdParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/goals/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "mushafId", runtime.ParamLocationQuery, params.MushafId); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params != nil {

		if params.XTimezone != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "x-timezone", runtime.ParamLocationHeader, *params.XTimezone)
			if err != nil {
				return nil, err
			}

			req.Header.Set("x-timezone", headerParam0)
		}

	}

	return req, nil
}

// NewGetV1GroupsRequest generates requests for GetV1Groups
func NewGetV1GroupsRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/groups/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetV1GroupsGroupIdRequest generates requests for GetV1GroupsGroupId
func NewGetV1GroupsGroupIdRequest(server string, groupId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "groupId", runtime.ParamLocationPath, groupId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/groups/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutV1GroupsGroupIdAssignAsAdminRequest calls the generic PutV1GroupsGroupIdAssignAsAdmin builder with application/json body
func NewPutV1GroupsGroupIdAssignAsAdminRequest(server string, groupId string, body PutV1GroupsGroupIdAssignAsAdminJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutV1GroupsGroupIdAssignAsAdminRequestWithBody(server, groupId, "application/json", bodyReader)
}

// NewPutV1GroupsGroupIdAssignAsAdminRequestWithBody generates requests for PutV1GroupsGroupIdAssignAsAdmin with any type of body
func NewPutV1GroupsGroupIdAssignAsAdminRequestWithBody(server string, groupId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "groupId", runtime.ParamLocationPath, groupId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/groups/%s/assignAsAdmin", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPutV1GroupsGroupIdInviteUserRequest calls the generic PutV1GroupsGroupIdInviteUser builder with application/json body
func NewPutV1GroupsGroupIdInviteUserRequest(server string, groupId string, body PutV1GroupsGroupIdInviteUserJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutV1GroupsGroupIdInviteUserRequestWithBody(server, groupId, "application/json", bodyReader)
}

// NewPutV1GroupsGroupIdInviteUserRequestWithBody generates requests for PutV1GroupsGroupIdInviteUser with any type of body
func NewPutV1GroupsGroupIdInviteUserRequestWithBody(server string, groupId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "groupId", runtime.ParamLocationPath, groupId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/groups/%s/inviteUser", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPutV1GroupsGroupIdRemoveUserRequest calls the generic PutV1GroupsGroupIdRemoveUser builder with application/json body
func NewPutV1GroupsGroupIdRemoveUserRequest(server string, groupId string, body PutV1GroupsGroupIdRemoveUserJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutV1GroupsGroupIdRemoveUserRequestWithBody(server, groupId, "application/json", bodyReader)
}

// NewPutV1GroupsGroupIdRemoveUserRequestWithBody generates requests for PutV1GroupsGroupIdRemoveUser with any type of body
func NewPutV1GroupsGroupIdRemoveUserRequestWithBody(server string, groupId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "groupId", runtime.ParamLocationPath, groupId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/groups/%s/removeUser", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetV1NotesRequest generates requests for GetV1Notes
func NewGetV1NotesRequest(server string, params *GetV1NotesParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/notes/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Cursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "cursor", runtime.ParamLocationQuery, *params.Cursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.SortBy != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sortBy", runtime.ParamLocationQuery, *params.SortBy); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostV1NotesRequest calls the generic PostV1Notes builder with application/json body
func NewPostV1NotesRequest(server string, body PostV1NotesJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostV1NotesRequestWithBody(server, "application/json", bodyReader)
}

// NewPostV1NotesRequestWithBody generates requests for PostV1Notes with any type of body
func NewPostV1NotesRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/notes/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetV1NotesByAttachedEntityRequest generates requests for GetV1NotesByAttachedEntity
func NewGetV1NotesByAttachedEntityRequest(server string, params *GetV1NotesByAttachedEntityParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/notes/by-attached-entity")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "entityId", runtime.ParamLocationQuery, params.EntityId); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "entityType", runtime.ParamLocationQuery, params.EntityType); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetV1NotesByRangeRequest generates requests for GetV1NotesByRange
func NewGetV1NotesByRangeRequest(server string, params *GetV1NotesByRangeParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/notes/by-range")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "from", runtime.ParamLocationQuery, params.From); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "to", runtime.ParamLocationQuery, params.To); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetV1NotesByVerseVerseKeyRequest generates requests for GetV1NotesByVerseVerseKey
func NewGetV1NotesByVerseVerseKeyRequest(server string, verseKey string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "verseKey", runtime.ParamLocationPath, verseKey)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/notes/by-verse/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetV1NotesCountWithinRangeRequest generates requests for GetV1NotesCountWithinRange
func NewGetV1NotesCountWithinRangeRequest(server string, params *GetV1NotesCountWithinRangeParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/notes/count-within-range")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "from", runtime.ParamLocationQuery, params.From); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "to", runtime.ParamLocationQuery, params.To); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDeleteV1NotesNoteIdRequest generates requests for DeleteV1NotesNoteId
func NewDeleteV1NotesNoteIdRequest(server string, noteId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "noteId", runtime.ParamLocationPath, noteId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/notes/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetV1NotesNoteIdRequest generates requests for GetV1NotesNoteId
func NewGetV1NotesNoteIdRequest(server string, noteId string, params *GetV1NotesNoteIdParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "noteId", runtime.ParamLocationPath, noteId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/notes/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.WithAttachedEntities != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "withAttachedEntities", runtime.ParamLocationQuery, *params.WithAttachedEntities); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPatchV1NotesNoteIdRequest calls the generic PatchV1NotesNoteId builder with application/json body
func NewPatchV1NotesNoteIdRequest(server string, noteId string, body PatchV1NotesNoteIdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPatchV1NotesNoteIdRequestWithBody(server, noteId, "application/json", bodyReader)
}

// NewPatchV1NotesNoteIdRequestWithBody generates requests for PatchV1NotesNoteId with any type of body
func NewPatchV1NotesNoteIdRequestWithBody(server string, noteId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "noteId", runtime.ParamLocationPath, noteId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/notes/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostV1NotesNoteIdPublishRequest calls the generic PostV1NotesNoteIdPublish builder with application/json body
func NewPostV1NotesNoteIdPublishRequest(server string, noteId string, body PostV1NotesNoteIdPublishJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostV1NotesNoteIdPublishRequestWithBody(server, noteId, "application/json", bodyReader)
}

// NewPostV1NotesNoteIdPublishRequestWithBody generates requests for PostV1NotesNoteIdPublish with any type of body
func NewPostV1NotesNoteIdPublishRequestWithBody(server string, noteId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "noteId", runtime.ParamLocationPath, noteId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/notes/%s/publish", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetV1PostsRequest generates requests for GetV1Posts
func NewGetV1PostsRequest(server string, params *GetV1PostsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/posts/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.ExactAyah != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "exactAyah", runtime.ParamLocationQuery, *params.ExactAyah); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Languages != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "languages", runtime.ParamLocationQuery, *params.Languages); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ScholarsPosts != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "scholarsPosts", runtime.ParamLocationQuery, *params.ScholarsPosts); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.AuthorIds != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "authorIds", runtime.ParamLocationQuery, *params.AuthorIds); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.StudentsOfKnowledgePosts != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "studentsOfKnowledgePosts", runtime.ParamLocationQuery, *params.StudentsOfKnowledgePosts); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Verified != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "verified", runtime.ParamLocationQuery, *params.Verified); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Approved != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "approved", runtime.ParamLocationQuery, *params.Approved); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.UpdatedSince != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "updatedSince", runtime.ParamLocationQuery, *params.UpdatedSince); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Filters != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filters", runtime.ParamLocationQuery, *params.Filters); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Tab != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "tab", runtime.ParamLocationQuery, *params.Tab); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Feed != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "feed", runtime.ParamLocationQuery, *params.Feed); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostV1PostsRequest calls the generic PostV1Posts builder with application/json body
func NewPostV1PostsRequest(server string, body PostV1PostsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostV1PostsRequestWithBody(server, "application/json", bodyReader)
}

// NewPostV1PostsRequestWithBody generates requests for PostV1Posts with any type of body
func NewPostV1PostsRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/posts/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostV1PostsReportPostIdRequest calls the generic PostV1PostsReportPostId builder with application/json body
func NewPostV1PostsReportPostIdRequest(server string, postId string, body PostV1PostsReportPostIdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostV1PostsReportPostIdRequestWithBody(server, postId, "application/json", bodyReader)
}

// NewPostV1PostsReportPostIdRequestWithBody generates requests for PostV1PostsReportPostId with any type of body
func NewPostV1PostsReportPostIdRequestWithBody(server string, postId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "postId", runtime.ParamLocationPath, postId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/posts/report/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostV1PostsToggleLikePostIdRequest calls the generic PostV1PostsToggleLikePostId builder with application/json body
func NewPostV1PostsToggleLikePostIdRequest(server string, postId string, body PostV1PostsToggleLikePostIdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostV1PostsToggleLikePostIdRequestWithBody(server, postId, "application/json", bodyReader)
}

// NewPostV1PostsToggleLikePostIdRequestWithBody generates requests for PostV1PostsToggleLikePostId with any type of body
func NewPostV1PostsToggleLikePostIdRequestWithBody(server string, postId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "postId", runtime.ParamLocationPath, postId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/posts/toggleLike/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostV1PostsToggleSavePostIdRequest calls the generic PostV1PostsToggleSavePostId builder with application/json body
func NewPostV1PostsToggleSavePostIdRequest(server string, postId string, body PostV1PostsToggleSavePostIdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostV1PostsToggleSavePostIdRequestWithBody(server, postId, "application/json", bodyReader)
}

// NewPostV1PostsToggleSavePostIdRequestWithBody generates requests for PostV1PostsToggleSavePostId with any type of body
func NewPostV1PostsToggleSavePostIdRequestWithBody(server string, postId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "postId", runtime.ParamLocationPath, postId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/posts/toggleSave/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostV1PostsViewPostIdRequest calls the generic PostV1PostsViewPostId builder with application/json body
func NewPostV1PostsViewPostIdRequest(server string, postId string, body PostV1PostsViewPostIdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostV1PostsViewPostIdRequestWithBody(server, postId, "application/json", bodyReader)
}

// NewPostV1PostsViewPostIdRequestWithBody generates requests for PostV1PostsViewPostId with any type of body
func NewPostV1PostsViewPostIdRequestWithBody(server string, postId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "postId", runtime.ParamLocationPath, postId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/posts/view/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteV1PostsPostIdRequest generates requests for DeleteV1PostsPostId
func NewDeleteV1PostsPostIdRequest(server string, postId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "postId", runtime.ParamLocationPath, postId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/posts/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetV1PostsPostIdRequest generates requests for GetV1PostsPostId
func NewGetV1PostsPostIdRequest(server string, postId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "postId", runtime.ParamLocationPath, postId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/posts/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutV1PostsPostIdRequest calls the generic PutV1PostsPostId builder with application/json body
func NewPutV1PostsPostIdRequest(server string, postId string, body PutV1PostsPostIdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutV1PostsPostIdRequestWithBody(server, postId, "application/json", bodyReader)
}

// NewPutV1PostsPostIdRequestWithBody generates requests for PutV1PostsPostId with any type of body
func NewPutV1PostsPostIdRequestWithBody(server string, postId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "postId", runtime.ParamLocationPath, postId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/posts/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetV1PostsPostIdCommentsRequest generates requests for GetV1PostsPostIdComments
func NewGetV1PostsPostIdCommentsRequest(server string, postId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "postId", runtime.ParamLocationPath, postId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/posts/%s/comments", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetV1PreferencesRequest generates requests for GetV1Preferences
func NewGetV1PreferencesRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/preferences/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostV1PreferencesRequest calls the generic PostV1Preferences builder with application/json body
func NewPostV1PreferencesRequest(server string, params *PostV1PreferencesParams, body PostV1PreferencesJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostV1PreferencesRequestWithBody(server, params, "application/json", bodyReader)
}

// NewPostV1PreferencesRequestWithBody generates requests for PostV1Preferences with any type of body
func NewPostV1PreferencesRequestWithBody(server string, params *PostV1PreferencesParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/preferences/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "mushafId", runtime.ParamLocationQuery, params.MushafId); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostV1PreferencesBulkRequest calls the generic PostV1PreferencesBulk builder with application/json body
func NewPostV1PreferencesBulkRequest(server string, params *PostV1PreferencesBulkParams, body PostV1PreferencesBulkJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostV1PreferencesBulkRequestWithBody(server, params, "application/json", bodyReader)
}

// NewPostV1PreferencesBulkRequestWithBody generates requests for PostV1PreferencesBulk with any type of body
func NewPostV1PreferencesBulkRequestWithBody(server string, params *PostV1PreferencesBulkParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/preferences/bulk")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "mushafId", runtime.ParamLocationQuery, params.MushafId); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetV1ReadingSessionsRequest generates requests for GetV1ReadingSessions
func NewGetV1ReadingSessionsRequest(server string, params *GetV1ReadingSessionsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/reading-sessions/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Last != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "last", runtime.ParamLocationQuery, *params.Last); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.First != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "first", runtime.ParamLocationQuery, *params.First); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.After != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "after", runtime.ParamLocationQuery, *params.After); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Before != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "before", runtime.ParamLocationQuery, *params.Before); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostV1ReadingSessionsRequest calls the generic PostV1ReadingSessions builder with application/json body
func NewPostV1ReadingSessionsRequest(server string, body PostV1ReadingSessionsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostV1ReadingSessionsRequestWithBody(server, "application/json", bodyReader)
}

// NewPostV1ReadingSessionsRequestWithBody generates requests for PostV1ReadingSessions with any type of body
func NewPostV1ReadingSessionsRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/reading-sessions/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetV1StreaksRequest generates requests for GetV1Streaks
func NewGetV1StreaksRequest(server string, params *GetV1StreaksParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/streaks/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.From != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "from", runtime.ParamLocationQuery, *params.From); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.To != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "to", runtime.ParamLocationQuery, *params.To); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Type != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "type", runtime.ParamLocationQuery, *params.Type); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.SortOrder != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sortOrder", runtime.ParamLocationQuery, *params.SortOrder); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.OrderBy != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "orderBy", runtime.ParamLocationQuery, *params.OrderBy); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Status != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "status", runtime.ParamLocationQuery, *params.Status); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Last != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "last", runtime.ParamLocationQuery, *params.Last); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.First != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "first", runtime.ParamLocationQuery, *params.First); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.After != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "after", runtime.ParamLocationQuery, *params.After); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Before != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "before", runtime.ParamLocationQuery, *params.Before); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetV1StreaksCurrentStreakDaysRequest generates requests for GetV1StreaksCurrentStreakDays
func NewGetV1StreaksCurrentStreakDaysRequest(server string, params *GetV1StreaksCurrentStreakDaysParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/streaks/current-streak-days")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "type", runtime.ParamLocationQuery, params.Type); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		if params.XTimezone != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "x-timezone", runtime.ParamLocationHeader, *params.XTimezone)
			if err != nil {
				return nil, err
			}

			req.Header.Set("x-timezone", headerParam0)
		}

	}

	return req, nil
}

// NewPostV1UsersConfirmationEmailRequest calls the generic PostV1UsersConfirmationEmail builder with application/json body
func NewPostV1UsersConfirmationEmailRequest(server string, body PostV1UsersConfirmationEmailJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostV1UsersConfirmationEmailRequestWithBody(server, "application/json", bodyReader)
}

// NewPostV1UsersConfirmationEmailRequestWithBody generates requests for PostV1UsersConfirmationEmail with any type of body
func NewPostV1UsersConfirmationEmailRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/users/confirmationEmail")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetV1UsersNotificationsRequest generates requests for GetV1UsersNotifications
func NewGetV1UsersNotificationsRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/users/notifications")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutV1UsersNotificationsSettingIdRequest calls the generic PutV1UsersNotificationsSettingId builder with application/json body
func NewPutV1UsersNotificationsSettingIdRequest(server string, settingId string, body PutV1UsersNotificationsSettingIdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutV1UsersNotificationsSettingIdRequestWithBody(server, settingId, "application/json", bodyReader)
}

// NewPutV1UsersNotificationsSettingIdRequestWithBody generates requests for PutV1UsersNotificationsSettingId with any type of body
func NewPutV1UsersNotificationsSettingIdRequestWithBody(server string, settingId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "settingId", runtime.ParamLocationPath, settingId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/users/notifications/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostV1UsersPasswordResetEmailRequest calls the generic PostV1UsersPasswordResetEmail builder with application/json body
func NewPostV1UsersPasswordResetEmailRequest(server string, body PostV1UsersPasswordResetEmailJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostV1UsersPasswordResetEmailRequestWithBody(server, "application/json", bodyReader)
}

// NewPostV1UsersPasswordResetEmailRequestWithBody generates requests for PostV1UsersPasswordResetEmail with any type of body
func NewPostV1UsersPasswordResetEmailRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/users/passwordResetEmail")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetV1UsersProfileRequest generates requests for GetV1UsersProfile
func NewGetV1UsersProfileRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/users/profile")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutV1UsersProfileRequest calls the generic PutV1UsersProfile builder with application/json body
func NewPutV1UsersProfileRequest(server string, body PutV1UsersProfileJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutV1UsersProfileRequestWithBody(server, "application/json", bodyReader)
}

// NewPutV1UsersProfileRequestWithBody generates requests for PutV1UsersProfile with any type of body
func NewPutV1UsersProfileRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/users/profile")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostV1UsersUsernameRegisterAndroidDeviceRequest calls the generic PostV1UsersUsernameRegisterAndroidDevice builder with application/json body
func NewPostV1UsersUsernameRegisterAndroidDeviceRequest(server string, username string, body PostV1UsersUsernameRegisterAndroidDeviceJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostV1UsersUsernameRegisterAndroidDeviceRequestWithBody(server, username, "application/json", bodyReader)
}

// NewPostV1UsersUsernameRegisterAndroidDeviceRequestWithBody generates requests for PostV1UsersUsernameRegisterAndroidDevice with any type of body
func NewPostV1UsersUsernameRegisterAndroidDeviceRequestWithBody(server string, username string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "username", runtime.ParamLocationPath, username)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/users/%s/registerAndroidDevice", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostV1UsersUsernameToggleFollowRequest calls the generic PostV1UsersUsernameToggleFollow builder with application/json body
func NewPostV1UsersUsernameToggleFollowRequest(server string, username string, body PostV1UsersUsernameToggleFollowJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostV1UsersUsernameToggleFollowRequestWithBody(server, username, "application/json", bodyReader)
}

// NewPostV1UsersUsernameToggleFollowRequestWithBody generates requests for PostV1UsersUsernameToggleFollow with any type of body
func NewPostV1UsersUsernameToggleFollowRequestWithBody(server string, username string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "username", runtime.ParamLocationPath, username)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/users/%s/toggleFollow", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// GetV1ActivityDaysWithResponse request
	GetV1ActivityDaysWithResponse(ctx context.Context, params *GetV1ActivityDaysParams, reqEditors ...RequestEditorFn) (*GetV1ActivityDaysResponse, error)

	// PostV1ActivityDaysWithBodyWithResponse request with any body
	PostV1ActivityDaysWithBodyWithResponse(ctx context.Context, params *PostV1ActivityDaysParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostV1ActivityDaysResponse, error)

	PostV1ActivityDaysWithResponse(ctx context.Context, params *PostV1ActivityDaysParams, body PostV1ActivityDaysJSONRequestBody, reqEditors ...RequestEditorFn) (*PostV1ActivityDaysResponse, error)

	// GetV1ActivityDaysEstimateReadingTimeWithResponse request
	GetV1ActivityDaysEstimateReadingTimeWithResponse(ctx context.Context, params *GetV1ActivityDaysEstimateReadingTimeParams, reqEditors ...RequestEditorFn) (*GetV1ActivityDaysEstimateReadingTimeResponse, error)

	// GetV1BookmarksWithResponse request
	GetV1BookmarksWithResponse(ctx context.Context, params *GetV1BookmarksParams, reqEditors ...RequestEditorFn) (*GetV1BookmarksResponse, error)

	// PostV1BookmarksWithBodyWithResponse request with any body
	PostV1BookmarksWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostV1BookmarksResponse, error)

	PostV1BookmarksWithResponse(ctx context.Context, body PostV1BookmarksJSONRequestBody, reqEditors ...RequestEditorFn) (*PostV1BookmarksResponse, error)

	// GetV1BookmarksAyahsRangeWithResponse request
	GetV1BookmarksAyahsRangeWithResponse(ctx context.Context, params *GetV1BookmarksAyahsRangeParams, reqEditors ...RequestEditorFn) (*GetV1BookmarksAyahsRangeResponse, error)

	// GetV1BookmarksBookmarkWithResponse request
	GetV1BookmarksBookmarkWithResponse(ctx context.Context, params *GetV1BookmarksBookmarkParams, reqEditors ...RequestEditorFn) (*GetV1BookmarksBookmarkResponse, error)

	// GetV1BookmarksCollectionsWithResponse request
	GetV1BookmarksCollectionsWithResponse(ctx context.Context, params *GetV1BookmarksCollectionsParams, reqEditors ...RequestEditorFn) (*GetV1BookmarksCollectionsResponse, error)

	// DeleteV1BookmarksBookmarkIdWithResponse request
	DeleteV1BookmarksBookmarkIdWithResponse(ctx context.Context, bookmarkId string, reqEditors ...RequestEditorFn) (*DeleteV1BookmarksBookmarkIdResponse, error)

	// GetV1CollectionsWithResponse request
	GetV1CollectionsWithResponse(ctx context.Context, params *GetV1CollectionsParams, reqEditors ...RequestEditorFn) (*GetV1CollectionsResponse, error)

	// PostV1CollectionsWithBodyWithResponse request with any body
	PostV1CollectionsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostV1CollectionsResponse, error)

	PostV1CollectionsWithResponse(ctx context.Context, body PostV1CollectionsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostV1CollectionsResponse, error)

	// GetV1CollectionsAllWithResponse request
	GetV1CollectionsAllWithResponse(ctx context.Context, params *GetV1CollectionsAllParams, reqEditors ...RequestEditorFn) (*GetV1CollectionsAllResponse, error)

	// DeleteV1CollectionsCollectionIdWithResponse request
	DeleteV1CollectionsCollectionIdWithResponse(ctx context.Context, collectionId string, reqEditors ...RequestEditorFn) (*DeleteV1CollectionsCollectionIdResponse, error)

	// GetV1CollectionsCollectionIdWithResponse request
	GetV1CollectionsCollectionIdWithResponse(ctx context.Context, collectionId string, params *GetV1CollectionsCollectionIdParams, reqEditors ...RequestEditorFn) (*GetV1CollectionsCollectionIdResponse, error)

	// PostV1CollectionsCollectionIdWithBodyWithResponse request with any body
	PostV1CollectionsCollectionIdWithBodyWithResponse(ctx context.Context, collectionId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostV1CollectionsCollectionIdResponse, error)

	PostV1CollectionsCollectionIdWithResponse(ctx context.Context, collectionId string, body PostV1CollectionsCollectionIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PostV1CollectionsCollectionIdResponse, error)

	// PostV1CollectionsCollectionIdBookmarksWithBodyWithResponse request with any body
	PostV1CollectionsCollectionIdBookmarksWithBodyWithResponse(ctx context.Context, collectionId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostV1CollectionsCollectionIdBookmarksResponse, error)

	PostV1CollectionsCollectionIdBookmarksWithResponse(ctx context.Context, collectionId string, body PostV1CollectionsCollectionIdBookmarksJSONRequestBody, reqEditors ...RequestEditorFn) (*PostV1CollectionsCollectionIdBookmarksResponse, error)

	// DeleteV1CollectionsCollectionIdBookmarksBookmarkIdWithResponse request
	DeleteV1CollectionsCollectionIdBookmarksBookmarkIdWithResponse(ctx context.Context, collectionId string, bookmarkId string, reqEditors ...RequestEditorFn) (*DeleteV1CollectionsCollectionIdBookmarksBookmarkIdResponse, error)

	// PostV1CommentsWithBodyWithResponse request with any body
	PostV1CommentsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostV1CommentsResponse, error)

	PostV1CommentsWithResponse(ctx context.Context, body PostV1CommentsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostV1CommentsResponse, error)

	// DeleteV1CommentsCommentIdWithResponse request
	DeleteV1CommentsCommentIdWithResponse(ctx context.Context, commentId string, reqEditors ...RequestEditorFn) (*DeleteV1CommentsCommentIdResponse, error)

	// PutV1CommentsCommentIdWithBodyWithResponse request with any body
	PutV1CommentsCommentIdWithBodyWithResponse(ctx context.Context, commentId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutV1CommentsCommentIdResponse, error)

	PutV1CommentsCommentIdWithResponse(ctx context.Context, commentId string, body PutV1CommentsCommentIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PutV1CommentsCommentIdResponse, error)

	// PostV1GoalsWithBodyWithResponse request with any body
	PostV1GoalsWithBodyWithResponse(ctx context.Context, params *PostV1GoalsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostV1GoalsResponse, error)

	PostV1GoalsWithResponse(ctx context.Context, params *PostV1GoalsParams, body PostV1GoalsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostV1GoalsResponse, error)

	// GetV1GoalsEstimateWithResponse request
	GetV1GoalsEstimateWithResponse(ctx context.Context, params *GetV1GoalsEstimateParams, reqEditors ...RequestEditorFn) (*GetV1GoalsEstimateResponse, error)

	// GetV1GoalsGetTodaysPlanWithResponse request
	GetV1GoalsGetTodaysPlanWithResponse(ctx context.Context, params *GetV1GoalsGetTodaysPlanParams, reqEditors ...RequestEditorFn) (*GetV1GoalsGetTodaysPlanResponse, error)

	// DeleteV1GoalsIdWithResponse request
	DeleteV1GoalsIdWithResponse(ctx context.Context, id string, params *DeleteV1GoalsIdParams, reqEditors ...RequestEditorFn) (*DeleteV1GoalsIdResponse, error)

	// PutV1GoalsIdWithBodyWithResponse request with any body
	PutV1GoalsIdWithBodyWithResponse(ctx context.Context, id string, params *PutV1GoalsIdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutV1GoalsIdResponse, error)

	PutV1GoalsIdWithResponse(ctx context.Context, id string, params *PutV1GoalsIdParams, body PutV1GoalsIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PutV1GoalsIdResponse, error)

	// GetV1GroupsWithResponse request
	GetV1GroupsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetV1GroupsResponse, error)

	// GetV1GroupsGroupIdWithResponse request
	GetV1GroupsGroupIdWithResponse(ctx context.Context, groupId string, reqEditors ...RequestEditorFn) (*GetV1GroupsGroupIdResponse, error)

	// PutV1GroupsGroupIdAssignAsAdminWithBodyWithResponse request with any body
	PutV1GroupsGroupIdAssignAsAdminWithBodyWithResponse(ctx context.Context, groupId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutV1GroupsGroupIdAssignAsAdminResponse, error)

	PutV1GroupsGroupIdAssignAsAdminWithResponse(ctx context.Context, groupId string, body PutV1GroupsGroupIdAssignAsAdminJSONRequestBody, reqEditors ...RequestEditorFn) (*PutV1GroupsGroupIdAssignAsAdminResponse, error)

	// PutV1GroupsGroupIdInviteUserWithBodyWithResponse request with any body
	PutV1GroupsGroupIdInviteUserWithBodyWithResponse(ctx context.Context, groupId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutV1GroupsGroupIdInviteUserResponse, error)

	PutV1GroupsGroupIdInviteUserWithResponse(ctx context.Context, groupId string, body PutV1GroupsGroupIdInviteUserJSONRequestBody, reqEditors ...RequestEditorFn) (*PutV1GroupsGroupIdInviteUserResponse, error)

	// PutV1GroupsGroupIdRemoveUserWithBodyWithResponse request with any body
	PutV1GroupsGroupIdRemoveUserWithBodyWithResponse(ctx context.Context, groupId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutV1GroupsGroupIdRemoveUserResponse, error)

	PutV1GroupsGroupIdRemoveUserWithResponse(ctx context.Context, groupId string, body PutV1GroupsGroupIdRemoveUserJSONRequestBody, reqEditors ...RequestEditorFn) (*PutV1GroupsGroupIdRemoveUserResponse, error)

	// GetV1NotesWithResponse request
	GetV1NotesWithResponse(ctx context.Context, params *GetV1NotesParams, reqEditors ...RequestEditorFn) (*GetV1NotesResponse, error)

	// PostV1NotesWithBodyWithResponse request with any body
	PostV1NotesWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostV1NotesResponse, error)

	PostV1NotesWithResponse(ctx context.Context, body PostV1NotesJSONRequestBody, reqEditors ...RequestEditorFn) (*PostV1NotesResponse, error)

	// GetV1NotesByAttachedEntityWithResponse request
	GetV1NotesByAttachedEntityWithResponse(ctx context.Context, params *GetV1NotesByAttachedEntityParams, reqEditors ...RequestEditorFn) (*GetV1NotesByAttachedEntityResponse, error)

	// GetV1NotesByRangeWithResponse request
	GetV1NotesByRangeWithResponse(ctx context.Context, params *GetV1NotesByRangeParams, reqEditors ...RequestEditorFn) (*GetV1NotesByRangeResponse, error)

	// GetV1NotesByVerseVerseKeyWithResponse request
	GetV1NotesByVerseVerseKeyWithResponse(ctx context.Context, verseKey string, reqEditors ...RequestEditorFn) (*GetV1NotesByVerseVerseKeyResponse, error)

	// GetV1NotesCountWithinRangeWithResponse request
	GetV1NotesCountWithinRangeWithResponse(ctx context.Context, params *GetV1NotesCountWithinRangeParams, reqEditors ...RequestEditorFn) (*GetV1NotesCountWithinRangeResponse, error)

	// DeleteV1NotesNoteIdWithResponse request
	DeleteV1NotesNoteIdWithResponse(ctx context.Context, noteId string, reqEditors ...RequestEditorFn) (*DeleteV1NotesNoteIdResponse, error)

	// GetV1NotesNoteIdWithResponse request
	GetV1NotesNoteIdWithResponse(ctx context.Context, noteId string, params *GetV1NotesNoteIdParams, reqEditors ...RequestEditorFn) (*GetV1NotesNoteIdResponse, error)

	// PatchV1NotesNoteIdWithBodyWithResponse request with any body
	PatchV1NotesNoteIdWithBodyWithResponse(ctx context.Context, noteId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchV1NotesNoteIdResponse, error)

	PatchV1NotesNoteIdWithResponse(ctx context.Context, noteId string, body PatchV1NotesNoteIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchV1NotesNoteIdResponse, error)

	// PostV1NotesNoteIdPublishWithBodyWithResponse request with any body
	PostV1NotesNoteIdPublishWithBodyWithResponse(ctx context.Context, noteId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostV1NotesNoteIdPublishResponse, error)

	PostV1NotesNoteIdPublishWithResponse(ctx context.Context, noteId string, body PostV1NotesNoteIdPublishJSONRequestBody, reqEditors ...RequestEditorFn) (*PostV1NotesNoteIdPublishResponse, error)

	// GetV1PostsWithResponse request
	GetV1PostsWithResponse(ctx context.Context, params *GetV1PostsParams, reqEditors ...RequestEditorFn) (*GetV1PostsResponse, error)

	// PostV1PostsWithBodyWithResponse request with any body
	PostV1PostsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostV1PostsResponse, error)

	PostV1PostsWithResponse(ctx context.Context, body PostV1PostsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostV1PostsResponse, error)

	// PostV1PostsReportPostIdWithBodyWithResponse request with any body
	PostV1PostsReportPostIdWithBodyWithResponse(ctx context.Context, postId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostV1PostsReportPostIdResponse, error)

	PostV1PostsReportPostIdWithResponse(ctx context.Context, postId string, body PostV1PostsReportPostIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PostV1PostsReportPostIdResponse, error)

	// PostV1PostsToggleLikePostIdWithBodyWithResponse request with any body
	PostV1PostsToggleLikePostIdWithBodyWithResponse(ctx context.Context, postId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostV1PostsToggleLikePostIdResponse, error)

	PostV1PostsToggleLikePostIdWithResponse(ctx context.Context, postId string, body PostV1PostsToggleLikePostIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PostV1PostsToggleLikePostIdResponse, error)

	// PostV1PostsToggleSavePostIdWithBodyWithResponse request with any body
	PostV1PostsToggleSavePostIdWithBodyWithResponse(ctx context.Context, postId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostV1PostsToggleSavePostIdResponse, error)

	PostV1PostsToggleSavePostIdWithResponse(ctx context.Context, postId string, body PostV1PostsToggleSavePostIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PostV1PostsToggleSavePostIdResponse, error)

	// PostV1PostsViewPostIdWithBodyWithResponse request with any body
	PostV1PostsViewPostIdWithBodyWithResponse(ctx context.Context, postId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostV1PostsViewPostIdResponse, error)

	PostV1PostsViewPostIdWithResponse(ctx context.Context, postId string, body PostV1PostsViewPostIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PostV1PostsViewPostIdResponse, error)

	// DeleteV1PostsPostIdWithResponse request
	DeleteV1PostsPostIdWithResponse(ctx context.Context, postId string, reqEditors ...RequestEditorFn) (*DeleteV1PostsPostIdResponse, error)

	// GetV1PostsPostIdWithResponse request
	GetV1PostsPostIdWithResponse(ctx context.Context, postId string, reqEditors ...RequestEditorFn) (*GetV1PostsPostIdResponse, error)

	// PutV1PostsPostIdWithBodyWithResponse request with any body
	PutV1PostsPostIdWithBodyWithResponse(ctx context.Context, postId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutV1PostsPostIdResponse, error)

	PutV1PostsPostIdWithResponse(ctx context.Context, postId string, body PutV1PostsPostIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PutV1PostsPostIdResponse, error)

	// GetV1PostsPostIdCommentsWithResponse request
	GetV1PostsPostIdCommentsWithResponse(ctx context.Context, postId string, reqEditors ...RequestEditorFn) (*GetV1PostsPostIdCommentsResponse, error)

	// GetV1PreferencesWithResponse request
	GetV1PreferencesWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetV1PreferencesResponse, error)

	// PostV1PreferencesWithBodyWithResponse request with any body
	PostV1PreferencesWithBodyWithResponse(ctx context.Context, params *PostV1PreferencesParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostV1PreferencesResponse, error)

	PostV1PreferencesWithResponse(ctx context.Context, params *PostV1PreferencesParams, body PostV1PreferencesJSONRequestBody, reqEditors ...RequestEditorFn) (*PostV1PreferencesResponse, error)

	// PostV1PreferencesBulkWithBodyWithResponse request with any body
	PostV1PreferencesBulkWithBodyWithResponse(ctx context.Context, params *PostV1PreferencesBulkParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostV1PreferencesBulkResponse, error)

	PostV1PreferencesBulkWithResponse(ctx context.Context, params *PostV1PreferencesBulkParams, body PostV1PreferencesBulkJSONRequestBody, reqEditors ...RequestEditorFn) (*PostV1PreferencesBulkResponse, error)

	// GetV1ReadingSessionsWithResponse request
	GetV1ReadingSessionsWithResponse(ctx context.Context, params *GetV1ReadingSessionsParams, reqEditors ...RequestEditorFn) (*GetV1ReadingSessionsResponse, error)

	// PostV1ReadingSessionsWithBodyWithResponse request with any body
	PostV1ReadingSessionsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostV1ReadingSessionsResponse, error)

	PostV1ReadingSessionsWithResponse(ctx context.Context, body PostV1ReadingSessionsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostV1ReadingSessionsResponse, error)

	// GetV1StreaksWithResponse request
	GetV1StreaksWithResponse(ctx context.Context, params *GetV1StreaksParams, reqEditors ...RequestEditorFn) (*GetV1StreaksResponse, error)

	// GetV1StreaksCurrentStreakDaysWithResponse request
	GetV1StreaksCurrentStreakDaysWithResponse(ctx context.Context, params *GetV1StreaksCurrentStreakDaysParams, reqEditors ...RequestEditorFn) (*GetV1StreaksCurrentStreakDaysResponse, error)

	// PostV1UsersConfirmationEmailWithBodyWithResponse request with any body
	PostV1UsersConfirmationEmailWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostV1UsersConfirmationEmailResponse, error)

	PostV1UsersConfirmationEmailWithResponse(ctx context.Context, body PostV1UsersConfirmationEmailJSONRequestBody, reqEditors ...RequestEditorFn) (*PostV1UsersConfirmationEmailResponse, error)

	// GetV1UsersNotificationsWithResponse request
	GetV1UsersNotificationsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetV1UsersNotificationsResponse, error)

	// PutV1UsersNotificationsSettingIdWithBodyWithResponse request with any body
	PutV1UsersNotificationsSettingIdWithBodyWithResponse(ctx context.Context, settingId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutV1UsersNotificationsSettingIdResponse, error)

	PutV1UsersNotificationsSettingIdWithResponse(ctx context.Context, settingId string, body PutV1UsersNotificationsSettingIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PutV1UsersNotificationsSettingIdResponse, error)

	// PostV1UsersPasswordResetEmailWithBodyWithResponse request with any body
	PostV1UsersPasswordResetEmailWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostV1UsersPasswordResetEmailResponse, error)

	PostV1UsersPasswordResetEmailWithResponse(ctx context.Context, body PostV1UsersPasswordResetEmailJSONRequestBody, reqEditors ...RequestEditorFn) (*PostV1UsersPasswordResetEmailResponse, error)

	// GetV1UsersProfileWithResponse request
	GetV1UsersProfileWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetV1UsersProfileResponse, error)

	// PutV1UsersProfileWithBodyWithResponse request with any body
	PutV1UsersProfileWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutV1UsersProfileResponse, error)

	PutV1UsersProfileWithResponse(ctx context.Context, body PutV1UsersProfileJSONRequestBody, reqEditors ...RequestEditorFn) (*PutV1UsersProfileResponse, error)

	// PostV1UsersUsernameRegisterAndroidDeviceWithBodyWithResponse request with any body
	PostV1UsersUsernameRegisterAndroidDeviceWithBodyWithResponse(ctx context.Context, username string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostV1UsersUsernameRegisterAndroidDeviceResponse, error)

	PostV1UsersUsernameRegisterAndroidDeviceWithResponse(ctx context.Context, username string, body PostV1UsersUsernameRegisterAndroidDeviceJSONRequestBody, reqEditors ...RequestEditorFn) (*PostV1UsersUsernameRegisterAndroidDeviceResponse, error)

	// PostV1UsersUsernameToggleFollowWithBodyWithResponse request with any body
	PostV1UsersUsernameToggleFollowWithBodyWithResponse(ctx context.Context, username string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostV1UsersUsernameToggleFollowResponse, error)

	PostV1UsersUsernameToggleFollowWithResponse(ctx context.Context, username string, body PostV1UsersUsernameToggleFollowJSONRequestBody, reqEditors ...RequestEditorFn) (*PostV1UsersUsernameToggleFollowResponse, error)
}

type GetV1ActivityDaysResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Data *[]struct {
			// DailyTargetPages The number of pages user should read on that day to meet their goal's target if a goal was set (will be included only when the type is QURAN)
			DailyTargetPages *GetV1ActivityDays_200_Data_DailyTargetPages `json:"dailyTargetPages,omitempty"`

			// DailyTargetRanges The range of Ayahs user should read on that day to meet their goal's target if a goal was set (will be included only when the type is QURAN)
			DailyTargetRanges *GetV1ActivityDays_200_Data_DailyTargetRanges `json:"dailyTargetRanges,omitempty"`

			// DailyTargetSeconds The number of seconds user should read on that day to meet their goal's target if a goal was set (will be included only when the type is QURAN)
			DailyTargetSeconds *GetV1ActivityDays_200_Data_DailyTargetSeconds `json:"dailyTargetSeconds,omitempty"`

			// Date The date of the activity day.
			Date string `json:"date"`

			// Id The id of the activity day.
			Id string `json:"id"`

			// ManuallyAddedSeconds The number of seconds spent reading that was manually input by the user and not auto-tracked (will be included only when the type is QURAN)
			ManuallyAddedSeconds *GetV1ActivityDays_200_Data_ManuallyAddedSeconds `json:"manuallyAddedSeconds,omitempty"`

			// MushafId The id of the Mushaf being used.
			//
			// 1 = QCFV2
			//
			//   2 = QCFV1
			//
			//   3 = Indopak
			//
			//   4 = UthmaniHafs
			//
			//   5 = KFGQPCHAFS
			//
			//   6 = Indopak15Lines
			//
			//   7 = Indopak16Lines
			//
			//   11 = Tajweeed
			//
			//   19 = QCFTajweedV4
			MushafId GetV1ActivityDays200DataMushafId `json:"mushafId"`

			// PagesRead The number of pages read on that day (will be included only when the type is QURAN)
			PagesRead *GetV1ActivityDays_200_Data_PagesRead `json:"pagesRead,omitempty"`

			// Progress The progress of the reading goal of that activity day (if the user has a reading goal on that day).
			Progress float32 `json:"progress"`

			// Ranges The ranges read on that day (will be included only when the type is QURAN)
			Ranges *GetV1ActivityDays_200_Data_Ranges `json:"ranges,omitempty"`

			// RemainingDailyTargetRanges The remaining range of Ayahs user should read on that day to meet their goal's target if a goal was set (will be included only when the type is QURAN)
			RemainingDailyTargetRanges *GetV1ActivityDays_200_Data_RemainingDailyTargetRanges `json:"remainingDailyTargetRanges,omitempty"`

			// SecondsRead The number of seconds spent reading on that day (will be included only when the type is QURAN)
			SecondsRead *GetV1ActivityDays_200_Data_SecondsRead `json:"secondsRead,omitempty"`

			// Type The type of the activity day
			Type GetV1ActivityDays200DataType `json:"type"`

			// VersesRead The number of Ayahs read on that day (will be included only when the type is QURAN)
			VersesRead *GetV1ActivityDays_200_Data_VersesRead `json:"versesRead,omitempty"`
		} `json:"data,omitempty"`
		Pagination *struct {
			EndCursor       *string `json:"endCursor,omitempty"`
			HasNextPage     *bool   `json:"hasNextPage,omitempty"`
			HasPreviousPage *bool   `json:"hasPreviousPage,omitempty"`
			StartCursor     *string `json:"startCursor,omitempty"`
		} `json:"pagination,omitempty"`
		Success *bool `json:"success,omitempty"`
	}
	JSON400 *struct {
		Message *string `json:"message,omitempty"`
		Success *bool   `json:"success,omitempty"`
		Type    *string `json:"type,omitempty"`
	}
	JSON401 *struct {
		Message *string `json:"message,omitempty"`
		Success *bool   `json:"success,omitempty"`
		Type    *string `json:"type,omitempty"`
	}
	JSON403 *struct {
		Message *string `json:"message,omitempty"`
		Success *bool   `json:"success,omitempty"`
		Type    *string `json:"type,omitempty"`
	}
	JSON404 *struct {
		Message *string `json:"message,omitempty"`
		Success *bool   `json:"success,omitempty"`
		Type    *string `json:"type,omitempty"`
	}
	JSON422 *struct {
		Message *string `json:"message,omitempty"`
		Success *bool   `json:"success,omitempty"`
		Type    *string `json:"type,omitempty"`
	}
	JSON429 *struct {
		Message *string `json:"message,omitempty"`
		Success *bool   `json:"success,omitempty"`
		Type    *string `json:"type,omitempty"`
	}
	JSON500 *struct {
		Message *string `json:"message,omitempty"`
		Success *bool   `json:"success,omitempty"`
		Type    *string `json:"type,omitempty"`
	}
	JSON502 *struct {
		Message *string `json:"message,omitempty"`
		Success *bool   `json:"success,omitempty"`
		Type    *string `json:"type,omitempty"`
	}
	JSON503 *struct {
		Message *string `json:"message,omitempty"`
		Success *bool   `json:"success,omitempty"`
		Type    *string `json:"type,omitempty"`
	}
	JSON504 *struct {
		Message *string `json:"message,omitempty"`
		Success *bool   `json:"success,omitempty"`
		Type    *string `json:"type,omitempty"`
	}
}
type GetV1ActivityDays200DataDailyTargetPages0 = float32
type GetV1ActivityDays_200_Data_DailyTargetPages struct {
	union json.RawMessage
}
type GetV1ActivityDays200DataDailyTargetRanges0 = []string
type GetV1ActivityDays_200_Data_DailyTargetRanges struct {
	union json.RawMessage
}
type GetV1ActivityDays200DataDailyTargetSeconds0 = int
type GetV1ActivityDays_200_Data_DailyTargetSeconds struct {
	union json.RawMessage
}
type GetV1ActivityDays200DataManuallyAddedSeconds0 = int
type GetV1ActivityDays_200_Data_ManuallyAddedSeconds struct {
	union json.RawMessage
}
type GetV1ActivityDays200DataMushafId int
type GetV1ActivityDays200DataPagesRead0 = float32
type GetV1ActivityDays_200_Data_PagesRead struct {
	union json.RawMessage
}
type GetV1ActivityDays200DataRanges0 = []string
type GetV1ActivityDays_200_Data_Ranges struct {
	union json.RawMessage
}
type GetV1ActivityDays200DataRemainingDailyTargetRanges0 = []string
type GetV1ActivityDays_200_Data_RemainingDailyTargetRanges struct {
	union json.RawMessage
}
type GetV1ActivityDays200DataSecondsRead0 = int
type GetV1ActivityDays_200_Data_SecondsRead struct {
	union json.RawMessage
}
type GetV1ActivityDays200DataType string
type GetV1ActivityDays200DataVersesRead0 = int
type GetV1ActivityDays_200_Data_VersesRead struct {
	union json.RawMessage
}

// Status returns HTTPResponse.Status
func (r GetV1ActivityDaysResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetV1ActivityDaysResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostV1ActivityDaysResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Data    *map[string]interface{} `json:"data,omitempty"`
		Success *bool                   `json:"success,omitempty"`
	}
	JSON400 *struct {
		Message *string `json:"message,omitempty"`
		Success *bool   `json:"success,omitempty"`
		Type    *string `json:"type,omitempty"`
	}
	JSON401 *struct {
		Message *string `json:"message,omitempty"`
		Success *bool   `json:"success,omitempty"`
		Type    *string `json:"type,omitempty"`
	}
	JSON403 *struct {
		Message *string `json:"message,omitempty"`
		Success *bool   `json:"success,omitempty"`
		Type    *string `json:"type,omitempty"`
	}
	JSON404 *struct {
		Message *string `json:"message,omitempty"`
		Success *bool   `json:"success,omitempty"`
		Type    *string `json:"type,omitempty"`
	}
	JSON422 *struct {
		Message *string `json:"message,omitempty"`
		Success *bool   `json:"success,omitempty"`
		Type    *string `json:"type,omitempty"`
	}
	JSON429 *struct {
		Message *string `json:"message,omitempty"`
		Success *bool   `json:"success,omitempty"`
		Type    *string `json:"type,omitempty"`
	}
	JSON500 *struct {
		Message *string `json:"message,omitempty"`
		Success *bool   `json:"success,omitempty"`
		Type    *string `json:"type,omitempty"`
	}
	JSON502 *struct {
		Message *string `json:"message,omitempty"`
		Success *bool   `json:"success,omitempty"`
		Type    *string `json:"type,omitempty"`
	}
	JSON503 *struct {
		Message *string `json:"message,omitempty"`
		Success *bool   `json:"success,omitempty"`
		Type    *string `json:"type,omitempty"`
	}
	JSON504 *struct {
		Message *string `json:"message,omitempty"`
		Success *bool   `json:"success,omitempty"`
		Type    *string `json:"type,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r PostV1ActivityDaysResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostV1ActivityDaysResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetV1ActivityDaysEstimateReadingTimeResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Data *struct {
			// Seconds The number of seconds it would take on average to read the range of Ayahs.
			Seconds int `json:"seconds"`
		} `json:"data,omitempty"`
		Success *bool `json:"success,omitempty"`
	}
	JSON400 *struct {
		Message *string `json:"message,omitempty"`
		Success *bool   `json:"success,omitempty"`
		Type    *string `json:"type,omitempty"`
	}
	JSON401 *struct {
		Message *string `json:"message,omitempty"`
		Success *bool   `json:"success,omitempty"`
		Type    *string `json:"type,omitempty"`
	}
	JSON403 *struct {
		Message *string `json:"message,omitempty"`
		Success *bool   `json:"success,omitempty"`
		Type    *string `json:"type,omitempty"`
	}
	JSON404 *struct {
		Message *string `json:"message,omitempty"`
		Success *bool   `json:"success,omitempty"`
		Type    *string `json:"type,omitempty"`
	}
	JSON422 *struct {
		Message *string `json:"message,omitempty"`
		Success *bool   `json:"success,omitempty"`
		Type    *string `json:"type,omitempty"`
	}
	JSON429 *struct {
		Message *string `json:"message,omitempty"`
		Success *bool   `json:"success,omitempty"`
		Type    *string `json:"type,omitempty"`
	}
	JSON500 *struct {
		Message *string `json:"message,omitempty"`
		Success *bool   `json:"success,omitempty"`
		Type    *string `json:"type,omitempty"`
	}
	JSON502 *struct {
		Message *string `json:"message,omitempty"`
		Success *bool   `json:"success,omitempty"`
		Type    *string `json:"type,omitempty"`
	}
	JSON503 *struct {
		Message *string `json:"message,omitempty"`
		Success *bool   `json:"success,omitempty"`
		Type    *string `json:"type,omitempty"`
	}
	JSON504 *struct {
		Message *string `json:"message,omitempty"`
		Success *bool   `json:"success,omitempty"`
		Type    *string `json:"type,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r GetV1ActivityDaysEstimateReadingTimeResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetV1ActivityDaysEstimateReadingTimeResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetV1BookmarksResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Data       *[]Bookmark `json:"data,omitempty"`
		Pagination *struct {
			EndCursor       *string `json:"endCursor,omitempty"`
			HasNextPage     *bool   `json:"hasNextPage,omitempty"`
			HasPreviousPage *bool   `json:"hasPreviousPage,omitempty"`
			StartCursor     *string `json:"startCursor,omitempty"`
		} `json:"pagination,omitempty"`
		Success *bool `json:"success,omitempty"`
	}
	JSON400 *struct {
		Message *string `json:"message,omitempty"`
		Success *bool   `json:"success,omitempty"`
		Type    *string `json:"type,omitempty"`
	}
	JSON401 *struct {
		Message *string `json:"message,omitempty"`
		Success *bool   `json:"success,omitempty"`
		Type    *string `json:"type,omitempty"`
	}
	JSON403 *struct {
		Message *string `json:"message,omitempty"`
		Success *bool   `json:"success,omitempty"`
		Type    *string `json:"type,omitempty"`
	}
	JSON404 *struct {
		Message *string `json:"message,omitempty"`
		Success *bool   `json:"success,omitempty"`
		Type    *string `json:"type,omitempty"`
	}
	JSON422 *struct {
		Message *string `json:"message,omitempty"`
		Success *bool   `json:"success,omitempty"`
		Type    *string `json:"type,omitempty"`
	}
	JSON429 *struct {
		Message *string `json:"message,omitempty"`
		Success *bool   `json:"success,omitempty"`
		Type    *string `json:"type,omitempty"`
	}
	JSON500 *struct {
		Message *string `json:"message,omitempty"`
		Success *bool   `json:"success,omitempty"`
		Type    *string `json:"type,omitempty"`
	}
	JSON502 *struct {
		Message *string `json:"message,omitempty"`
		Success *bool   `json:"success,omitempty"`
		Type    *string `json:"type,omitempty"`
	}
	JSON503 *struct {
		Message *string `json:"message,omitempty"`
		Success *bool   `json:"success,omitempty"`
		Type    *string `json:"type,omitempty"`
	}
	JSON504 *struct {
		Message *string `json:"message,omitempty"`
		Success *bool   `json:"success,omitempty"`
		Type    *string `json:"type,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r GetV1BookmarksResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetV1BookmarksResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostV1BookmarksResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Data    *Bookmark `json:"data,omitempty"`
		Success *bool     `json:"success,omitempty"`
	}
	JSON400 *struct {
		Message *string `json:"message,omitempty"`
		Success *bool   `json:"success,omitempty"`
		Type    *string `json:"type,omitempty"`
	}
	JSON401 *struct {
		Message *string `json:"message,omitempty"`
		Success *bool   `json:"success,omitempty"`
		Type    *string `json:"type,omitempty"`
	}
	JSON403 *struct {
		Message *string `json:"message,omitempty"`
		Success *bool   `json:"success,omitempty"`
		Type    *string `json:"type,omitempty"`
	}
	JSON404 *struct {
		Message *string `json:"message,omitempty"`
		Success *bool   `json:"success,omitempty"`
		Type    *string `json:"type,omitempty"`
	}
	JSON422 *struct {
		Message *string `json:"message,omitempty"`
		Success *bool   `json:"success,omitempty"`
		Type    *string `json:"type,omitempty"`
	}
	JSON429 *struct {
		Message *string `json:"message,omitempty"`
		Success *bool   `json:"success,omitempty"`
		Type    *string `json:"type,omitempty"`
	}
	JSON500 *struct {
		Message *string `json:"message,omitempty"`
		Success *bool   `json:"success,omitempty"`
		Type    *string `json:"type,omitempty"`
	}
	JSON502 *struct {
		Message *string `json:"message,omitempty"`
		Success *bool   `json:"success,omitempty"`
		Type    *string `json:"type,omitempty"`
	}
	JSON503 *struct {
		Message *string `json:"message,omitempty"`
		Success *bool   `json:"success,omitempty"`
		Type    *string `json:"type,omitempty"`
	}
	JSON504 *struct {
		Message *string `json:"message,omitempty"`
		Success *bool   `json:"success,omitempty"`
		Type    *string `json:"type,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r PostV1BookmarksResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostV1BookmarksResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetV1BookmarksAyahsRangeResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Data       *[]Bookmark `json:"data,omitempty"`
		Pagination *struct {
			EndCursor       *string `json:"endCursor,omitempty"`
			HasNextPage     *bool   `json:"hasNextPage,omitempty"`
			HasPreviousPage *bool   `json:"hasPreviousPage,omitempty"`
			StartCursor     *string `json:"startCursor,omitempty"`
		} `json:"pagination,omitempty"`
		Success *bool `json:"success,omitempty"`
	}
	JSON400 *struct {
		Message *string `json:"message,omitempty"`
		Success *bool   `json:"success,omitempty"`
		Type    *string `json:"type,omitempty"`
	}
	JSON401 *struct {
		Message *string `json:"message,omitempty"`
		Success *bool   `json:"success,omitempty"`
		Type    *string `json:"type,omitempty"`
	}
	JSON403 *struct {
		Message *string `json:"message,omitempty"`
		Success *bool   `json:"success,omitempty"`
		Type    *string `json:"type,omitempty"`
	}
	JSON404 *struct {
		Message *string `json:"message,omitempty"`
		Success *bool   `json:"success,omitempty"`
		Type    *string `json:"type,omitempty"`
	}
	JSON422 *struct {
		Message *string `json:"message,omitempty"`
		Success *bool   `json:"success,omitempty"`
		Type    *string `json:"type,omitempty"`
	}
	JSON429 *struct {
		Message *string `json:"message,omitempty"`
		Success *bool   `json:"success,omitempty"`
		Type    *string `json:"type,omitempty"`
	}
	JSON500 *struct {
		Message *string `json:"message,omitempty"`
		Success *bool   `json:"success,omitempty"`
		Type    *string `json:"type,omitempty"`
	}
	JSON502 *struct {
		Message *string `json:"message,omitempty"`
		Success *bool   `json:"success,omitempty"`
		Type    *string `json:"type,omitempty"`
	}
	JSON503 *struct {
		Message *string `json:"message,omitempty"`
		Success *bool   `json:"success,omitempty"`
		Type    *string `json:"type,omitempty"`
	}
	JSON504 *struct {
		Message *string `json:"message,omitempty"`
		Success *bool   `json:"success,omitempty"`
		Type    *string `json:"type,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r GetV1BookmarksAyahsRangeResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetV1BookmarksAyahsRangeResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetV1BookmarksBookmarkResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Data    *Bookmark `json:"data,omitempty"`
		Success *bool     `json:"success,omitempty"`
	}
	JSON400 *struct {
		Message *string `json:"message,omitempty"`
		Success *bool   `json:"success,omitempty"`
		Type    *string `json:"type,omitempty"`
	}
	JSON401 *struct {
		Message *string `json:"message,omitempty"`
		Success *bool   `json:"success,omitempty"`
		Type    *string `json:"type,omitempty"`
	}
	JSON403 *struct {
		Message *string `json:"message,omitempty"`
		Success *bool   `json:"success,omitempty"`
		Type    *string `json:"type,omitempty"`
	}
	JSON404 *struct {
		Message *string `json:"message,omitempty"`
		Success *bool   `json:"success,omitempty"`
		Type    *string `json:"type,omitempty"`
	}
	JSON422 *struct {
		Message *string `json:"message,omitempty"`
		Success *bool   `json:"success,omitempty"`
		Type    *string `json:"type,omitempty"`
	}
	JSON429 *struct {
		Message *string `json:"message,omitempty"`
		Success *bool   `json:"success,omitempty"`
		Type    *string `json:"type,omitempty"`
	}
	JSON500 *struct {
		Message *string `json:"message,omitempty"`
		Success *bool   `json:"success,omitempty"`
		Type    *string `json:"type,omitempty"`
	}
	JSON502 *struct {
		Message *string `json:"message,omitempty"`
		Success *bool   `json:"success,omitempty"`
		Type    *string `json:"type,omitempty"`
	}
	JSON503 *struct {
		Message *string `json:"message,omitempty"`
		Success *bool   `json:"success,omitempty"`
		Type    *string `json:"type,omitempty"`
	}
	JSON504 *struct {
		Message *string `json:"message,omitempty"`
		Success *bool   `json:"success,omitempty"`
		Type    *string `json:"type,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r GetV1BookmarksBookmarkResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetV1BookmarksBookmarkResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetV1BookmarksCollectionsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Data    *[]Collection `json:"data,omitempty"`
		Success *bool         `json:"success,omitempty"`
	}
	JSON400 *struct {
		Message *string `json:"message,omitempty"`
		Success *bool   `json:"success,omitempty"`
		Type    *string `json:"type,omitempty"`
	}
	JSON401 *struct {
		Message *string `json:"message,omitempty"`
		Success *bool   `json:"success,omitempty"`
		Type    *string `json:"type,omitempty"`
	}
	JSON403 *struct {
		Message *string `json:"message,omitempty"`
		Success *bool   `json:"success,omitempty"`
		Type    *string `json:"type,omitempty"`
	}
	JSON404 *struct {
		Message *string `json:"message,omitempty"`
		Success *bool   `json:"success,omitempty"`
		Type    *string `json:"type,omitempty"`
	}
	JSON422 *struct {
		Message *string `json:"message,omitempty"`
		Success *bool   `json:"success,omitempty"`
		Type    *string `json:"type,omitempty"`
	}
	JSON429 *struct {
		Message *string `json:"message,omitempty"`
		Success *bool   `json:"success,omitempty"`
		Type    *string `json:"type,omitempty"`
	}
	JSON500 *struct {
		Message *string `json:"message,omitempty"`
		Success *bool   `json:"success,omitempty"`
		Type    *string `json:"type,omitempty"`
	}
	JSON502 *struct {
		Message *string `json:"message,omitempty"`
		Success *bool   `json:"success,omitempty"`
		Type    *string `json:"type,omitempty"`
	}
	JSON503 *struct {
		Message *string `json:"message,omitempty"`
		Success *bool   `json:"success,omitempty"`
		Type    *string `json:"type,omitempty"`
	}
	JSON504 *struct {
		Message *string `json:"message,omitempty"`
		Success *bool   `json:"success,omitempty"`
		Type    *string `json:"type,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r GetV1BookmarksCollectionsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetV1BookmarksCollectionsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteV1BookmarksBookmarkIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Data *struct {
			Message interface{} `json:"message,omitempty"`
		} `json:"data,omitempty"`
		Success *bool `json:"success,omitempty"`
	}
	JSON400 *struct {
		Message *string `json:"message,omitempty"`
		Success *bool   `json:"success,omitempty"`
		Type    *string `json:"type,omitempty"`
	}
	JSON401 *struct {
		Message *string `json:"message,omitempty"`
		Success *bool   `json:"success,omitempty"`
		Type    *string `json:"type,omitempty"`
	}
	JSON403 *struct {
		Message *string `json:"message,omitempty"`
		Success *bool   `json:"success,omitempty"`
		Type    *string `json:"type,omitempty"`
	}
	JSON404 *struct {
		Message *string `json:"message,omitempty"`
		Success *bool   `json:"success,omitempty"`
		Type    *string `json:"type,omitempty"`
	}
	JSON422 *struct {
		Message *string `json:"message,omitempty"`
		Success *bool   `json:"success,omitempty"`
		Type    *string `json:"type,omitempty"`
	}
	JSON429 *struct {
		Message *string `json:"message,omitempty"`
		Success *bool   `json:"success,omitempty"`
		Type    *string `json:"type,omitempty"`
	}
	JSON500 *struct {
		Message *string `json:"message,omitempty"`
		Success *bool   `json:"success,omitempty"`
		Type    *string `json:"type,omitempty"`
	}
	JSON502 *struct {
		Message *string `json:"message,omitempty"`
		Success *bool   `json:"success,omitempty"`
		Type    *string `json:"type,omitempty"`
	}
	JSON503 *struct {
		Message *string `json:"message,omitempty"`
		Success *bool   `json:"success,omitempty"`
		Type    *string `json:"type,omitempty"`
	}
	JSON504 *struct {
		Message *string `json:"message,omitempty"`
		Success *bool   `json:"success,omitempty"`
		Type    *string `json:"type,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r DeleteV1BookmarksBookmarkIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteV1BookmarksBookmarkIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetV1CollectionsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Data       *[]Collection `json:"data,omitempty"`
		Pagination *struct {
			EndCursor       *string `json:"endCursor,omitempty"`
			HasNextPage     *bool   `json:"hasNextPage,omitempty"`
			HasPreviousPage *bool   `json:"hasPreviousPage,omitempty"`
			StartCursor     *string `json:"startCursor,omitempty"`
		} `json:"pagination,omitempty"`
		Success *bool `json:"success,omitempty"`
	}
	JSON400 *struct {
		Message *string `json:"message,omitempty"`
		Success *bool   `json:"success,omitempty"`
		Type    *string `json:"type,omitempty"`
	}
	JSON401 *struct {
		Message *string `json:"message,omitempty"`
		Success *bool   `json:"success,omitempty"`
		Type    *string `json:"type,omitempty"`
	}
	JSON403 *struct {
		Message *string `json:"message,omitempty"`
		Success *bool   `json:"success,omitempty"`
		Type    *string `json:"type,omitempty"`
	}
	JSON404 *struct {
		Message *string `json:"message,omitempty"`
		Success *bool   `json:"success,omitempty"`
		Type    *string `json:"type,omitempty"`
	}
	JSON422 *struct {
		Message *string `json:"message,omitempty"`
		Success *bool   `json:"success,omitempty"`
		Type    *string `json:"type,omitempty"`
	}
	JSON429 *struct {
		Message *string `json:"message,omitempty"`
		Success *bool   `json:"success,omitempty"`
		Type    *string `json:"type,omitempty"`
	}
	JSON500 *struct {
		Message *string `json:"message,omitempty"`
		Success *bool   `json:"success,omitempty"`
		Type    *string `json:"type,omitempty"`
	}
	JSON502 *struct {
		Message *string `json:"message,omitempty"`
		Success *bool   `json:"success,omitempty"`
		Type    *string `json:"type,omitempty"`
	}
	JSON503 *struct {
		Message *string `json:"message,omitempty"`
		Success *bool   `json:"success,omitempty"`
		Type    *string `json:"type,omitempty"`
	}
	JSON504 *struct {
		Message *string `json:"message,omitempty"`
		Success *bool   `json:"success,omitempty"`
		Type    *string `json:"type,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r GetV1CollectionsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetV1CollectionsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostV1CollectionsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Data    *Collection `json:"data,omitempty"`
		Success *bool       `json:"success,omitempty"`
	}
	JSON400 *struct {
		Message *string `json:"message,omitempty"`
		Success *bool   `json:"success,omitempty"`
		Type    *string `json:"type,omitempty"`
	}
	JSON401 *struct {
		Message *string `json:"message,omitempty"`
		Success *bool   `json:"success,omitempty"`
		Type    *string `json:"type,omitempty"`
	}
	JSON403 *struct {
		Message *string `json:"message,omitempty"`
		Success *bool   `json:"success,omitempty"`
		Type    *string `json:"type,omitempty"`
	}
	JSON404 *struct {
		Message *string `json:"message,omitempty"`
		Success *bool   `json:"success,omitempty"`
		Type    *string `json:"type,omitempty"`
	}
	JSON422 *struct {
		Message *string `json:"message,omitempty"`
		Success *bool   `json:"success,omitempty"`
		Type    *string `json:"type,omitempty"`
	}
	JSON429 *struct {
		Message *string `json:"message,omitempty"`
		Success *bool   `json:"success,omitempty"`
		Type    *string `json:"type,omitempty"`
	}
	JSON500 *struct {
		Message *string `json:"message,omitempty"`
		Success *bool   `json:"success,omitempty"`
		Type    *string `json:"type,omitempty"`
	}
	JSON502 *struct {
		Message *string `json:"message,omitempty"`
		Success *bool   `json:"success,omitempty"`
		Type    *string `json:"type,omitempty"`
	}
	JSON503 *struct {
		Message *string `json:"message,omitempty"`
		Success *bool   `json:"success,omitempty"`
		Type    *string `json:"type,omitempty"`
	}
	JSON504 *struct {
		Message *string `json:"message,omitempty"`
		Success *bool   `json:"success,omitempty"`
		Type    *string `json:"type,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r PostV1CollectionsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostV1CollectionsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetV1CollectionsAllResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Data       *[]Bookmark `json:"data,omitempty"`
		Pagination *struct {
			EndCursor       *string `json:"endCursor,omitempty"`
			HasNextPage     *bool   `json:"hasNextPage,omitempty"`
			HasPreviousPage *bool   `json:"hasPreviousPage,omitempty"`
			StartCursor     *string `json:"startCursor,omitempty"`
		} `json:"pagination,omitempty"`
		Success *bool `json:"success,omitempty"`
	}
	JSON400 *struct {
		Message *string `json:"message,omitempty"`
		Success *bool   `json:"success,omitempty"`
		Type    *string `json:"type,omitempty"`
	}
	JSON401 *struct {
		Message *string `json:"message,omitempty"`
		Success *bool   `json:"success,omitempty"`
		Type    *string `json:"type,omitempty"`
	}
	JSON403 *struct {
		Message *string `json:"message,omitempty"`
		Success *bool   `json:"success,omitempty"`
		Type    *string `json:"type,omitempty"`
	}
	JSON404 *struct {
		Message *string `json:"message,omitempty"`
		Success *bool   `json:"success,omitempty"`
		Type    *string `json:"type,omitempty"`
	}
	JSON422 *struct {
		Message *string `json:"message,omitempty"`
		Success *bool   `json:"success,omitempty"`
		Type    *string `json:"type,omitempty"`
	}
	JSON429 *struct {
		Message *string `json:"message,omitempty"`
		Success *bool   `json:"success,omitempty"`
		Type    *string `json:"type,omitempty"`
	}
	JSON500 *struct {
		Message *string `json:"message,omitempty"`
		Success *bool   `json:"success,omitempty"`
		Type    *string `json:"type,omitempty"`
	}
	JSON502 *struct {
		Message *string `json:"message,omitempty"`
		Success *bool   `json:"success,omitempty"`
		Type    *string `json:"type,omitempty"`
	}
	JSON503 *struct {
		Message *string `json:"message,omitempty"`
		Success *bool   `json:"success,omitempty"`
		Type    *string `json:"type,omitempty"`
	}
	JSON504 *struct {
		Message *string `json:"message,omitempty"`
		Success *bool   `json:"success,omitempty"`
		Type    *string `json:"type,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r GetV1CollectionsAllResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetV1CollectionsAllResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteV1CollectionsCollectionIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Data *struct {
			Message interface{} `json:"message,omitempty"`
		} `json:"data,omitempty"`
		Success *bool `json:"success,omitempty"`
	}
	JSON400 *struct {
		Message *string `json:"message,omitempty"`
		Success *bool   `json:"success,omitempty"`
		Type    *string `json:"type,omitempty"`
	}
	JSON401 *struct {
		Message *string `json:"message,omitempty"`
		Success *bool   `json:"success,omitempty"`
		Type    *string `json:"type,omitempty"`
	}
	JSON403 *struct {
		Message *string `json:"message,omitempty"`
		Success *bool   `json:"success,omitempty"`
		Type    *string `json:"type,omitempty"`
	}
	JSON404 *struct {
		Message *string `json:"message,omitempty"`
		Success *bool   `json:"success,omitempty"`
		Type    *string `json:"type,omitempty"`
	}
	JSON422 *struct {
		Message *string `json:"message,omitempty"`
		Success *bool   `json:"success,omitempty"`
		Type    *string `json:"type,omitempty"`
	}
	JSON429 *struct {
		Message *string `json:"message,omitempty"`
		Success *bool   `json:"success,omitempty"`
		Type    *string `json:"type,omitempty"`
	}
	JSON500 *struct {
		Message *string `json:"message,omitempty"`
		Success *bool   `json:"success,omitempty"`
		Type    *string `json:"type,omitempty"`
	}
	JSON502 *struct {
		Message *string `json:"message,omitempty"`
		Success *bool   `json:"success,omitempty"`
		Type    *string `json:"type,omitempty"`
	}
	JSON503 *struct {
		Message *string `json:"message,omitempty"`
		Success *bool   `json:"success,omitempty"`
		Type    *string `json:"type,omitempty"`
	}
	JSON504 *struct {
		Message *string `json:"message,omitempty"`
		Success *bool   `json:"success,omitempty"`
		Type    *string `json:"type,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r DeleteV1CollectionsCollectionIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteV1CollectionsCollectionIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetV1CollectionsCollectionIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Data *struct {
			Bookmarks  *[]Bookmark `json:"bookmarks,omitempty"`
			Collection *Collection `json:"collection,omitempty"`
		} `json:"data,omitempty"`
		Pagination *struct {
			EndCursor       *string `json:"endCursor,omitempty"`
			HasNextPage     *bool   `json:"hasNextPage,omitempty"`
			HasPreviousPage *bool   `json:"hasPreviousPage,omitempty"`
			StartCursor     *string `json:"startCursor,omitempty"`
		} `json:"pagination,omitempty"`
		Success *bool `json:"success,omitempty"`
	}
	JSON400 *struct {
		Message *string `json:"message,omitempty"`
		Success *bool   `json:"success,omitempty"`
		Type    *string `json:"type,omitempty"`
	}
	JSON401 *struct {
		Message *string `json:"message,omitempty"`
		Success *bool   `json:"success,omitempty"`
		Type    *string `json:"type,omitempty"`
	}
	JSON403 *struct {
		Message *string `json:"message,omitempty"`
		Success *bool   `json:"success,omitempty"`
		Type    *string `json:"type,omitempty"`
	}
	JSON404 *struct {
		Message *string `json:"message,omitempty"`
		Success *bool   `json:"success,omitempty"`
		Type    *string `json:"type,omitempty"`
	}
	JSON422 *struct {
		Message *string `json:"message,omitempty"`
		Success *bool   `json:"success,omitempty"`
		Type    *string `json:"type,omitempty"`
	}
	JSON429 *struct {
		Message *string `json:"message,omitempty"`
		Success *bool   `json:"success,omitempty"`
		Type    *string `json:"type,omitempty"`
	}
	JSON500 *struct {
		Message *string `json:"message,omitempty"`
		Success *bool   `json:"success,omitempty"`
		Type    *string `json:"type,omitempty"`
	}
	JSON502 *struct {
		Message *string `json:"message,omitempty"`
		Success *bool   `json:"success,omitempty"`
		Type    *string `json:"type,omitempty"`
	}
	JSON503 *struct {
		Message *string `json:"message,omitempty"`
		Success *bool   `json:"success,omitempty"`
		Type    *string `json:"type,omitempty"`
	}
	JSON504 *struct {
		Message *string `json:"message,omitempty"`
		Success *bool   `json:"success,omitempty"`
		Type    *string `json:"type,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r GetV1CollectionsCollectionIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetV1CollectionsCollectionIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostV1CollectionsCollectionIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Data *struct {
			Message interface{} `json:"message,omitempty"`
		} `json:"data,omitempty"`
		Success *bool `json:"success,omitempty"`
	}
	JSON400 *struct {
		Message *string `json:"message,omitempty"`
		Success *bool   `json:"success,omitempty"`
		Type    *string `json:"type,omitempty"`
	}
	JSON401 *struct {
		Message *string `json:"message,omitempty"`
		Success *bool   `json:"success,omitempty"`
		Type    *string `json:"type,omitempty"`
	}
	JSON403 *struct {
		Message *string `json:"message,omitempty"`
		Success *bool   `json:"success,omitempty"`
		Type    *string `json:"type,omitempty"`
	}
	JSON404 *struct {
		Message *string `json:"message,omitempty"`
		Success *bool   `json:"success,omitempty"`
		Type    *string `json:"type,omitempty"`
	}
	JSON422 *struct {
		Message *string `json:"message,omitempty"`
		Success *bool   `json:"success,omitempty"`
		Type    *string `json:"type,omitempty"`
	}
	JSON429 *struct {
		Message *string `json:"message,omitempty"`
		Success *bool   `json:"success,omitempty"`
		Type    *string `json:"type,omitempty"`
	}
	JSON500 *struct {
		Message *string `json:"message,omitempty"`
		Success *bool   `json:"success,omitempty"`
		Type    *string `json:"type,omitempty"`
	}
	JSON502 *struct {
		Message *string `json:"message,omitempty"`
		Success *bool   `json:"success,omitempty"`
		Type    *string `json:"type,omitempty"`
	}
	JSON503 *struct {
		Message *string `json:"message,omitempty"`
		Success *bool   `json:"success,omitempty"`
		Type    *string `json:"type,omitempty"`
	}
	JSON504 *struct {
		Message *string `json:"message,omitempty"`
		Success *bool   `json:"success,omitempty"`
		Type    *string `json:"type,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r PostV1CollectionsCollectionIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostV1CollectionsCollectionIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostV1CollectionsCollectionIdBookmarksResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Data *struct {
			Message interface{} `json:"message,omitempty"`
		} `json:"data,omitempty"`
		Success *bool `json:"success,omitempty"`
	}
	JSON400 *struct {
		Message *string `json:"message,omitempty"`
		Success *bool   `json:"success,omitempty"`
		Type    *string `json:"type,omitempty"`
	}
	JSON401 *struct {
		Message *string `json:"message,omitempty"`
		Success *bool   `json:"success,omitempty"`
		Type    *string `json:"type,omitempty"`
	}
	JSON403 *struct {
		Message *string `json:"message,omitempty"`
		Success *bool   `json:"success,omitempty"`
		Type    *string `json:"type,omitempty"`
	}
	JSON404 *struct {
		Message *string `json:"message,omitempty"`
		Success *bool   `json:"success,omitempty"`
		Type    *string `json:"type,omitempty"`
	}
	JSON422 *struct {
		Message *string `json:"message,omitempty"`
		Success *bool   `json:"success,omitempty"`
		Type    *string `json:"type,omitempty"`
	}
	JSON429 *struct {
		Message *string `json:"message,omitempty"`
		Success *bool   `json:"success,omitempty"`
		Type    *string `json:"type,omitempty"`
	}
	JSON500 *struct {
		Message *string `json:"message,omitempty"`
		Success *bool   `json:"success,omitempty"`
		Type    *string `json:"type,omitempty"`
	}
	JSON502 *struct {
		Message *string `json:"message,omitempty"`
		Success *bool   `json:"success,omitempty"`
		Type    *string `json:"type,omitempty"`
	}
	JSON503 *struct {
		Message *string `json:"message,omitempty"`
		Success *bool   `json:"success,omitempty"`
		Type    *string `json:"type,omitempty"`
	}
	JSON504 *struct {
		Message *string `json:"message,omitempty"`
		Success *bool   `json:"success,omitempty"`
		Type    *string `json:"type,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r PostV1CollectionsCollectionIdBookmarksResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostV1CollectionsCollectionIdBookmarksResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteV1CollectionsCollectionIdBookmarksBookmarkIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Data *struct {
			Message interface{} `json:"message,omitempty"`
		} `json:"data,omitempty"`
		Success *bool `json:"success,omitempty"`
	}
	JSON400 *struct {
		Message *string `json:"message,omitempty"`
		Success *bool   `json:"success,omitempty"`
		Type    *string `json:"type,omitempty"`
	}
	JSON401 *struct {
		Message *string `json:"message,omitempty"`
		Success *bool   `json:"success,omitempty"`
		Type    *string `json:"type,omitempty"`
	}
	JSON403 *struct {
		Message *string `json:"message,omitempty"`
		Success *bool   `json:"success,omitempty"`
		Type    *string `json:"type,omitempty"`
	}
	JSON404 *struct {
		Message *string `json:"message,omitempty"`
		Success *bool   `json:"success,omitempty"`
		Type    *string `json:"type,omitempty"`
	}
	JSON422 *struct {
		Message *string `json:"message,omitempty"`
		Success *bool   `json:"success,omitempty"`
		Type    *string `json:"type,omitempty"`
	}
	JSON429 *struct {
		Message *string `json:"message,omitempty"`
		Success *bool   `json:"success,omitempty"`
		Type    *string `json:"type,omitempty"`
	}
	JSON500 *struct {
		Message *string `json:"message,omitempty"`
		Success *bool   `json:"success,omitempty"`
		Type    *string `json:"type,omitempty"`
	}
	JSON502 *struct {
		Message *string `json:"message,omitempty"`
		Success *bool   `json:"success,omitempty"`
		Type    *string `json:"type,omitempty"`
	}
	JSON503 *struct {
		Message *string `json:"message,omitempty"`
		Success *bool   `json:"success,omitempty"`
		Type    *string `json:"type,omitempty"`
	}
	JSON504 *struct {
		Message *string `json:"message,omitempty"`
		Success *bool   `json:"success,omitempty"`
		Type    *string `json:"type,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r DeleteV1CollectionsCollectionIdBookmarksBookmarkIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteV1CollectionsCollectionIdBookmarksBookmarkIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostV1CommentsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Data *struct {
			Message interface{} `json:"message,omitempty"`
		} `json:"data,omitempty"`
		Success *bool `json:"success,omitempty"`
	}
	JSON400 *struct {
		Message *string `json:"message,omitempty"`
		Success *bool   `json:"success,omitempty"`
		Type    *string `json:"type,omitempty"`
	}
	JSON401 *struct {
		Message *string `json:"message,omitempty"`
		Success *bool   `json:"success,omitempty"`
		Type    *string `json:"type,omitempty"`
	}
	JSON403 *struct {
		Message *string `json:"message,omitempty"`
		Success *bool   `json:"success,omitempty"`
		Type    *string `json:"type,omitempty"`
	}
	JSON404 *struct {
		Message *string `json:"message,omitempty"`
		Success *bool   `json:"success,omitempty"`
		Type    *string `json:"type,omitempty"`
	}
	JSON422 *struct {
		Message *string `json:"message,omitempty"`
		Success *bool   `json:"success,omitempty"`
		Type    *string `json:"type,omitempty"`
	}
	JSON429 *struct {
		Message *string `json:"message,omitempty"`
		Success *bool   `json:"success,omitempty"`
		Type    *string `json:"type,omitempty"`
	}
	JSON500 *struct {
		Message *string `json:"message,omitempty"`
		Success *bool   `json:"success,omitempty"`
		Type    *string `json:"type,omitempty"`
	}
	JSON502 *struct {
		Message *string `json:"message,omitempty"`
		Success *bool   `json:"success,omitempty"`
		Type    *string `json:"type,omitempty"`
	}
	JSON503 *struct {
		Message *string `json:"message,omitempty"`
		Success *bool   `json:"success,omitempty"`
		Type    *string `json:"type,omitempty"`
	}
	JSON504 *struct {
		Message *string `json:"message,omitempty"`
		Success *bool   `json:"success,omitempty"`
		Type    *string `json:"type,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r PostV1CommentsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostV1CommentsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteV1CommentsCommentIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Data *struct {
			Message interface{} `json:"message,omitempty"`
		} `json:"data,omitempty"`
		Success *bool `json:"success,omitempty"`
	}
	JSON400 *struct {
		Message *string `json:"message,omitempty"`
		Success *bool   `json:"success,omitempty"`
		Type    *string `json:"type,omitempty"`
	}
	JSON401 *struct {
		Message *string `json:"message,omitempty"`
		Success *bool   `json:"success,omitempty"`
		Type    *string `json:"type,omitempty"`
	}
	JSON403 *struct {
		Message *string `json:"message,omitempty"`
		Success *bool   `json:"success,omitempty"`
		Type    *string `json:"type,omitempty"`
	}
	JSON404 *struct {
		Message *string `json:"message,omitempty"`
		Success *bool   `json:"success,omitempty"`
		Type    *string `json:"type,omitempty"`
	}
	JSON422 *struct {
		Message *string `json:"message,omitempty"`
		Success *bool   `json:"success,omitempty"`
		Type    *string `json:"type,omitempty"`
	}
	JSON429 *struct {
		Message *string `json:"message,omitempty"`
		Success *bool   `json:"success,omitempty"`
		Type    *string `json:"type,omitempty"`
	}
	JSON500 *struct {
		Message *string `json:"message,omitempty"`
		Success *bool   `json:"success,omitempty"`
		Type    *string `json:"type,omitempty"`
	}
	JSON502 *struct {
		Message *string `json:"message,omitempty"`
		Success *bool   `json:"success,omitempty"`
		Type    *string `json:"type,omitempty"`
	}
	JSON503 *struct {
		Message *string `json:"message,omitempty"`
		Success *bool   `json:"success,omitempty"`
		Type    *string `json:"type,omitempty"`
	}
	JSON504 *struct {
		Message *string `json:"message,omitempty"`
		Success *bool   `json:"success,omitempty"`
		Type    *string `json:"type,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r DeleteV1CommentsCommentIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteV1CommentsCommentIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutV1CommentsCommentIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Data *struct {
			Message interface{} `json:"message,omitempty"`
		} `json:"data,omitempty"`
		Success *bool `json:"success,omitempty"`
	}
	JSON400 *struct {
		Message *string `json:"message,omitempty"`
		Success *bool   `json:"success,omitempty"`
		Type    *string `json:"type,omitempty"`
	}
	JSON401 *struct {
		Message *string `json:"message,omitempty"`
		Success *bool   `json:"success,omitempty"`
		Type    *string `json:"type,omitempty"`
	}
	JSON403 *struct {
		Message *string `json:"message,omitempty"`
		Success *bool   `json:"success,omitempty"`
		Type    *string `json:"type,omitempty"`
	}
	JSON404 *struct {
		Message *string `json:"message,omitempty"`
		Success *bool   `json:"success,omitempty"`
		Type    *string `json:"type,omitempty"`
	}
	JSON422 *struct {
		Message *string `json:"message,omitempty"`
		Success *bool   `json:"success,omitempty"`
		Type    *string `json:"type,omitempty"`
	}
	JSON429 *struct {
		Message *string `json:"message,omitempty"`
		Success *bool   `json:"success,omitempty"`
		Type    *string `json:"type,omitempty"`
	}
	JSON500 *struct {
		Message *string `json:"message,omitempty"`
		Success *bool   `json:"success,omitempty"`
		Type    *string `json:"type,omitempty"`
	}
	JSON502 *struct {
		Message *string `json:"message,omitempty"`
		Success *bool   `json:"success,omitempty"`
		Type    *string `json:"type,omitempty"`
	}
	JSON503 *struct {
		Message *string `json:"message,omitempty"`
		Success *bool   `json:"success,omitempty"`
		Type    *string `json:"type,omitempty"`
	}
	JSON504 *struct {
		Message *string `json:"message,omitempty"`
		Success *bool   `json:"success,omitempty"`
		Type    *string `json:"type,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r PutV1CommentsCommentIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutV1CommentsCommentIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostV1GoalsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Data *struct {
			// Id The id of the goal.
			Id string `json:"id"`
		} `json:"data,omitempty"`
		Success *bool `json:"success,omitempty"`
	}
	JSON400 *struct {
		Message *string `json:"message,omitempty"`
		Success *bool   `json:"success,omitempty"`
		Type    *string `json:"type,omitempty"`
	}
	JSON401 *struct {
		Message *string `json:"message,omitempty"`
		Success *bool   `json:"success,omitempty"`
		Type    *string `json:"type,omitempty"`
	}
	JSON403 *struct {
		Message *string `json:"message,omitempty"`
		Success *bool   `json:"success,omitempty"`
		Type    *string `json:"type,omitempty"`
	}
	JSON404 *struct {
		Message *string `json:"message,omitempty"`
		Success *bool   `json:"success,omitempty"`
		Type    *string `json:"type,omitempty"`
	}
	JSON422 *struct {
		Message *string `json:"message,omitempty"`
		Success *bool   `json:"success,omitempty"`
		Type    *string `json:"type,omitempty"`
	}
	JSON429 *struct {
		Message *string `json:"message,omitempty"`
		Success *bool   `json:"success,omitempty"`
		Type    *string `json:"type,omitempty"`
	}
	JSON500 *struct {
		Message *string `json:"message,omitempty"`
		Success *bool   `json:"success,omitempty"`
		Type    *string `json:"type,omitempty"`
	}
	JSON502 *struct {
		Message *string `json:"message,omitempty"`
		Success *bool   `json:"success,omitempty"`
		Type    *string `json:"type,omitempty"`
	}
	JSON503 *struct {
		Message *string `json:"message,omitempty"`
		Success *bool   `json:"success,omitempty"`
		Type    *string `json:"type,omitempty"`
	}
	JSON504 *struct {
		Message *string `json:"message,omitempty"`
		Success *bool   `json:"success,omitempty"`
		Type    *string `json:"type,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r PostV1GoalsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostV1GoalsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetV1GoalsEstimateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Data    *EstimatedGoalTimeline `json:"data,omitempty"`
		Success *bool                  `json:"success,omitempty"`
	}
	JSON400 *struct {
		Message *string `json:"message,omitempty"`
		Success *bool   `json:"success,omitempty"`
		Type    *string `json:"type,omitempty"`
	}
	JSON401 *struct {
		Message *string `json:"message,omitempty"`
		Success *bool   `json:"success,omitempty"`
		Type    *string `json:"type,omitempty"`
	}
	JSON403 *struct {
		Message *string `json:"message,omitempty"`
		Success *bool   `json:"success,omitempty"`
		Type    *string `json:"type,omitempty"`
	}
	JSON404 *struct {
		Message *string `json:"message,omitempty"`
		Success *bool   `json:"success,omitempty"`
		Type    *string `json:"type,omitempty"`
	}
	JSON422 *struct {
		Message *string `json:"message,omitempty"`
		Success *bool   `json:"success,omitempty"`
		Type    *string `json:"type,omitempty"`
	}
	JSON429 *struct {
		Message *string `json:"message,omitempty"`
		Success *bool   `json:"success,omitempty"`
		Type    *string `json:"type,omitempty"`
	}
	JSON500 *struct {
		Message *string `json:"message,omitempty"`
		Success *bool   `json:"success,omitempty"`
		Type    *string `json:"type,omitempty"`
	}
	JSON502 *struct {
		Message *string `json:"message,omitempty"`
		Success *bool   `json:"success,omitempty"`
		Type    *string `json:"type,omitempty"`
	}
	JSON503 *struct {
		Message *string `json:"message,omitempty"`
		Success *bool   `json:"success,omitempty"`
		Type    *string `json:"type,omitempty"`
	}
	JSON504 *struct {
		Message *string `json:"message,omitempty"`
		Success *bool   `json:"success,omitempty"`
		Type    *string `json:"type,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r GetV1GoalsEstimateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetV1GoalsEstimateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetV1GoalsGetTodaysPlanResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Data    *GetV1GoalsGetTodaysPlan_200_Data `json:"data,omitempty"`
		Success *bool                             `json:"success,omitempty"`
	}
	JSON400 *struct {
		Message *string `json:"message,omitempty"`
		Success *bool   `json:"success,omitempty"`
		Type    *string `json:"type,omitempty"`
	}
	JSON401 *struct {
		Message *string `json:"message,omitempty"`
		Success *bool   `json:"success,omitempty"`
		Type    *string `json:"type,omitempty"`
	}
	JSON403 *struct {
		Message *string `json:"message,omitempty"`
		Success *bool   `json:"success,omitempty"`
		Type    *string `json:"type,omitempty"`
	}
	JSON404 *struct {
		Message *string `json:"message,omitempty"`
		Success *bool   `json:"success,omitempty"`
		Type    *string `json:"type,omitempty"`
	}
	JSON422 *struct {
		Message *string `json:"message,omitempty"`
		Success *bool   `json:"success,omitempty"`
		Type    *string `json:"type,omitempty"`
	}
	JSON429 *struct {
		Message *string `json:"message,omitempty"`
		Success *bool   `json:"success,omitempty"`
		Type    *string `json:"type,omitempty"`
	}
	JSON500 *struct {
		Message *string `json:"message,omitempty"`
		Success *bool   `json:"success,omitempty"`
		Type    *string `json:"type,omitempty"`
	}
	JSON502 *struct {
		Message *string `json:"message,omitempty"`
		Success *bool   `json:"success,omitempty"`
		Type    *string `json:"type,omitempty"`
	}
	JSON503 *struct {
		Message *string `json:"message,omitempty"`
		Success *bool   `json:"success,omitempty"`
		Type    *string `json:"type,omitempty"`
	}
	JSON504 *struct {
		Message *string `json:"message,omitempty"`
		Success *bool   `json:"success,omitempty"`
		Type    *string `json:"type,omitempty"`
	}
}
type GetV1GoalsGetTodaysPlan200Data0 struct {
	// DailyTargetPages The number of pages user should read on that day to meet their goal's target if a goal was set (will be included only when the type is QURAN)
	DailyTargetPages *GetV1GoalsGetTodaysPlan_200_Data_0_DailyTargetPages `json:"dailyTargetPages,omitempty"`

	// DailyTargetRanges The range of Ayahs user should read on that day to meet their goal's target if a goal was set (will be included only when the type is QURAN)
	DailyTargetRanges *GetV1GoalsGetTodaysPlan_200_Data_0_DailyTargetRanges `json:"dailyTargetRanges,omitempty"`

	// DailyTargetSeconds The number of seconds user should read on that day to meet their goal's target if a goal was set (will be included only when the type is QURAN)
	DailyTargetSeconds *GetV1GoalsGetTodaysPlan_200_Data_0_DailyTargetSeconds `json:"dailyTargetSeconds,omitempty"`

	// Date The date of the activity day.
	Date string `json:"date"`

	// Id The id of the activity day.
	Id string `json:"id"`

	// ManuallyAddedSeconds The number of seconds spent reading that was manually input by the user and not auto-tracked (will be included only when the type is QURAN)
	ManuallyAddedSeconds *GetV1GoalsGetTodaysPlan_200_Data_0_ManuallyAddedSeconds `json:"manuallyAddedSeconds,omitempty"`

	// MushafId The id of the Mushaf being used.
	//
	// 1 = QCFV2
	//
	//   2 = QCFV1
	//
	//   3 = Indopak
	//
	//   4 = UthmaniHafs
	//
	//   5 = KFGQPCHAFS
	//
	//   6 = Indopak15Lines
	//
	//   7 = Indopak16Lines
	//
	//   11 = Tajweeed
	//
	//   19 = QCFTajweedV4
	MushafId GetV1GoalsGetTodaysPlan200Data0MushafId `json:"mushafId"`

	// PagesRead The number of pages read on that day (will be included only when the type is QURAN)
	PagesRead *GetV1GoalsGetTodaysPlan_200_Data_0_PagesRead `json:"pagesRead,omitempty"`

	// Progress The progress of the reading goal of that activity day (if the user has a reading goal on that day).
	Progress float32 `json:"progress"`

	// Ranges The ranges read on that day (will be included only when the type is QURAN)
	Ranges *GetV1GoalsGetTodaysPlan_200_Data_0_Ranges `json:"ranges,omitempty"`

	// RemainingDailyTargetRanges The remaining range of Ayahs user should read on that day to meet their goal's target if a goal was set (will be included only when the type is QURAN)
	RemainingDailyTargetRanges *GetV1GoalsGetTodaysPlan_200_Data_0_RemainingDailyTargetRanges `json:"remainingDailyTargetRanges,omitempty"`

	// SecondsRead The number of seconds spent reading on that day (will be included only when the type is QURAN)
	SecondsRead *GetV1GoalsGetTodaysPlan_200_Data_0_SecondsRead `json:"secondsRead,omitempty"`

	// Type The type of the activity day
	Type GetV1GoalsGetTodaysPlan200Data0Type `json:"type"`

	// VersesRead The number of Ayahs read on that day (will be included only when the type is QURAN)
	VersesRead *GetV1GoalsGetTodaysPlan_200_Data_0_VersesRead `json:"versesRead,omitempty"`
}
type GetV1GoalsGetTodaysPlan200Data0DailyTargetPages0 = float32
type GetV1GoalsGetTodaysPlan_200_Data_0_DailyTargetPages struct {
	union json.RawMessage
}
type GetV1GoalsGetTodaysPlan200Data0DailyTargetRanges0 = []string
type GetV1GoalsGetTodaysPlan_200_Data_0_DailyTargetRanges struct {
	union json.RawMessage
}
type GetV1GoalsGetTodaysPlan200Data0DailyTargetSeconds0 = int
type GetV1GoalsGetTodaysPlan_200_Data_0_DailyTargetSeconds struct {
	union json.RawMessage
}
type GetV1GoalsGetTodaysPlan200Data0ManuallyAddedSeconds0 = int
type GetV1GoalsGetTodaysPlan_200_Data_0_ManuallyAddedSeconds struct {
	union json.RawMessage
}
type GetV1GoalsGetTodaysPlan200Data0MushafId int
type GetV1GoalsGetTodaysPlan200Data0PagesRead0 = float32
type GetV1GoalsGetTodaysPlan_200_Data_0_PagesRead struct {
	union json.RawMessage
}
type GetV1GoalsGetTodaysPlan200Data0Ranges0 = []string
type GetV1GoalsGetTodaysPlan_200_Data_0_Ranges struct {
	union json.RawMessage
}
type GetV1GoalsGetTodaysPlan200Data0RemainingDailyTargetRanges0 = []string
type GetV1GoalsGetTodaysPlan_200_Data_0_RemainingDailyTargetRanges struct {
	union json.RawMessage
}
type GetV1GoalsGetTodaysPlan200Data0SecondsRead0 = int
type GetV1GoalsGetTodaysPlan_200_Data_0_SecondsRead struct {
	union json.RawMessage
}
type GetV1GoalsGetTodaysPlan200Data0Type string
type GetV1GoalsGetTodaysPlan200Data0VersesRead0 = int
type GetV1GoalsGetTodaysPlan_200_Data_0_VersesRead struct {
	union json.RawMessage
}
type GetV1GoalsGetTodaysPlan_200_Data struct {
	// HasGoal User has a goal.
	HasGoal bool `json:"hasGoal"`
	union   json.RawMessage
}

// Status returns HTTPResponse.Status
func (r GetV1GoalsGetTodaysPlanResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetV1GoalsGetTodaysPlanResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteV1GoalsIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Data *struct {
			Message interface{} `json:"message,omitempty"`
		} `json:"data,omitempty"`
		Success *bool `json:"success,omitempty"`
	}
	JSON400 *struct {
		Message *string `json:"message,omitempty"`
		Success *bool   `json:"success,omitempty"`
		Type    *string `json:"type,omitempty"`
	}
	JSON401 *struct {
		Message *string `json:"message,omitempty"`
		Success *bool   `json:"success,omitempty"`
		Type    *string `json:"type,omitempty"`
	}
	JSON403 *struct {
		Message *string `json:"message,omitempty"`
		Success *bool   `json:"success,omitempty"`
		Type    *string `json:"type,omitempty"`
	}
	JSON404 *struct {
		Message *string `json:"message,omitempty"`
		Success *bool   `json:"success,omitempty"`
		Type    *string `json:"type,omitempty"`
	}
	JSON422 *struct {
		Message *string `json:"message,omitempty"`
		Success *bool   `json:"success,omitempty"`
		Type    *string `json:"type,omitempty"`
	}
	JSON429 *struct {
		Message *string `json:"message,omitempty"`
		Success *bool   `json:"success,omitempty"`
		Type    *string `json:"type,omitempty"`
	}
	JSON500 *struct {
		Message *string `json:"message,omitempty"`
		Success *bool   `json:"success,omitempty"`
		Type    *string `json:"type,omitempty"`
	}
	JSON502 *struct {
		Message *string `json:"message,omitempty"`
		Success *bool   `json:"success,omitempty"`
		Type    *string `json:"type,omitempty"`
	}
	JSON503 *struct {
		Message *string `json:"message,omitempty"`
		Success *bool   `json:"success,omitempty"`
		Type    *string `json:"type,omitempty"`
	}
	JSON504 *struct {
		Message *string `json:"message,omitempty"`
		Success *bool   `json:"success,omitempty"`
		Type    *string `json:"type,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r DeleteV1GoalsIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteV1GoalsIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutV1GoalsIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Data    *map[string]interface{} `json:"data,omitempty"`
		Success *bool                   `json:"success,omitempty"`
	}
	JSON400 *struct {
		Message *string `json:"message,omitempty"`
		Success *bool   `json:"success,omitempty"`
		Type    *string `json:"type,omitempty"`
	}
	JSON401 *struct {
		Message *string `json:"message,omitempty"`
		Success *bool   `json:"success,omitempty"`
		Type    *string `json:"type,omitempty"`
	}
	JSON403 *struct {
		Message *string `json:"message,omitempty"`
		Success *bool   `json:"success,omitempty"`
		Type    *string `json:"type,omitempty"`
	}
	JSON404 *struct {
		Message *string `json:"message,omitempty"`
		Success *bool   `json:"success,omitempty"`
		Type    *string `json:"type,omitempty"`
	}
	JSON422 *struct {
		Message *string `json:"message,omitempty"`
		Success *bool   `json:"success,omitempty"`
		Type    *string `json:"type,omitempty"`
	}
	JSON429 *struct {
		Message *string `json:"message,omitempty"`
		Success *bool   `json:"success,omitempty"`
		Type    *string `json:"type,omitempty"`
	}
	JSON500 *struct {
		Message *string `json:"message,omitempty"`
		Success *bool   `json:"success,omitempty"`
		Type    *string `json:"type,omitempty"`
	}
	JSON502 *struct {
		Message *string `json:"message,omitempty"`
		Success *bool   `json:"success,omitempty"`
		Type    *string `json:"type,omitempty"`
	}
	JSON503 *struct {
		Message *string `json:"message,omitempty"`
		Success *bool   `json:"success,omitempty"`
		Type    *string `json:"type,omitempty"`
	}
	JSON504 *struct {
		Message *string `json:"message,omitempty"`
		Success *bool   `json:"success,omitempty"`
		Type    *string `json:"type,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r PutV1GoalsIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutV1GoalsIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetV1GroupsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Data *struct {
			// Groups List of user groups.
			Groups *[]Room `json:"groups,omitempty"`

			// Pages List of user pages.
			Pages *[]Room `json:"pages,omitempty"`
		} `json:"data,omitempty"`
		Success *bool `json:"success,omitempty"`
	}
	JSON400 *struct {
		Message *string `json:"message,omitempty"`
		Success *bool   `json:"success,omitempty"`
		Type    *string `json:"type,omitempty"`
	}
	JSON401 *struct {
		Message *string `json:"message,omitempty"`
		Success *bool   `json:"success,omitempty"`
		Type    *string `json:"type,omitempty"`
	}
	JSON403 *struct {
		Message *string `json:"message,omitempty"`
		Success *bool   `json:"success,omitempty"`
		Type    *string `json:"type,omitempty"`
	}
	JSON404 *struct {
		Message *string `json:"message,omitempty"`
		Success *bool   `json:"success,omitempty"`
		Type    *string `json:"type,omitempty"`
	}
	JSON422 *struct {
		Message *string `json:"message,omitempty"`
		Success *bool   `json:"success,omitempty"`
		Type    *string `json:"type,omitempty"`
	}
	JSON429 *struct {
		Message *string `json:"message,omitempty"`
		Success *bool   `json:"success,omitempty"`
		Type    *string `json:"type,omitempty"`
	}
	JSON500 *struct {
		Message *string `json:"message,omitempty"`
		Success *bool   `json:"success,omitempty"`
		Type    *string `json:"type,omitempty"`
	}
	JSON502 *struct {
		Message *string `json:"message,omitempty"`
		Success *bool   `json:"success,omitempty"`
		Type    *string `json:"type,omitempty"`
	}
	JSON503 *struct {
		Message *string `json:"message,omitempty"`
		Success *bool   `json:"success,omitempty"`
		Type    *string `json:"type,omitempty"`
	}
	JSON504 *struct {
		Message *string `json:"message,omitempty"`
		Success *bool   `json:"success,omitempty"`
		Type    *string `json:"type,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r GetV1GroupsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetV1GroupsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetV1GroupsGroupIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Data    *Room `json:"data,omitempty"`
		Success *bool `json:"success,omitempty"`
	}
	JSON400 *struct {
		Message *string `json:"message,omitempty"`
		Success *bool   `json:"success,omitempty"`
		Type    *string `json:"type,omitempty"`
	}
	JSON401 *struct {
		Message *string `json:"message,omitempty"`
		Success *bool   `json:"success,omitempty"`
		Type    *string `json:"type,omitempty"`
	}
	JSON403 *struct {
		Message *string `json:"message,omitempty"`
		Success *bool   `json:"success,omitempty"`
		Type    *string `json:"type,omitempty"`
	}
	JSON404 *struct {
		Message *string `json:"message,omitempty"`
		Success *bool   `json:"success,omitempty"`
		Type    *string `json:"type,omitempty"`
	}
	JSON422 *struct {
		Message *string `json:"message,omitempty"`
		Success *bool   `json:"success,omitempty"`
		Type    *string `json:"type,omitempty"`
	}
	JSON429 *struct {
		Message *string `json:"message,omitempty"`
		Success *bool   `json:"success,omitempty"`
		Type    *string `json:"type,omitempty"`
	}
	JSON500 *struct {
		Message *string `json:"message,omitempty"`
		Success *bool   `json:"success,omitempty"`
		Type    *string `json:"type,omitempty"`
	}
	JSON502 *struct {
		Message *string `json:"message,omitempty"`
		Success *bool   `json:"success,omitempty"`
		Type    *string `json:"type,omitempty"`
	}
	JSON503 *struct {
		Message *string `json:"message,omitempty"`
		Success *bool   `json:"success,omitempty"`
		Type    *string `json:"type,omitempty"`
	}
	JSON504 *struct {
		Message *string `json:"message,omitempty"`
		Success *bool   `json:"success,omitempty"`
		Type    *string `json:"type,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r GetV1GroupsGroupIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetV1GroupsGroupIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutV1GroupsGroupIdAssignAsAdminResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Data *struct {
			Message interface{} `json:"message,omitempty"`
		} `json:"data,omitempty"`
		Success *bool `json:"success,omitempty"`
	}
	JSON400 *struct {
		Message *string `json:"message,omitempty"`
		Success *bool   `json:"success,omitempty"`
		Type    *string `json:"type,omitempty"`
	}
	JSON401 *struct {
		Message *string `json:"message,omitempty"`
		Success *bool   `json:"success,omitempty"`
		Type    *string `json:"type,omitempty"`
	}
	JSON403 *struct {
		Message *string `json:"message,omitempty"`
		Success *bool   `json:"success,omitempty"`
		Type    *string `json:"type,omitempty"`
	}
	JSON404 *struct {
		Message *string `json:"message,omitempty"`
		Success *bool   `json:"success,omitempty"`
		Type    *string `json:"type,omitempty"`
	}
	JSON422 *struct {
		Message *string `json:"message,omitempty"`
		Success *bool   `json:"success,omitempty"`
		Type    *string `json:"type,omitempty"`
	}
	JSON429 *struct {
		Message *string `json:"message,omitempty"`
		Success *bool   `json:"success,omitempty"`
		Type    *string `json:"type,omitempty"`
	}
	JSON500 *struct {
		Message *string `json:"message,omitempty"`
		Success *bool   `json:"success,omitempty"`
		Type    *string `json:"type,omitempty"`
	}
	JSON502 *struct {
		Message *string `json:"message,omitempty"`
		Success *bool   `json:"success,omitempty"`
		Type    *string `json:"type,omitempty"`
	}
	JSON503 *struct {
		Message *string `json:"message,omitempty"`
		Success *bool   `json:"success,omitempty"`
		Type    *string `json:"type,omitempty"`
	}
	JSON504 *struct {
		Message *string `json:"message,omitempty"`
		Success *bool   `json:"success,omitempty"`
		Type    *string `json:"type,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r PutV1GroupsGroupIdAssignAsAdminResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutV1GroupsGroupIdAssignAsAdminResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutV1GroupsGroupIdInviteUserResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Data *struct {
			Message interface{} `json:"message,omitempty"`
		} `json:"data,omitempty"`
		Success *bool `json:"success,omitempty"`
	}
	JSON400 *struct {
		Message *string `json:"message,omitempty"`
		Success *bool   `json:"success,omitempty"`
		Type    *string `json:"type,omitempty"`
	}
	JSON401 *struct {
		Message *string `json:"message,omitempty"`
		Success *bool   `json:"success,omitempty"`
		Type    *string `json:"type,omitempty"`
	}
	JSON403 *struct {
		Message *string `json:"message,omitempty"`
		Success *bool   `json:"success,omitempty"`
		Type    *string `json:"type,omitempty"`
	}
	JSON404 *struct {
		Message *string `json:"message,omitempty"`
		Success *bool   `json:"success,omitempty"`
		Type    *string `json:"type,omitempty"`
	}
	JSON422 *struct {
		Message *string `json:"message,omitempty"`
		Success *bool   `json:"success,omitempty"`
		Type    *string `json:"type,omitempty"`
	}
	JSON429 *struct {
		Message *string `json:"message,omitempty"`
		Success *bool   `json:"success,omitempty"`
		Type    *string `json:"type,omitempty"`
	}
	JSON500 *struct {
		Message *string `json:"message,omitempty"`
		Success *bool   `json:"success,omitempty"`
		Type    *string `json:"type,omitempty"`
	}
	JSON502 *struct {
		Message *string `json:"message,omitempty"`
		Success *bool   `json:"success,omitempty"`
		Type    *string `json:"type,omitempty"`
	}
	JSON503 *struct {
		Message *string `json:"message,omitempty"`
		Success *bool   `json:"success,omitempty"`
		Type    *string `json:"type,omitempty"`
	}
	JSON504 *struct {
		Message *string `json:"message,omitempty"`
		Success *bool   `json:"success,omitempty"`
		Type    *string `json:"type,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r PutV1GroupsGroupIdInviteUserResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutV1GroupsGroupIdInviteUserResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutV1GroupsGroupIdRemoveUserResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Data *struct {
			Message interface{} `json:"message,omitempty"`
		} `json:"data,omitempty"`
		Success *bool `json:"success,omitempty"`
	}
	JSON400 *struct {
		Message *string `json:"message,omitempty"`
		Success *bool   `json:"success,omitempty"`
		Type    *string `json:"type,omitempty"`
	}
	JSON401 *struct {
		Message *string `json:"message,omitempty"`
		Success *bool   `json:"success,omitempty"`
		Type    *string `json:"type,omitempty"`
	}
	JSON403 *struct {
		Message *string `json:"message,omitempty"`
		Success *bool   `json:"success,omitempty"`
		Type    *string `json:"type,omitempty"`
	}
	JSON404 *struct {
		Message *string `json:"message,omitempty"`
		Success *bool   `json:"success,omitempty"`
		Type    *string `json:"type,omitempty"`
	}
	JSON422 *struct {
		Message *string `json:"message,omitempty"`
		Success *bool   `json:"success,omitempty"`
		Type    *string `json:"type,omitempty"`
	}
	JSON429 *struct {
		Message *string `json:"message,omitempty"`
		Success *bool   `json:"success,omitempty"`
		Type    *string `json:"type,omitempty"`
	}
	JSON500 *struct {
		Message *string `json:"message,omitempty"`
		Success *bool   `json:"success,omitempty"`
		Type    *string `json:"type,omitempty"`
	}
	JSON502 *struct {
		Message *string `json:"message,omitempty"`
		Success *bool   `json:"success,omitempty"`
		Type    *string `json:"type,omitempty"`
	}
	JSON503 *struct {
		Message *string `json:"message,omitempty"`
		Success *bool   `json:"success,omitempty"`
		Type    *string `json:"type,omitempty"`
	}
	JSON504 *struct {
		Message *string `json:"message,omitempty"`
		Success *bool   `json:"success,omitempty"`
		Type    *string `json:"type,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r PutV1GroupsGroupIdRemoveUserResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutV1GroupsGroupIdRemoveUserResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetV1NotesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Data *[]struct {
			// AttachedEntities An array of attached entities associated with the note.
			AttachedEntities *[]struct {
				// EntityId The unique identifier for the attached entity.
				EntityId string `json:"entityId"`

				// EntityMetadata Additional metadata for the attached entity.
				EntityMetadata *map[string]interface{} `json:"entityMetadata,omitempty"`

				// EntityType The type of the attached entity, must be one of the predefined NoteEntityType values.
				EntityType GetV1Notes200DataAttachedEntitiesEntityType `json:"entityType"`
			} `json:"attachedEntities,omitempty"`

			// Body The main content of the note, must be between the specified minimum and maximum length.
			Body string `json:"body"`

			// CreatedAt The creation date of the note.
			CreatedAt time.Time `json:"createdAt"`

			// Id The unique identifier of the note.
			Id string `json:"id"`

			// Ranges An array of verse ranges associated with the note.
			Ranges *[]string `json:"ranges,omitempty"`

			// Source The source of the note.
			Source *string `json:"source,omitempty"`

			// UpdatedAt The last update date of the note.
			UpdatedAt time.Time `json:"updatedAt"`
		} `json:"data,omitempty"`
		Pagination *struct {
			EndCursor       *string `json:"endCursor,omitempty"`
			HasNextPage     *bool   `json:"hasNextPage,omitempty"`
			HasPreviousPage *bool   `json:"hasPreviousPage,omitempty"`
			StartCursor     *string `json:"startCursor,omitempty"`
		} `json:"pagination,omitempty"`
		Success *bool `json:"success,omitempty"`
	}
	JSON400 *struct {
		Message *string `json:"message,omitempty"`
		Success *bool   `json:"success,omitempty"`
		Type    *string `json:"type,omitempty"`
	}
	JSON401 *struct {
		Message *string `json:"message,omitempty"`
		Success *bool   `json:"success,omitempty"`
		Type    *string `json:"type,omitempty"`
	}
	JSON403 *struct {
		Message *string `json:"message,omitempty"`
		Success *bool   `json:"success,omitempty"`
		Type    *string `json:"type,omitempty"`
	}
	JSON404 *struct {
		Message *string `json:"message,omitempty"`
		Success *bool   `json:"success,omitempty"`
		Type    *string `json:"type,omitempty"`
	}
	JSON422 *struct {
		Message *string `json:"message,omitempty"`
		Success *bool   `json:"success,omitempty"`
		Type    *string `json:"type,omitempty"`
	}
	JSON429 *struct {
		Message *string `json:"message,omitempty"`
		Success *bool   `json:"success,omitempty"`
		Type    *string `json:"type,omitempty"`
	}
	JSON500 *struct {
		Message *string `json:"message,omitempty"`
		Success *bool   `json:"success,omitempty"`
		Type    *string `json:"type,omitempty"`
	}
	JSON502 *struct {
		Message *string `json:"message,omitempty"`
		Success *bool   `json:"success,omitempty"`
		Type    *string `json:"type,omitempty"`
	}
	JSON503 *struct {
		Message *string `json:"message,omitempty"`
		Success *bool   `json:"success,omitempty"`
		Type    *string `json:"type,omitempty"`
	}
	JSON504 *struct {
		Message *string `json:"message,omitempty"`
		Success *bool   `json:"success,omitempty"`
		Type    *string `json:"type,omitempty"`
	}
}
type GetV1Notes200DataAttachedEntitiesEntityType string

// Status returns HTTPResponse.Status
func (r GetV1NotesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetV1NotesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostV1NotesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Data *struct {
			// AttachedEntities An array of attached entities associated with the note.
			AttachedEntities *[]struct {
				// EntityId The unique identifier for the attached entity.
				EntityId string `json:"entityId"`

				// EntityMetadata Additional metadata for the attached entity.
				EntityMetadata *map[string]interface{} `json:"entityMetadata,omitempty"`

				// EntityType The type of the attached entity, must be one of the predefined NoteEntityType values.
				EntityType PostV1Notes200DataAttachedEntitiesEntityType `json:"entityType"`
			} `json:"attachedEntities,omitempty"`

			// Body The main content of the note, must be between the specified minimum and maximum length.
			Body string `json:"body"`

			// CreatedAt The creation date of the note.
			CreatedAt time.Time `json:"createdAt"`

			// Id The unique identifier of the note.
			Id string `json:"id"`

			// Ranges An array of verse ranges associated with the note.
			Ranges *[]string `json:"ranges,omitempty"`

			// Source The source of the note.
			Source *string `json:"source,omitempty"`

			// UpdatedAt The last update date of the note.
			UpdatedAt time.Time `json:"updatedAt"`
		} `json:"data,omitempty"`
		Success *bool `json:"success,omitempty"`
	}
	JSON400 *struct {
		Message *string `json:"message,omitempty"`
		Success *bool   `json:"success,omitempty"`
		Type    *string `json:"type,omitempty"`
	}
	JSON401 *struct {
		Message *string `json:"message,omitempty"`
		Success *bool   `json:"success,omitempty"`
		Type    *string `json:"type,omitempty"`
	}
	JSON403 *struct {
		Message *string `json:"message,omitempty"`
		Success *bool   `json:"success,omitempty"`
		Type    *string `json:"type,omitempty"`
	}
	JSON404 *struct {
		Message *string `json:"message,omitempty"`
		Success *bool   `json:"success,omitempty"`
		Type    *string `json:"type,omitempty"`
	}
	JSON422 *struct {
		Message *string `json:"message,omitempty"`
		Success *bool   `json:"success,omitempty"`
		Type    *string `json:"type,omitempty"`
	}
	JSON429 *struct {
		Message *string `json:"message,omitempty"`
		Success *bool   `json:"success,omitempty"`
		Type    *string `json:"type,omitempty"`
	}
	JSON500 *struct {
		Message *string `json:"message,omitempty"`
		Success *bool   `json:"success,omitempty"`
		Type    *string `json:"type,omitempty"`
	}
	JSON502 *struct {
		Message *string `json:"message,omitempty"`
		Success *bool   `json:"success,omitempty"`
		Type    *string `json:"type,omitempty"`
	}
	JSON503 *struct {
		Message *string `json:"message,omitempty"`
		Success *bool   `json:"success,omitempty"`
		Type    *string `json:"type,omitempty"`
	}
	JSON504 *struct {
		Message *string `json:"message,omitempty"`
		Success *bool   `json:"success,omitempty"`
		Type    *string `json:"type,omitempty"`
	}
}
type PostV1Notes200DataAttachedEntitiesEntityType string

// Status returns HTTPResponse.Status
func (r PostV1NotesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostV1NotesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetV1NotesByAttachedEntityResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Data *[]struct {
			// AttachedEntities An array of attached entities associated with the note.
			AttachedEntities *[]struct {
				// EntityId The unique identifier for the attached entity.
				EntityId string `json:"entityId"`

				// EntityMetadata Additional metadata for the attached entity.
				EntityMetadata *map[string]interface{} `json:"entityMetadata,omitempty"`

				// EntityType The type of the attached entity, must be one of the predefined NoteEntityType values.
				EntityType GetV1NotesByAttachedEntity200DataAttachedEntitiesEntityType `json:"entityType"`
			} `json:"attachedEntities,omitempty"`

			// Body The main content of the note, must be between the specified minimum and maximum length.
			Body string `json:"body"`

			// CreatedAt The creation date of the note.
			CreatedAt time.Time `json:"createdAt"`

			// Id The unique identifier of the note.
			Id string `json:"id"`

			// Ranges An array of verse ranges associated with the note.
			Ranges *[]string `json:"ranges,omitempty"`

			// Source The source of the note.
			Source *string `json:"source,omitempty"`

			// UpdatedAt The last update date of the note.
			UpdatedAt time.Time `json:"updatedAt"`
		} `json:"data,omitempty"`
		Success *bool `json:"success,omitempty"`
	}
	JSON400 *struct {
		Message *string `json:"message,omitempty"`
		Success *bool   `json:"success,omitempty"`
		Type    *string `json:"type,omitempty"`
	}
	JSON401 *struct {
		Message *string `json:"message,omitempty"`
		Success *bool   `json:"success,omitempty"`
		Type    *string `json:"type,omitempty"`
	}
	JSON403 *struct {
		Message *string `json:"message,omitempty"`
		Success *bool   `json:"success,omitempty"`
		Type    *string `json:"type,omitempty"`
	}
	JSON404 *struct {
		Message *string `json:"message,omitempty"`
		Success *bool   `json:"success,omitempty"`
		Type    *string `json:"type,omitempty"`
	}
	JSON422 *struct {
		Message *string `json:"message,omitempty"`
		Success *bool   `json:"success,omitempty"`
		Type    *string `json:"type,omitempty"`
	}
	JSON429 *struct {
		Message *string `json:"message,omitempty"`
		Success *bool   `json:"success,omitempty"`
		Type    *string `json:"type,omitempty"`
	}
	JSON500 *struct {
		Message *string `json:"message,omitempty"`
		Success *bool   `json:"success,omitempty"`
		Type    *string `json:"type,omitempty"`
	}
	JSON502 *struct {
		Message *string `json:"message,omitempty"`
		Success *bool   `json:"success,omitempty"`
		Type    *string `json:"type,omitempty"`
	}
	JSON503 *struct {
		Message *string `json:"message,omitempty"`
		Success *bool   `json:"success,omitempty"`
		Type    *string `json:"type,omitempty"`
	}
	JSON504 *struct {
		Message *string `json:"message,omitempty"`
		Success *bool   `json:"success,omitempty"`
		Type    *string `json:"type,omitempty"`
	}
}
type GetV1NotesByAttachedEntity200DataAttachedEntitiesEntityType string

// Status returns HTTPResponse.Status
func (r GetV1NotesByAttachedEntityResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetV1NotesByAttachedEntityResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetV1NotesByRangeResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Data *[]struct {
			// AttachedEntities An array of attached entities associated with the note.
			AttachedEntities *[]struct {
				// EntityId The unique identifier for the attached entity.
				EntityId string `json:"entityId"`

				// EntityMetadata Additional metadata for the attached entity.
				EntityMetadata *map[string]interface{} `json:"entityMetadata,omitempty"`

				// EntityType The type of the attached entity, must be one of the predefined NoteEntityType values.
				EntityType GetV1NotesByRange200DataAttachedEntitiesEntityType `json:"entityType"`
			} `json:"attachedEntities,omitempty"`

			// Body The main content of the note, must be between the specified minimum and maximum length.
			Body string `json:"body"`

			// CreatedAt The creation date of the note.
			CreatedAt time.Time `json:"createdAt"`

			// Id The unique identifier of the note.
			Id string `json:"id"`

			// Ranges An array of verse ranges associated with the note.
			Ranges *[]string `json:"ranges,omitempty"`

			// Source The source of the note.
			Source *string `json:"source,omitempty"`

			// UpdatedAt The last update date of the note.
			UpdatedAt time.Time `json:"updatedAt"`
		} `json:"data,omitempty"`
		Success *bool `json:"success,omitempty"`
	}
	JSON400 *struct {
		Message *string `json:"message,omitempty"`
		Success *bool   `json:"success,omitempty"`
		Type    *string `json:"type,omitempty"`
	}
	JSON401 *struct {
		Message *string `json:"message,omitempty"`
		Success *bool   `json:"success,omitempty"`
		Type    *string `json:"type,omitempty"`
	}
	JSON403 *struct {
		Message *string `json:"message,omitempty"`
		Success *bool   `json:"success,omitempty"`
		Type    *string `json:"type,omitempty"`
	}
	JSON404 *struct {
		Message *string `json:"message,omitempty"`
		Success *bool   `json:"success,omitempty"`
		Type    *string `json:"type,omitempty"`
	}
	JSON422 *struct {
		Message *string `json:"message,omitempty"`
		Success *bool   `json:"success,omitempty"`
		Type    *string `json:"type,omitempty"`
	}
	JSON429 *struct {
		Message *string `json:"message,omitempty"`
		Success *bool   `json:"success,omitempty"`
		Type    *string `json:"type,omitempty"`
	}
	JSON500 *struct {
		Message *string `json:"message,omitempty"`
		Success *bool   `json:"success,omitempty"`
		Type    *string `json:"type,omitempty"`
	}
	JSON502 *struct {
		Message *string `json:"message,omitempty"`
		Success *bool   `json:"success,omitempty"`
		Type    *string `json:"type,omitempty"`
	}
	JSON503 *struct {
		Message *string `json:"message,omitempty"`
		Success *bool   `json:"success,omitempty"`
		Type    *string `json:"type,omitempty"`
	}
	JSON504 *struct {
		Message *string `json:"message,omitempty"`
		Success *bool   `json:"success,omitempty"`
		Type    *string `json:"type,omitempty"`
	}
}
type GetV1NotesByRange200DataAttachedEntitiesEntityType string

// Status returns HTTPResponse.Status
func (r GetV1NotesByRangeResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetV1NotesByRangeResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetV1NotesByVerseVerseKeyResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Data *[]struct {
			// AttachedEntities An array of attached entities associated with the note.
			AttachedEntities *[]struct {
				// EntityId The unique identifier for the attached entity.
				EntityId string `json:"entityId"`

				// EntityMetadata Additional metadata for the attached entity.
				EntityMetadata *map[string]interface{} `json:"entityMetadata,omitempty"`

				// EntityType The type of the attached entity, must be one of the predefined NoteEntityType values.
				EntityType GetV1NotesByVerseVerseKey200DataAttachedEntitiesEntityType `json:"entityType"`
			} `json:"attachedEntities,omitempty"`

			// Body The main content of the note, must be between the specified minimum and maximum length.
			Body string `json:"body"`

			// CreatedAt The creation date of the note.
			CreatedAt time.Time `json:"createdAt"`

			// Id The unique identifier of the note.
			Id string `json:"id"`

			// Ranges An array of verse ranges associated with the note.
			Ranges *[]string `json:"ranges,omitempty"`

			// Source The source of the note.
			Source *string `json:"source,omitempty"`

			// UpdatedAt The last update date of the note.
			UpdatedAt time.Time `json:"updatedAt"`
		} `json:"data,omitempty"`
		Pagination *struct {
			EndCursor       *string `json:"endCursor,omitempty"`
			HasNextPage     *bool   `json:"hasNextPage,omitempty"`
			HasPreviousPage *bool   `json:"hasPreviousPage,omitempty"`
			StartCursor     *string `json:"startCursor,omitempty"`
		} `json:"pagination,omitempty"`
		Success *bool `json:"success,omitempty"`
	}
	JSON400 *struct {
		Message *string `json:"message,omitempty"`
		Success *bool   `json:"success,omitempty"`
		Type    *string `json:"type,omitempty"`
	}
	JSON401 *struct {
		Message *string `json:"message,omitempty"`
		Success *bool   `json:"success,omitempty"`
		Type    *string `json:"type,omitempty"`
	}
	JSON403 *struct {
		Message *string `json:"message,omitempty"`
		Success *bool   `json:"success,omitempty"`
		Type    *string `json:"type,omitempty"`
	}
	JSON404 *struct {
		Message *string `json:"message,omitempty"`
		Success *bool   `json:"success,omitempty"`
		Type    *string `json:"type,omitempty"`
	}
	JSON422 *struct {
		Message *string `json:"message,omitempty"`
		Success *bool   `json:"success,omitempty"`
		Type    *string `json:"type,omitempty"`
	}
	JSON429 *struct {
		Message *string `json:"message,omitempty"`
		Success *bool   `json:"success,omitempty"`
		Type    *string `json:"type,omitempty"`
	}
	JSON500 *struct {
		Message *string `json:"message,omitempty"`
		Success *bool   `json:"success,omitempty"`
		Type    *string `json:"type,omitempty"`
	}
	JSON502 *struct {
		Message *string `json:"message,omitempty"`
		Success *bool   `json:"success,omitempty"`
		Type    *string `json:"type,omitempty"`
	}
	JSON503 *struct {
		Message *string `json:"message,omitempty"`
		Success *bool   `json:"success,omitempty"`
		Type    *string `json:"type,omitempty"`
	}
	JSON504 *struct {
		Message *string `json:"message,omitempty"`
		Success *bool   `json:"success,omitempty"`
		Type    *string `json:"type,omitempty"`
	}
}
type GetV1NotesByVerseVerseKey200DataAttachedEntitiesEntityType string

// Status returns HTTPResponse.Status
func (r GetV1NotesByVerseVerseKeyResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetV1NotesByVerseVerseKeyResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetV1NotesCountWithinRangeResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		// Data A map of verse keys to note counts, where each key is a verse key and each value is an integer count of notes.
		Data    *map[string]int `json:"data,omitempty"`
		Success *bool           `json:"success,omitempty"`
	}
	JSON400 *struct {
		Message *string `json:"message,omitempty"`
		Success *bool   `json:"success,omitempty"`
		Type    *string `json:"type,omitempty"`
	}
	JSON401 *struct {
		Message *string `json:"message,omitempty"`
		Success *bool   `json:"success,omitempty"`
		Type    *string `json:"type,omitempty"`
	}
	JSON403 *struct {
		Message *string `json:"message,omitempty"`
		Success *bool   `json:"success,omitempty"`
		Type    *string `json:"type,omitempty"`
	}
	JSON404 *struct {
		Message *string `json:"message,omitempty"`
		Success *bool   `json:"success,omitempty"`
		Type    *string `json:"type,omitempty"`
	}
	JSON422 *struct {
		Message *string `json:"message,omitempty"`
		Success *bool   `json:"success,omitempty"`
		Type    *string `json:"type,omitempty"`
	}
	JSON429 *struct {
		Message *string `json:"message,omitempty"`
		Success *bool   `json:"success,omitempty"`
		Type    *string `json:"type,omitempty"`
	}
	JSON500 *struct {
		Message *string `json:"message,omitempty"`
		Success *bool   `json:"success,omitempty"`
		Type    *string `json:"type,omitempty"`
	}
	JSON502 *struct {
		Message *string `json:"message,omitempty"`
		Success *bool   `json:"success,omitempty"`
		Type    *string `json:"type,omitempty"`
	}
	JSON503 *struct {
		Message *string `json:"message,omitempty"`
		Success *bool   `json:"success,omitempty"`
		Type    *string `json:"type,omitempty"`
	}
	JSON504 *struct {
		Message *string `json:"message,omitempty"`
		Success *bool   `json:"success,omitempty"`
		Type    *string `json:"type,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r GetV1NotesCountWithinRangeResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetV1NotesCountWithinRangeResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteV1NotesNoteIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Data *struct {
			Success *bool `json:"success,omitempty"`
		} `json:"data,omitempty"`
		Success *bool `json:"success,omitempty"`
	}
	JSON400 *struct {
		Message *string `json:"message,omitempty"`
		Success *bool   `json:"success,omitempty"`
		Type    *string `json:"type,omitempty"`
	}
	JSON401 *struct {
		Message *string `json:"message,omitempty"`
		Success *bool   `json:"success,omitempty"`
		Type    *string `json:"type,omitempty"`
	}
	JSON403 *struct {
		Message *string `json:"message,omitempty"`
		Success *bool   `json:"success,omitempty"`
		Type    *string `json:"type,omitempty"`
	}
	JSON404 *struct {
		Message *string `json:"message,omitempty"`
		Success *bool   `json:"success,omitempty"`
		Type    *string `json:"type,omitempty"`
	}
	JSON422 *struct {
		Message *string `json:"message,omitempty"`
		Success *bool   `json:"success,omitempty"`
		Type    *string `json:"type,omitempty"`
	}
	JSON429 *struct {
		Message *string `json:"message,omitempty"`
		Success *bool   `json:"success,omitempty"`
		Type    *string `json:"type,omitempty"`
	}
	JSON500 *struct {
		Message *string `json:"message,omitempty"`
		Success *bool   `json:"success,omitempty"`
		Type    *string `json:"type,omitempty"`
	}
	JSON502 *struct {
		Message *string `json:"message,omitempty"`
		Success *bool   `json:"success,omitempty"`
		Type    *string `json:"type,omitempty"`
	}
	JSON503 *struct {
		Message *string `json:"message,omitempty"`
		Success *bool   `json:"success,omitempty"`
		Type    *string `json:"type,omitempty"`
	}
	JSON504 *struct {
		Message *string `json:"message,omitempty"`
		Success *bool   `json:"success,omitempty"`
		Type    *string `json:"type,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r DeleteV1NotesNoteIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteV1NotesNoteIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetV1NotesNoteIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Data *struct {
			// AttachedEntities An array of attached entities associated with the note.
			AttachedEntities *[]struct {
				// EntityId The unique identifier for the attached entity.
				EntityId string `json:"entityId"`

				// EntityMetadata Additional metadata for the attached entity.
				EntityMetadata *map[string]interface{} `json:"entityMetadata,omitempty"`

				// EntityType The type of the attached entity, must be one of the predefined NoteEntityType values.
				EntityType GetV1NotesNoteId200DataAttachedEntitiesEntityType `json:"entityType"`
			} `json:"attachedEntities,omitempty"`

			// Body The main content of the note, must be between the specified minimum and maximum length.
			Body string `json:"body"`

			// CreatedAt The creation date of the note.
			CreatedAt time.Time `json:"createdAt"`

			// Id The unique identifier of the note.
			Id string `json:"id"`

			// Ranges An array of verse ranges associated with the note.
			Ranges *[]string `json:"ranges,omitempty"`

			// Source The source of the note.
			Source *string `json:"source,omitempty"`

			// UpdatedAt The last update date of the note.
			UpdatedAt time.Time `json:"updatedAt"`
		} `json:"data,omitempty"`
		Success *bool `json:"success,omitempty"`
	}
	JSON400 *struct {
		Message *string `json:"message,omitempty"`
		Success *bool   `json:"success,omitempty"`
		Type    *string `json:"type,omitempty"`
	}
	JSON401 *struct {
		Message *string `json:"message,omitempty"`
		Success *bool   `json:"success,omitempty"`
		Type    *string `json:"type,omitempty"`
	}
	JSON403 *struct {
		Message *string `json:"message,omitempty"`
		Success *bool   `json:"success,omitempty"`
		Type    *string `json:"type,omitempty"`
	}
	JSON404 *struct {
		Message *string `json:"message,omitempty"`
		Success *bool   `json:"success,omitempty"`
		Type    *string `json:"type,omitempty"`
	}
	JSON422 *struct {
		Message *string `json:"message,omitempty"`
		Success *bool   `json:"success,omitempty"`
		Type    *string `json:"type,omitempty"`
	}
	JSON429 *struct {
		Message *string `json:"message,omitempty"`
		Success *bool   `json:"success,omitempty"`
		Type    *string `json:"type,omitempty"`
	}
	JSON500 *struct {
		Message *string `json:"message,omitempty"`
		Success *bool   `json:"success,omitempty"`
		Type    *string `json:"type,omitempty"`
	}
	JSON502 *struct {
		Message *string `json:"message,omitempty"`
		Success *bool   `json:"success,omitempty"`
		Type    *string `json:"type,omitempty"`
	}
	JSON503 *struct {
		Message *string `json:"message,omitempty"`
		Success *bool   `json:"success,omitempty"`
		Type    *string `json:"type,omitempty"`
	}
	JSON504 *struct {
		Message *string `json:"message,omitempty"`
		Success *bool   `json:"success,omitempty"`
		Type    *string `json:"type,omitempty"`
	}
}
type GetV1NotesNoteId200DataAttachedEntitiesEntityType string

// Status returns HTTPResponse.Status
func (r GetV1NotesNoteIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetV1NotesNoteIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PatchV1NotesNoteIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Data *struct {
			// AttachedEntities An array of attached entities associated with the note.
			AttachedEntities *[]struct {
				// EntityId The unique identifier for the attached entity.
				EntityId string `json:"entityId"`

				// EntityMetadata Additional metadata for the attached entity.
				EntityMetadata *map[string]interface{} `json:"entityMetadata,omitempty"`

				// EntityType The type of the attached entity, must be one of the predefined NoteEntityType values.
				EntityType PatchV1NotesNoteId200DataAttachedEntitiesEntityType `json:"entityType"`
			} `json:"attachedEntities,omitempty"`

			// Body The main content of the note, must be between the specified minimum and maximum length.
			Body string `json:"body"`

			// CreatedAt The creation date of the note.
			CreatedAt time.Time `json:"createdAt"`

			// Id The unique identifier of the note.
			Id string `json:"id"`

			// Ranges An array of verse ranges associated with the note.
			Ranges *[]string `json:"ranges,omitempty"`

			// Source The source of the note.
			Source *string `json:"source,omitempty"`

			// UpdatedAt The last update date of the note.
			UpdatedAt time.Time `json:"updatedAt"`
		} `json:"data,omitempty"`
		Success *bool `json:"success,omitempty"`
	}
	JSON400 *struct {
		Message *string `json:"message,omitempty"`
		Success *bool   `json:"success,omitempty"`
		Type    *string `json:"type,omitempty"`
	}
	JSON401 *struct {
		Message *string `json:"message,omitempty"`
		Success *bool   `json:"success,omitempty"`
		Type    *string `json:"type,omitempty"`
	}
	JSON403 *struct {
		Message *string `json:"message,omitempty"`
		Success *bool   `json:"success,omitempty"`
		Type    *string `json:"type,omitempty"`
	}
	JSON404 *struct {
		Message *string `json:"message,omitempty"`
		Success *bool   `json:"success,omitempty"`
		Type    *string `json:"type,omitempty"`
	}
	JSON422 *struct {
		Message *string `json:"message,omitempty"`
		Success *bool   `json:"success,omitempty"`
		Type    *string `json:"type,omitempty"`
	}
	JSON429 *struct {
		Message *string `json:"message,omitempty"`
		Success *bool   `json:"success,omitempty"`
		Type    *string `json:"type,omitempty"`
	}
	JSON500 *struct {
		Message *string `json:"message,omitempty"`
		Success *bool   `json:"success,omitempty"`
		Type    *string `json:"type,omitempty"`
	}
	JSON502 *struct {
		Message *string `json:"message,omitempty"`
		Success *bool   `json:"success,omitempty"`
		Type    *string `json:"type,omitempty"`
	}
	JSON503 *struct {
		Message *string `json:"message,omitempty"`
		Success *bool   `json:"success,omitempty"`
		Type    *string `json:"type,omitempty"`
	}
	JSON504 *struct {
		Message *string `json:"message,omitempty"`
		Success *bool   `json:"success,omitempty"`
		Type    *string `json:"type,omitempty"`
	}
}
type PatchV1NotesNoteId200DataAttachedEntitiesEntityType string

// Status returns HTTPResponse.Status
func (r PatchV1NotesNoteIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PatchV1NotesNoteIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostV1NotesNoteIdPublishResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		// Data Response object indicating the success of the note publishing operation and the optional post ID if successful.
		Data *struct {
			PostId  *float32 `json:"postId,omitempty"`
			Success bool     `json:"success"`
		} `json:"data,omitempty"`
		Success *bool `json:"success,omitempty"`
	}
	JSON400 *struct {
		Message *string `json:"message,omitempty"`
		Success *bool   `json:"success,omitempty"`
		Type    *string `json:"type,omitempty"`
	}
	JSON401 *struct {
		Message *string `json:"message,omitempty"`
		Success *bool   `json:"success,omitempty"`
		Type    *string `json:"type,omitempty"`
	}
	JSON403 *struct {
		Message *string `json:"message,omitempty"`
		Success *bool   `json:"success,omitempty"`
		Type    *string `json:"type,omitempty"`
	}
	JSON404 *struct {
		Message *string `json:"message,omitempty"`
		Success *bool   `json:"success,omitempty"`
		Type    *string `json:"type,omitempty"`
	}
	JSON422 *struct {
		Message *string `json:"message,omitempty"`
		Success *bool   `json:"success,omitempty"`
		Type    *string `json:"type,omitempty"`
	}
	JSON429 *struct {
		Message *string `json:"message,omitempty"`
		Success *bool   `json:"success,omitempty"`
		Type    *string `json:"type,omitempty"`
	}
	JSON500 *struct {
		Message *string `json:"message,omitempty"`
		Success *bool   `json:"success,omitempty"`
		Type    *string `json:"type,omitempty"`
	}
	JSON502 *struct {
		Message *string `json:"message,omitempty"`
		Success *bool   `json:"success,omitempty"`
		Type    *string `json:"type,omitempty"`
	}
	JSON503 *struct {
		Message *string `json:"message,omitempty"`
		Success *bool   `json:"success,omitempty"`
		Type    *string `json:"type,omitempty"`
	}
	JSON504 *struct {
		Message *string `json:"message,omitempty"`
		Success *bool   `json:"success,omitempty"`
		Type    *string `json:"type,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r PostV1NotesNoteIdPublishResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostV1NotesNoteIdPublishResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetV1PostsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Data *struct {
			// Pages Number of pages matching the queried posts
			Pages *int `json:"pages,omitempty"`

			// Posts List of posts
			Posts *[]Post `json:"posts,omitempty"`
		} `json:"data,omitempty"`
		Success *bool `json:"success,omitempty"`
	}
	JSON400 *struct {
		Message *string `json:"message,omitempty"`
		Success *bool   `json:"success,omitempty"`
		Type    *string `json:"type,omitempty"`
	}
	JSON401 *struct {
		Message *string `json:"message,omitempty"`
		Success *bool   `json:"success,omitempty"`
		Type    *string `json:"type,omitempty"`
	}
	JSON403 *struct {
		Message *string `json:"message,omitempty"`
		Success *bool   `json:"success,omitempty"`
		Type    *string `json:"type,omitempty"`
	}
	JSON404 *struct {
		Message *string `json:"message,omitempty"`
		Success *bool   `json:"success,omitempty"`
		Type    *string `json:"type,omitempty"`
	}
	JSON422 *struct {
		Message *string `json:"message,omitempty"`
		Success *bool   `json:"success,omitempty"`
		Type    *string `json:"type,omitempty"`
	}
	JSON429 *struct {
		Message *string `json:"message,omitempty"`
		Success *bool   `json:"success,omitempty"`
		Type    *string `json:"type,omitempty"`
	}
	JSON500 *struct {
		Message *string `json:"message,omitempty"`
		Success *bool   `json:"success,omitempty"`
		Type    *string `json:"type,omitempty"`
	}
	JSON502 *struct {
		Message *string `json:"message,omitempty"`
		Success *bool   `json:"success,omitempty"`
		Type    *string `json:"type,omitempty"`
	}
	JSON503 *struct {
		Message *string `json:"message,omitempty"`
		Success *bool   `json:"success,omitempty"`
		Type    *string `json:"type,omitempty"`
	}
	JSON504 *struct {
		Message *string `json:"message,omitempty"`
		Success *bool   `json:"success,omitempty"`
		Type    *string `json:"type,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r GetV1PostsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetV1PostsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostV1PostsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Data *struct {
			Message interface{} `json:"message,omitempty"`
			PostId  interface{} `json:"postId,omitempty"`
		} `json:"data,omitempty"`
		Success *bool `json:"success,omitempty"`
	}
	JSON400 *struct {
		Message *string `json:"message,omitempty"`
		Success *bool   `json:"success,omitempty"`
		Type    *string `json:"type,omitempty"`
	}
	JSON401 *struct {
		Message *string `json:"message,omitempty"`
		Success *bool   `json:"success,omitempty"`
		Type    *string `json:"type,omitempty"`
	}
	JSON403 *struct {
		Message *string `json:"message,omitempty"`
		Success *bool   `json:"success,omitempty"`
		Type    *string `json:"type,omitempty"`
	}
	JSON404 *struct {
		Message *string `json:"message,omitempty"`
		Success *bool   `json:"success,omitempty"`
		Type    *string `json:"type,omitempty"`
	}
	JSON422 *struct {
		Message *string `json:"message,omitempty"`
		Success *bool   `json:"success,omitempty"`
		Type    *string `json:"type,omitempty"`
	}
	JSON429 *struct {
		Message *string `json:"message,omitempty"`
		Success *bool   `json:"success,omitempty"`
		Type    *string `json:"type,omitempty"`
	}
	JSON500 *struct {
		Message *string `json:"message,omitempty"`
		Success *bool   `json:"success,omitempty"`
		Type    *string `json:"type,omitempty"`
	}
	JSON502 *struct {
		Message *string `json:"message,omitempty"`
		Success *bool   `json:"success,omitempty"`
		Type    *string `json:"type,omitempty"`
	}
	JSON503 *struct {
		Message *string `json:"message,omitempty"`
		Success *bool   `json:"success,omitempty"`
		Type    *string `json:"type,omitempty"`
	}
	JSON504 *struct {
		Message *string `json:"message,omitempty"`
		Success *bool   `json:"success,omitempty"`
		Type    *string `json:"type,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r PostV1PostsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostV1PostsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostV1PostsReportPostIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Data *struct {
			Message interface{} `json:"message,omitempty"`
		} `json:"data,omitempty"`
		Success *bool `json:"success,omitempty"`
	}
	JSON400 *struct {
		Message *string `json:"message,omitempty"`
		Success *bool   `json:"success,omitempty"`
		Type    *string `json:"type,omitempty"`
	}
	JSON401 *struct {
		Message *string `json:"message,omitempty"`
		Success *bool   `json:"success,omitempty"`
		Type    *string `json:"type,omitempty"`
	}
	JSON403 *struct {
		Message *string `json:"message,omitempty"`
		Success *bool   `json:"success,omitempty"`
		Type    *string `json:"type,omitempty"`
	}
	JSON404 *struct {
		Message *string `json:"message,omitempty"`
		Success *bool   `json:"success,omitempty"`
		Type    *string `json:"type,omitempty"`
	}
	JSON422 *struct {
		Message *string `json:"message,omitempty"`
		Success *bool   `json:"success,omitempty"`
		Type    *string `json:"type,omitempty"`
	}
	JSON429 *struct {
		Message *string `json:"message,omitempty"`
		Success *bool   `json:"success,omitempty"`
		Type    *string `json:"type,omitempty"`
	}
	JSON500 *struct {
		Message *string `json:"message,omitempty"`
		Success *bool   `json:"success,omitempty"`
		Type    *string `json:"type,omitempty"`
	}
	JSON502 *struct {
		Message *string `json:"message,omitempty"`
		Success *bool   `json:"success,omitempty"`
		Type    *string `json:"type,omitempty"`
	}
	JSON503 *struct {
		Message *string `json:"message,omitempty"`
		Success *bool   `json:"success,omitempty"`
		Type    *string `json:"type,omitempty"`
	}
	JSON504 *struct {
		Message *string `json:"message,omitempty"`
		Success *bool   `json:"success,omitempty"`
		Type    *string `json:"type,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r PostV1PostsReportPostIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostV1PostsReportPostIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostV1PostsToggleLikePostIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Data *struct {
			Liked *bool `json:"liked,omitempty"`
		} `json:"data,omitempty"`
		Success *bool `json:"success,omitempty"`
	}
	JSON400 *struct {
		Message *string `json:"message,omitempty"`
		Success *bool   `json:"success,omitempty"`
		Type    *string `json:"type,omitempty"`
	}
	JSON401 *struct {
		Message *string `json:"message,omitempty"`
		Success *bool   `json:"success,omitempty"`
		Type    *string `json:"type,omitempty"`
	}
	JSON403 *struct {
		Message *string `json:"message,omitempty"`
		Success *bool   `json:"success,omitempty"`
		Type    *string `json:"type,omitempty"`
	}
	JSON404 *struct {
		Message *string `json:"message,omitempty"`
		Success *bool   `json:"success,omitempty"`
		Type    *string `json:"type,omitempty"`
	}
	JSON422 *struct {
		Message *string `json:"message,omitempty"`
		Success *bool   `json:"success,omitempty"`
		Type    *string `json:"type,omitempty"`
	}
	JSON429 *struct {
		Message *string `json:"message,omitempty"`
		Success *bool   `json:"success,omitempty"`
		Type    *string `json:"type,omitempty"`
	}
	JSON500 *struct {
		Message *string `json:"message,omitempty"`
		Success *bool   `json:"success,omitempty"`
		Type    *string `json:"type,omitempty"`
	}
	JSON502 *struct {
		Message *string `json:"message,omitempty"`
		Success *bool   `json:"success,omitempty"`
		Type    *string `json:"type,omitempty"`
	}
	JSON503 *struct {
		Message *string `json:"message,omitempty"`
		Success *bool   `json:"success,omitempty"`
		Type    *string `json:"type,omitempty"`
	}
	JSON504 *struct {
		Message *string `json:"message,omitempty"`
		Success *bool   `json:"success,omitempty"`
		Type    *string `json:"type,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r PostV1PostsToggleLikePostIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostV1PostsToggleLikePostIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostV1PostsToggleSavePostIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Data *struct {
			Saved *bool `json:"saved,omitempty"`
		} `json:"data,omitempty"`
		Success *bool `json:"success,omitempty"`
	}
	JSON400 *struct {
		Message *string `json:"message,omitempty"`
		Success *bool   `json:"success,omitempty"`
		Type    *string `json:"type,omitempty"`
	}
	JSON401 *struct {
		Message *string `json:"message,omitempty"`
		Success *bool   `json:"success,omitempty"`
		Type    *string `json:"type,omitempty"`
	}
	JSON403 *struct {
		Message *string `json:"message,omitempty"`
		Success *bool   `json:"success,omitempty"`
		Type    *string `json:"type,omitempty"`
	}
	JSON404 *struct {
		Message *string `json:"message,omitempty"`
		Success *bool   `json:"success,omitempty"`
		Type    *string `json:"type,omitempty"`
	}
	JSON422 *struct {
		Message *string `json:"message,omitempty"`
		Success *bool   `json:"success,omitempty"`
		Type    *string `json:"type,omitempty"`
	}
	JSON429 *struct {
		Message *string `json:"message,omitempty"`
		Success *bool   `json:"success,omitempty"`
		Type    *string `json:"type,omitempty"`
	}
	JSON500 *struct {
		Message *string `json:"message,omitempty"`
		Success *bool   `json:"success,omitempty"`
		Type    *string `json:"type,omitempty"`
	}
	JSON502 *struct {
		Message *string `json:"message,omitempty"`
		Success *bool   `json:"success,omitempty"`
		Type    *string `json:"type,omitempty"`
	}
	JSON503 *struct {
		Message *string `json:"message,omitempty"`
		Success *bool   `json:"success,omitempty"`
		Type    *string `json:"type,omitempty"`
	}
	JSON504 *struct {
		Message *string `json:"message,omitempty"`
		Success *bool   `json:"success,omitempty"`
		Type    *string `json:"type,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r PostV1PostsToggleSavePostIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostV1PostsToggleSavePostIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostV1PostsViewPostIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Data *struct {
			Success *bool `json:"success,omitempty"`
		} `json:"data,omitempty"`
		Success *bool `json:"success,omitempty"`
	}
	JSON400 *struct {
		Message *string `json:"message,omitempty"`
		Success *bool   `json:"success,omitempty"`
		Type    *string `json:"type,omitempty"`
	}
	JSON401 *struct {
		Message *string `json:"message,omitempty"`
		Success *bool   `json:"success,omitempty"`
		Type    *string `json:"type,omitempty"`
	}
	JSON403 *struct {
		Message *string `json:"message,omitempty"`
		Success *bool   `json:"success,omitempty"`
		Type    *string `json:"type,omitempty"`
	}
	JSON404 *struct {
		Message *string `json:"message,omitempty"`
		Success *bool   `json:"success,omitempty"`
		Type    *string `json:"type,omitempty"`
	}
	JSON422 *struct {
		Message *string `json:"message,omitempty"`
		Success *bool   `json:"success,omitempty"`
		Type    *string `json:"type,omitempty"`
	}
	JSON429 *struct {
		Message *string `json:"message,omitempty"`
		Success *bool   `json:"success,omitempty"`
		Type    *string `json:"type,omitempty"`
	}
	JSON500 *struct {
		Message *string `json:"message,omitempty"`
		Success *bool   `json:"success,omitempty"`
		Type    *string `json:"type,omitempty"`
	}
	JSON502 *struct {
		Message *string `json:"message,omitempty"`
		Success *bool   `json:"success,omitempty"`
		Type    *string `json:"type,omitempty"`
	}
	JSON503 *struct {
		Message *string `json:"message,omitempty"`
		Success *bool   `json:"success,omitempty"`
		Type    *string `json:"type,omitempty"`
	}
	JSON504 *struct {
		Message *string `json:"message,omitempty"`
		Success *bool   `json:"success,omitempty"`
		Type    *string `json:"type,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r PostV1PostsViewPostIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostV1PostsViewPostIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteV1PostsPostIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Data *struct {
			Message interface{} `json:"message,omitempty"`
		} `json:"data,omitempty"`
		Success *bool `json:"success,omitempty"`
	}
	JSON400 *struct {
		Message *string `json:"message,omitempty"`
		Success *bool   `json:"success,omitempty"`
		Type    *string `json:"type,omitempty"`
	}
	JSON401 *struct {
		Message *string `json:"message,omitempty"`
		Success *bool   `json:"success,omitempty"`
		Type    *string `json:"type,omitempty"`
	}
	JSON403 *struct {
		Message *string `json:"message,omitempty"`
		Success *bool   `json:"success,omitempty"`
		Type    *string `json:"type,omitempty"`
	}
	JSON404 *struct {
		Message *string `json:"message,omitempty"`
		Success *bool   `json:"success,omitempty"`
		Type    *string `json:"type,omitempty"`
	}
	JSON422 *struct {
		Message *string `json:"message,omitempty"`
		Success *bool   `json:"success,omitempty"`
		Type    *string `json:"type,omitempty"`
	}
	JSON429 *struct {
		Message *string `json:"message,omitempty"`
		Success *bool   `json:"success,omitempty"`
		Type    *string `json:"type,omitempty"`
	}
	JSON500 *struct {
		Message *string `json:"message,omitempty"`
		Success *bool   `json:"success,omitempty"`
		Type    *string `json:"type,omitempty"`
	}
	JSON502 *struct {
		Message *string `json:"message,omitempty"`
		Success *bool   `json:"success,omitempty"`
		Type    *string `json:"type,omitempty"`
	}
	JSON503 *struct {
		Message *string `json:"message,omitempty"`
		Success *bool   `json:"success,omitempty"`
		Type    *string `json:"type,omitempty"`
	}
	JSON504 *struct {
		Message *string `json:"message,omitempty"`
		Success *bool   `json:"success,omitempty"`
		Type    *string `json:"type,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r DeleteV1PostsPostIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteV1PostsPostIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetV1PostsPostIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Data    *Post `json:"data,omitempty"`
		Success *bool `json:"success,omitempty"`
	}
	JSON400 *struct {
		Message *string `json:"message,omitempty"`
		Success *bool   `json:"success,omitempty"`
		Type    *string `json:"type,omitempty"`
	}
	JSON401 *struct {
		Message *string `json:"message,omitempty"`
		Success *bool   `json:"success,omitempty"`
		Type    *string `json:"type,omitempty"`
	}
	JSON403 *struct {
		Message *string `json:"message,omitempty"`
		Success *bool   `json:"success,omitempty"`
		Type    *string `json:"type,omitempty"`
	}
	JSON404 *struct {
		Message *string `json:"message,omitempty"`
		Success *bool   `json:"success,omitempty"`
		Type    *string `json:"type,omitempty"`
	}
	JSON422 *struct {
		Message *string `json:"message,omitempty"`
		Success *bool   `json:"success,omitempty"`
		Type    *string `json:"type,omitempty"`
	}
	JSON429 *struct {
		Message *string `json:"message,omitempty"`
		Success *bool   `json:"success,omitempty"`
		Type    *string `json:"type,omitempty"`
	}
	JSON500 *struct {
		Message *string `json:"message,omitempty"`
		Success *bool   `json:"success,omitempty"`
		Type    *string `json:"type,omitempty"`
	}
	JSON502 *struct {
		Message *string `json:"message,omitempty"`
		Success *bool   `json:"success,omitempty"`
		Type    *string `json:"type,omitempty"`
	}
	JSON503 *struct {
		Message *string `json:"message,omitempty"`
		Success *bool   `json:"success,omitempty"`
		Type    *string `json:"type,omitempty"`
	}
	JSON504 *struct {
		Message *string `json:"message,omitempty"`
		Success *bool   `json:"success,omitempty"`
		Type    *string `json:"type,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r GetV1PostsPostIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetV1PostsPostIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutV1PostsPostIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Data *struct {
			Message interface{} `json:"message,omitempty"`
		} `json:"data,omitempty"`
		Success *bool `json:"success,omitempty"`
	}
	JSON400 *struct {
		Message *string `json:"message,omitempty"`
		Success *bool   `json:"success,omitempty"`
		Type    *string `json:"type,omitempty"`
	}
	JSON401 *struct {
		Message *string `json:"message,omitempty"`
		Success *bool   `json:"success,omitempty"`
		Type    *string `json:"type,omitempty"`
	}
	JSON403 *struct {
		Message *string `json:"message,omitempty"`
		Success *bool   `json:"success,omitempty"`
		Type    *string `json:"type,omitempty"`
	}
	JSON404 *struct {
		Message *string `json:"message,omitempty"`
		Success *bool   `json:"success,omitempty"`
		Type    *string `json:"type,omitempty"`
	}
	JSON422 *struct {
		Message *string `json:"message,omitempty"`
		Success *bool   `json:"success,omitempty"`
		Type    *string `json:"type,omitempty"`
	}
	JSON429 *struct {
		Message *string `json:"message,omitempty"`
		Success *bool   `json:"success,omitempty"`
		Type    *string `json:"type,omitempty"`
	}
	JSON500 *struct {
		Message *string `json:"message,omitempty"`
		Success *bool   `json:"success,omitempty"`
		Type    *string `json:"type,omitempty"`
	}
	JSON502 *struct {
		Message *string `json:"message,omitempty"`
		Success *bool   `json:"success,omitempty"`
		Type    *string `json:"type,omitempty"`
	}
	JSON503 *struct {
		Message *string `json:"message,omitempty"`
		Success *bool   `json:"success,omitempty"`
		Type    *string `json:"type,omitempty"`
	}
	JSON504 *struct {
		Message *string `json:"message,omitempty"`
		Success *bool   `json:"success,omitempty"`
		Type    *string `json:"type,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r PutV1PostsPostIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutV1PostsPostIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetV1PostsPostIdCommentsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Data *struct {
			// Comments List of comments that belong to the post.
			Comments *[]Comment `json:"comments,omitempty"`
		} `json:"data,omitempty"`
		Success *bool `json:"success,omitempty"`
	}
	JSON400 *struct {
		Message *string `json:"message,omitempty"`
		Success *bool   `json:"success,omitempty"`
		Type    *string `json:"type,omitempty"`
	}
	JSON401 *struct {
		Message *string `json:"message,omitempty"`
		Success *bool   `json:"success,omitempty"`
		Type    *string `json:"type,omitempty"`
	}
	JSON403 *struct {
		Message *string `json:"message,omitempty"`
		Success *bool   `json:"success,omitempty"`
		Type    *string `json:"type,omitempty"`
	}
	JSON404 *struct {
		Message *string `json:"message,omitempty"`
		Success *bool   `json:"success,omitempty"`
		Type    *string `json:"type,omitempty"`
	}
	JSON422 *struct {
		Message *string `json:"message,omitempty"`
		Success *bool   `json:"success,omitempty"`
		Type    *string `json:"type,omitempty"`
	}
	JSON429 *struct {
		Message *string `json:"message,omitempty"`
		Success *bool   `json:"success,omitempty"`
		Type    *string `json:"type,omitempty"`
	}
	JSON500 *struct {
		Message *string `json:"message,omitempty"`
		Success *bool   `json:"success,omitempty"`
		Type    *string `json:"type,omitempty"`
	}
	JSON502 *struct {
		Message *string `json:"message,omitempty"`
		Success *bool   `json:"success,omitempty"`
		Type    *string `json:"type,omitempty"`
	}
	JSON503 *struct {
		Message *string `json:"message,omitempty"`
		Success *bool   `json:"success,omitempty"`
		Type    *string `json:"type,omitempty"`
	}
	JSON504 *struct {
		Message *string `json:"message,omitempty"`
		Success *bool   `json:"success,omitempty"`
		Type    *string `json:"type,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r GetV1PostsPostIdCommentsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetV1PostsPostIdCommentsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetV1PreferencesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Data    *Preference `json:"data,omitempty"`
		Success *bool       `json:"success,omitempty"`
	}
	JSON400 *struct {
		Message *string `json:"message,omitempty"`
		Success *bool   `json:"success,omitempty"`
		Type    *string `json:"type,omitempty"`
	}
	JSON401 *struct {
		Message *string `json:"message,omitempty"`
		Success *bool   `json:"success,omitempty"`
		Type    *string `json:"type,omitempty"`
	}
	JSON403 *struct {
		Message *string `json:"message,omitempty"`
		Success *bool   `json:"success,omitempty"`
		Type    *string `json:"type,omitempty"`
	}
	JSON404 *struct {
		Message *string `json:"message,omitempty"`
		Success *bool   `json:"success,omitempty"`
		Type    *string `json:"type,omitempty"`
	}
	JSON422 *struct {
		Message *string `json:"message,omitempty"`
		Success *bool   `json:"success,omitempty"`
		Type    *string `json:"type,omitempty"`
	}
	JSON429 *struct {
		Message *string `json:"message,omitempty"`
		Success *bool   `json:"success,omitempty"`
		Type    *string `json:"type,omitempty"`
	}
	JSON500 *struct {
		Message *string `json:"message,omitempty"`
		Success *bool   `json:"success,omitempty"`
		Type    *string `json:"type,omitempty"`
	}
	JSON502 *struct {
		Message *string `json:"message,omitempty"`
		Success *bool   `json:"success,omitempty"`
		Type    *string `json:"type,omitempty"`
	}
	JSON503 *struct {
		Message *string `json:"message,omitempty"`
		Success *bool   `json:"success,omitempty"`
		Type    *string `json:"type,omitempty"`
	}
	JSON504 *struct {
		Message *string `json:"message,omitempty"`
		Success *bool   `json:"success,omitempty"`
		Type    *string `json:"type,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r GetV1PreferencesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetV1PreferencesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostV1PreferencesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Data *struct {
			Message interface{} `json:"message,omitempty"`
		} `json:"data,omitempty"`
		Success *bool `json:"success,omitempty"`
	}
	JSON400 *struct {
		Message *string `json:"message,omitempty"`
		Success *bool   `json:"success,omitempty"`
		Type    *string `json:"type,omitempty"`
	}
	JSON401 *struct {
		Message *string `json:"message,omitempty"`
		Success *bool   `json:"success,omitempty"`
		Type    *string `json:"type,omitempty"`
	}
	JSON403 *struct {
		Message *string `json:"message,omitempty"`
		Success *bool   `json:"success,omitempty"`
		Type    *string `json:"type,omitempty"`
	}
	JSON404 *struct {
		Message *string `json:"message,omitempty"`
		Success *bool   `json:"success,omitempty"`
		Type    *string `json:"type,omitempty"`
	}
	JSON422 *struct {
		Message *string `json:"message,omitempty"`
		Success *bool   `json:"success,omitempty"`
		Type    *string `json:"type,omitempty"`
	}
	JSON429 *struct {
		Message *string `json:"message,omitempty"`
		Success *bool   `json:"success,omitempty"`
		Type    *string `json:"type,omitempty"`
	}
	JSON500 *struct {
		Message *string `json:"message,omitempty"`
		Success *bool   `json:"success,omitempty"`
		Type    *string `json:"type,omitempty"`
	}
	JSON502 *struct {
		Message *string `json:"message,omitempty"`
		Success *bool   `json:"success,omitempty"`
		Type    *string `json:"type,omitempty"`
	}
	JSON503 *struct {
		Message *string `json:"message,omitempty"`
		Success *bool   `json:"success,omitempty"`
		Type    *string `json:"type,omitempty"`
	}
	JSON504 *struct {
		Message *string `json:"message,omitempty"`
		Success *bool   `json:"success,omitempty"`
		Type    *string `json:"type,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r PostV1PreferencesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostV1PreferencesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostV1PreferencesBulkResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Data *struct {
			Message interface{} `json:"message,omitempty"`
		} `json:"data,omitempty"`
		Success *bool `json:"success,omitempty"`
	}
	JSON400 *struct {
		Message *string `json:"message,omitempty"`
		Success *bool   `json:"success,omitempty"`
		Type    *string `json:"type,omitempty"`
	}
	JSON401 *struct {
		Message *string `json:"message,omitempty"`
		Success *bool   `json:"success,omitempty"`
		Type    *string `json:"type,omitempty"`
	}
	JSON403 *struct {
		Message *string `json:"message,omitempty"`
		Success *bool   `json:"success,omitempty"`
		Type    *string `json:"type,omitempty"`
	}
	JSON404 *struct {
		Message *string `json:"message,omitempty"`
		Success *bool   `json:"success,omitempty"`
		Type    *string `json:"type,omitempty"`
	}
	JSON422 *struct {
		Message *string `json:"message,omitempty"`
		Success *bool   `json:"success,omitempty"`
		Type    *string `json:"type,omitempty"`
	}
	JSON429 *struct {
		Message *string `json:"message,omitempty"`
		Success *bool   `json:"success,omitempty"`
		Type    *string `json:"type,omitempty"`
	}
	JSON500 *struct {
		Message *string `json:"message,omitempty"`
		Success *bool   `json:"success,omitempty"`
		Type    *string `json:"type,omitempty"`
	}
	JSON502 *struct {
		Message *string `json:"message,omitempty"`
		Success *bool   `json:"success,omitempty"`
		Type    *string `json:"type,omitempty"`
	}
	JSON503 *struct {
		Message *string `json:"message,omitempty"`
		Success *bool   `json:"success,omitempty"`
		Type    *string `json:"type,omitempty"`
	}
	JSON504 *struct {
		Message *string `json:"message,omitempty"`
		Success *bool   `json:"success,omitempty"`
		Type    *string `json:"type,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r PostV1PreferencesBulkResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostV1PreferencesBulkResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetV1ReadingSessionsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Data       *[]ReadingSession `json:"data,omitempty"`
		Pagination *struct {
			EndCursor       *string `json:"endCursor,omitempty"`
			HasNextPage     *bool   `json:"hasNextPage,omitempty"`
			HasPreviousPage *bool   `json:"hasPreviousPage,omitempty"`
			StartCursor     *string `json:"startCursor,omitempty"`
		} `json:"pagination,omitempty"`
		Success *bool `json:"success,omitempty"`
	}
	JSON400 *struct {
		Message *string `json:"message,omitempty"`
		Success *bool   `json:"success,omitempty"`
		Type    *string `json:"type,omitempty"`
	}
	JSON401 *struct {
		Message *string `json:"message,omitempty"`
		Success *bool   `json:"success,omitempty"`
		Type    *string `json:"type,omitempty"`
	}
	JSON403 *struct {
		Message *string `json:"message,omitempty"`
		Success *bool   `json:"success,omitempty"`
		Type    *string `json:"type,omitempty"`
	}
	JSON404 *struct {
		Message *string `json:"message,omitempty"`
		Success *bool   `json:"success,omitempty"`
		Type    *string `json:"type,omitempty"`
	}
	JSON422 *struct {
		Message *string `json:"message,omitempty"`
		Success *bool   `json:"success,omitempty"`
		Type    *string `json:"type,omitempty"`
	}
	JSON429 *struct {
		Message *string `json:"message,omitempty"`
		Success *bool   `json:"success,omitempty"`
		Type    *string `json:"type,omitempty"`
	}
	JSON500 *struct {
		Message *string `json:"message,omitempty"`
		Success *bool   `json:"success,omitempty"`
		Type    *string `json:"type,omitempty"`
	}
	JSON502 *struct {
		Message *string `json:"message,omitempty"`
		Success *bool   `json:"success,omitempty"`
		Type    *string `json:"type,omitempty"`
	}
	JSON503 *struct {
		Message *string `json:"message,omitempty"`
		Success *bool   `json:"success,omitempty"`
		Type    *string `json:"type,omitempty"`
	}
	JSON504 *struct {
		Message *string `json:"message,omitempty"`
		Success *bool   `json:"success,omitempty"`
		Type    *string `json:"type,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r GetV1ReadingSessionsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetV1ReadingSessionsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostV1ReadingSessionsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Data *struct {
			Message interface{} `json:"message,omitempty"`
		} `json:"data,omitempty"`
		Success *bool `json:"success,omitempty"`
	}
	JSON400 *struct {
		Message *string `json:"message,omitempty"`
		Success *bool   `json:"success,omitempty"`
		Type    *string `json:"type,omitempty"`
	}
	JSON401 *struct {
		Message *string `json:"message,omitempty"`
		Success *bool   `json:"success,omitempty"`
		Type    *string `json:"type,omitempty"`
	}
	JSON403 *struct {
		Message *string `json:"message,omitempty"`
		Success *bool   `json:"success,omitempty"`
		Type    *string `json:"type,omitempty"`
	}
	JSON404 *struct {
		Message *string `json:"message,omitempty"`
		Success *bool   `json:"success,omitempty"`
		Type    *string `json:"type,omitempty"`
	}
	JSON422 *struct {
		Message *string `json:"message,omitempty"`
		Success *bool   `json:"success,omitempty"`
		Type    *string `json:"type,omitempty"`
	}
	JSON429 *struct {
		Message *string `json:"message,omitempty"`
		Success *bool   `json:"success,omitempty"`
		Type    *string `json:"type,omitempty"`
	}
	JSON500 *struct {
		Message *string `json:"message,omitempty"`
		Success *bool   `json:"success,omitempty"`
		Type    *string `json:"type,omitempty"`
	}
	JSON502 *struct {
		Message *string `json:"message,omitempty"`
		Success *bool   `json:"success,omitempty"`
		Type    *string `json:"type,omitempty"`
	}
	JSON503 *struct {
		Message *string `json:"message,omitempty"`
		Success *bool   `json:"success,omitempty"`
		Type    *string `json:"type,omitempty"`
	}
	JSON504 *struct {
		Message *string `json:"message,omitempty"`
		Success *bool   `json:"success,omitempty"`
		Type    *string `json:"type,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r PostV1ReadingSessionsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostV1ReadingSessionsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetV1StreaksResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Data *[]struct {
			// Days The number of days the streak is/was active for.
			Days int `json:"days"`

			// EndDate The date of the streak.
			EndDate string `json:"endDate"`

			// Id The id of the streak.
			Id string `json:"id"`

			// StartDate The date of the streak.
			StartDate string `json:"startDate"`

			// Status The status of the streak.
			Status GetV1Streaks200DataStatus `json:"status"`
		} `json:"data,omitempty"`
		Pagination *struct {
			EndCursor       *string `json:"endCursor,omitempty"`
			HasNextPage     *bool   `json:"hasNextPage,omitempty"`
			HasPreviousPage *bool   `json:"hasPreviousPage,omitempty"`
			StartCursor     *string `json:"startCursor,omitempty"`
		} `json:"pagination,omitempty"`
		Success *bool `json:"success,omitempty"`
	}
	JSON400 *struct {
		Message *string `json:"message,omitempty"`
		Success *bool   `json:"success,omitempty"`
		Type    *string `json:"type,omitempty"`
	}
	JSON401 *struct {
		Message *string `json:"message,omitempty"`
		Success *bool   `json:"success,omitempty"`
		Type    *string `json:"type,omitempty"`
	}
	JSON403 *struct {
		Message *string `json:"message,omitempty"`
		Success *bool   `json:"success,omitempty"`
		Type    *string `json:"type,omitempty"`
	}
	JSON404 *struct {
		Message *string `json:"message,omitempty"`
		Success *bool   `json:"success,omitempty"`
		Type    *string `json:"type,omitempty"`
	}
	JSON422 *struct {
		Message *string `json:"message,omitempty"`
		Success *bool   `json:"success,omitempty"`
		Type    *string `json:"type,omitempty"`
	}
	JSON429 *struct {
		Message *string `json:"message,omitempty"`
		Success *bool   `json:"success,omitempty"`
		Type    *string `json:"type,omitempty"`
	}
	JSON500 *struct {
		Message *string `json:"message,omitempty"`
		Success *bool   `json:"success,omitempty"`
		Type    *string `json:"type,omitempty"`
	}
	JSON502 *struct {
		Message *string `json:"message,omitempty"`
		Success *bool   `json:"success,omitempty"`
		Type    *string `json:"type,omitempty"`
	}
	JSON503 *struct {
		Message *string `json:"message,omitempty"`
		Success *bool   `json:"success,omitempty"`
		Type    *string `json:"type,omitempty"`
	}
	JSON504 *struct {
		Message *string `json:"message,omitempty"`
		Success *bool   `json:"success,omitempty"`
		Type    *string `json:"type,omitempty"`
	}
}
type GetV1Streaks200DataStatus string

// Status returns HTTPResponse.Status
func (r GetV1StreaksResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetV1StreaksResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetV1StreaksCurrentStreakDaysResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Data *[]struct {
			// Days The number of days the current streak is active for.
			Days int `json:"days"`
		} `json:"data,omitempty"`
		Success *bool `json:"success,omitempty"`
	}
	JSON400 *struct {
		Message *string `json:"message,omitempty"`
		Success *bool   `json:"success,omitempty"`
		Type    *string `json:"type,omitempty"`
	}
	JSON401 *struct {
		Message *string `json:"message,omitempty"`
		Success *bool   `json:"success,omitempty"`
		Type    *string `json:"type,omitempty"`
	}
	JSON403 *struct {
		Message *string `json:"message,omitempty"`
		Success *bool   `json:"success,omitempty"`
		Type    *string `json:"type,omitempty"`
	}
	JSON404 *struct {
		Message *string `json:"message,omitempty"`
		Success *bool   `json:"success,omitempty"`
		Type    *string `json:"type,omitempty"`
	}
	JSON422 *struct {
		Message *string `json:"message,omitempty"`
		Success *bool   `json:"success,omitempty"`
		Type    *string `json:"type,omitempty"`
	}
	JSON429 *struct {
		Message *string `json:"message,omitempty"`
		Success *bool   `json:"success,omitempty"`
		Type    *string `json:"type,omitempty"`
	}
	JSON500 *struct {
		Message *string `json:"message,omitempty"`
		Success *bool   `json:"success,omitempty"`
		Type    *string `json:"type,omitempty"`
	}
	JSON502 *struct {
		Message *string `json:"message,omitempty"`
		Success *bool   `json:"success,omitempty"`
		Type    *string `json:"type,omitempty"`
	}
	JSON503 *struct {
		Message *string `json:"message,omitempty"`
		Success *bool   `json:"success,omitempty"`
		Type    *string `json:"type,omitempty"`
	}
	JSON504 *struct {
		Message *string `json:"message,omitempty"`
		Success *bool   `json:"success,omitempty"`
		Type    *string `json:"type,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r GetV1StreaksCurrentStreakDaysResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetV1StreaksCurrentStreakDaysResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostV1UsersConfirmationEmailResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Data    *map[string]interface{} `json:"data,omitempty"`
		Success *bool                   `json:"success,omitempty"`
	}
	JSON400 *struct {
		Message *string `json:"message,omitempty"`
		Success *bool   `json:"success,omitempty"`
		Type    *string `json:"type,omitempty"`
	}
	JSON401 *struct {
		Message *string `json:"message,omitempty"`
		Success *bool   `json:"success,omitempty"`
		Type    *string `json:"type,omitempty"`
	}
	JSON403 *struct {
		Message *string `json:"message,omitempty"`
		Success *bool   `json:"success,omitempty"`
		Type    *string `json:"type,omitempty"`
	}
	JSON404 *struct {
		Message *string `json:"message,omitempty"`
		Success *bool   `json:"success,omitempty"`
		Type    *string `json:"type,omitempty"`
	}
	JSON422 *struct {
		Message *string `json:"message,omitempty"`
		Success *bool   `json:"success,omitempty"`
		Type    *string `json:"type,omitempty"`
	}
	JSON429 *struct {
		Message *string `json:"message,omitempty"`
		Success *bool   `json:"success,omitempty"`
		Type    *string `json:"type,omitempty"`
	}
	JSON500 *struct {
		Message *string `json:"message,omitempty"`
		Success *bool   `json:"success,omitempty"`
		Type    *string `json:"type,omitempty"`
	}
	JSON502 *struct {
		Message *string `json:"message,omitempty"`
		Success *bool   `json:"success,omitempty"`
		Type    *string `json:"type,omitempty"`
	}
	JSON503 *struct {
		Message *string `json:"message,omitempty"`
		Success *bool   `json:"success,omitempty"`
		Type    *string `json:"type,omitempty"`
	}
	JSON504 *struct {
		Message *string `json:"message,omitempty"`
		Success *bool   `json:"success,omitempty"`
		Type    *string `json:"type,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r PostV1UsersConfirmationEmailResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostV1UsersConfirmationEmailResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetV1UsersNotificationsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Data *struct {
			Notifications *[]Notification `json:"notifications,omitempty"`
		} `json:"data,omitempty"`
		Success *bool `json:"success,omitempty"`
	}
	JSON400 *struct {
		Message *string `json:"message,omitempty"`
		Success *bool   `json:"success,omitempty"`
		Type    *string `json:"type,omitempty"`
	}
	JSON401 *struct {
		Message *string `json:"message,omitempty"`
		Success *bool   `json:"success,omitempty"`
		Type    *string `json:"type,omitempty"`
	}
	JSON403 *struct {
		Message *string `json:"message,omitempty"`
		Success *bool   `json:"success,omitempty"`
		Type    *string `json:"type,omitempty"`
	}
	JSON404 *struct {
		Message *string `json:"message,omitempty"`
		Success *bool   `json:"success,omitempty"`
		Type    *string `json:"type,omitempty"`
	}
	JSON422 *struct {
		Message *string `json:"message,omitempty"`
		Success *bool   `json:"success,omitempty"`
		Type    *string `json:"type,omitempty"`
	}
	JSON429 *struct {
		Message *string `json:"message,omitempty"`
		Success *bool   `json:"success,omitempty"`
		Type    *string `json:"type,omitempty"`
	}
	JSON500 *struct {
		Message *string `json:"message,omitempty"`
		Success *bool   `json:"success,omitempty"`
		Type    *string `json:"type,omitempty"`
	}
	JSON502 *struct {
		Message *string `json:"message,omitempty"`
		Success *bool   `json:"success,omitempty"`
		Type    *string `json:"type,omitempty"`
	}
	JSON503 *struct {
		Message *string `json:"message,omitempty"`
		Success *bool   `json:"success,omitempty"`
		Type    *string `json:"type,omitempty"`
	}
	JSON504 *struct {
		Message *string `json:"message,omitempty"`
		Success *bool   `json:"success,omitempty"`
		Type    *string `json:"type,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r GetV1UsersNotificationsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetV1UsersNotificationsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutV1UsersNotificationsSettingIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Data *struct {
			Message interface{} `json:"message,omitempty"`
		} `json:"data,omitempty"`
		Success *bool `json:"success,omitempty"`
	}
	JSON400 *struct {
		Message *string `json:"message,omitempty"`
		Success *bool   `json:"success,omitempty"`
		Type    *string `json:"type,omitempty"`
	}
	JSON401 *struct {
		Message *string `json:"message,omitempty"`
		Success *bool   `json:"success,omitempty"`
		Type    *string `json:"type,omitempty"`
	}
	JSON403 *struct {
		Message *string `json:"message,omitempty"`
		Success *bool   `json:"success,omitempty"`
		Type    *string `json:"type,omitempty"`
	}
	JSON404 *struct {
		Message *string `json:"message,omitempty"`
		Success *bool   `json:"success,omitempty"`
		Type    *string `json:"type,omitempty"`
	}
	JSON422 *struct {
		Message *string `json:"message,omitempty"`
		Success *bool   `json:"success,omitempty"`
		Type    *string `json:"type,omitempty"`
	}
	JSON429 *struct {
		Message *string `json:"message,omitempty"`
		Success *bool   `json:"success,omitempty"`
		Type    *string `json:"type,omitempty"`
	}
	JSON500 *struct {
		Message *string `json:"message,omitempty"`
		Success *bool   `json:"success,omitempty"`
		Type    *string `json:"type,omitempty"`
	}
	JSON502 *struct {
		Message *string `json:"message,omitempty"`
		Success *bool   `json:"success,omitempty"`
		Type    *string `json:"type,omitempty"`
	}
	JSON503 *struct {
		Message *string `json:"message,omitempty"`
		Success *bool   `json:"success,omitempty"`
		Type    *string `json:"type,omitempty"`
	}
	JSON504 *struct {
		Message *string `json:"message,omitempty"`
		Success *bool   `json:"success,omitempty"`
		Type    *string `json:"type,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r PutV1UsersNotificationsSettingIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutV1UsersNotificationsSettingIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostV1UsersPasswordResetEmailResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Data    *map[string]interface{} `json:"data,omitempty"`
		Success *bool                   `json:"success,omitempty"`
	}
	JSON400 *struct {
		Message *string `json:"message,omitempty"`
		Success *bool   `json:"success,omitempty"`
		Type    *string `json:"type,omitempty"`
	}
	JSON401 *struct {
		Message *string `json:"message,omitempty"`
		Success *bool   `json:"success,omitempty"`
		Type    *string `json:"type,omitempty"`
	}
	JSON403 *struct {
		Message *string `json:"message,omitempty"`
		Success *bool   `json:"success,omitempty"`
		Type    *string `json:"type,omitempty"`
	}
	JSON404 *struct {
		Message *string `json:"message,omitempty"`
		Success *bool   `json:"success,omitempty"`
		Type    *string `json:"type,omitempty"`
	}
	JSON422 *struct {
		Message *string `json:"message,omitempty"`
		Success *bool   `json:"success,omitempty"`
		Type    *string `json:"type,omitempty"`
	}
	JSON429 *struct {
		Message *string `json:"message,omitempty"`
		Success *bool   `json:"success,omitempty"`
		Type    *string `json:"type,omitempty"`
	}
	JSON500 *struct {
		Message *string `json:"message,omitempty"`
		Success *bool   `json:"success,omitempty"`
		Type    *string `json:"type,omitempty"`
	}
	JSON502 *struct {
		Message *string `json:"message,omitempty"`
		Success *bool   `json:"success,omitempty"`
		Type    *string `json:"type,omitempty"`
	}
	JSON503 *struct {
		Message *string `json:"message,omitempty"`
		Success *bool   `json:"success,omitempty"`
		Type    *string `json:"type,omitempty"`
	}
	JSON504 *struct {
		Message *string `json:"message,omitempty"`
		Success *bool   `json:"success,omitempty"`
		Type    *string `json:"type,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r PostV1UsersPasswordResetEmailResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostV1UsersPasswordResetEmailResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetV1UsersProfileResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Data    *UserProfile `json:"data,omitempty"`
		Success *bool        `json:"success,omitempty"`
	}
	JSON400 *struct {
		Message *string `json:"message,omitempty"`
		Success *bool   `json:"success,omitempty"`
		Type    *string `json:"type,omitempty"`
	}
	JSON401 *struct {
		Message *string `json:"message,omitempty"`
		Success *bool   `json:"success,omitempty"`
		Type    *string `json:"type,omitempty"`
	}
	JSON403 *struct {
		Message *string `json:"message,omitempty"`
		Success *bool   `json:"success,omitempty"`
		Type    *string `json:"type,omitempty"`
	}
	JSON404 *struct {
		Message *string `json:"message,omitempty"`
		Success *bool   `json:"success,omitempty"`
		Type    *string `json:"type,omitempty"`
	}
	JSON422 *struct {
		Message *string `json:"message,omitempty"`
		Success *bool   `json:"success,omitempty"`
		Type    *string `json:"type,omitempty"`
	}
	JSON429 *struct {
		Message *string `json:"message,omitempty"`
		Success *bool   `json:"success,omitempty"`
		Type    *string `json:"type,omitempty"`
	}
	JSON500 *struct {
		Message *string `json:"message,omitempty"`
		Success *bool   `json:"success,omitempty"`
		Type    *string `json:"type,omitempty"`
	}
	JSON502 *struct {
		Message *string `json:"message,omitempty"`
		Success *bool   `json:"success,omitempty"`
		Type    *string `json:"type,omitempty"`
	}
	JSON503 *struct {
		Message *string `json:"message,omitempty"`
		Success *bool   `json:"success,omitempty"`
		Type    *string `json:"type,omitempty"`
	}
	JSON504 *struct {
		Message *string `json:"message,omitempty"`
		Success *bool   `json:"success,omitempty"`
		Type    *string `json:"type,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r GetV1UsersProfileResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetV1UsersProfileResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutV1UsersProfileResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Data *struct {
			Message interface{} `json:"message,omitempty"`
		} `json:"data,omitempty"`
		Success *bool `json:"success,omitempty"`
	}
	JSON400 *struct {
		Message *string `json:"message,omitempty"`
		Success *bool   `json:"success,omitempty"`
		Type    *string `json:"type,omitempty"`
	}
	JSON401 *struct {
		Message *string `json:"message,omitempty"`
		Success *bool   `json:"success,omitempty"`
		Type    *string `json:"type,omitempty"`
	}
	JSON403 *struct {
		Message *string `json:"message,omitempty"`
		Success *bool   `json:"success,omitempty"`
		Type    *string `json:"type,omitempty"`
	}
	JSON404 *struct {
		Message *string `json:"message,omitempty"`
		Success *bool   `json:"success,omitempty"`
		Type    *string `json:"type,omitempty"`
	}
	JSON422 *struct {
		Message *string `json:"message,omitempty"`
		Success *bool   `json:"success,omitempty"`
		Type    *string `json:"type,omitempty"`
	}
	JSON429 *struct {
		Message *string `json:"message,omitempty"`
		Success *bool   `json:"success,omitempty"`
		Type    *string `json:"type,omitempty"`
	}
	JSON500 *struct {
		Message *string `json:"message,omitempty"`
		Success *bool   `json:"success,omitempty"`
		Type    *string `json:"type,omitempty"`
	}
	JSON502 *struct {
		Message *string `json:"message,omitempty"`
		Success *bool   `json:"success,omitempty"`
		Type    *string `json:"type,omitempty"`
	}
	JSON503 *struct {
		Message *string `json:"message,omitempty"`
		Success *bool   `json:"success,omitempty"`
		Type    *string `json:"type,omitempty"`
	}
	JSON504 *struct {
		Message *string `json:"message,omitempty"`
		Success *bool   `json:"success,omitempty"`
		Type    *string `json:"type,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r PutV1UsersProfileResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutV1UsersProfileResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostV1UsersUsernameRegisterAndroidDeviceResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Data *struct {
			Message interface{} `json:"message,omitempty"`
		} `json:"data,omitempty"`
		Success *bool `json:"success,omitempty"`
	}
	JSON400 *struct {
		Message *string `json:"message,omitempty"`
		Success *bool   `json:"success,omitempty"`
		Type    *string `json:"type,omitempty"`
	}
	JSON401 *struct {
		Message *string `json:"message,omitempty"`
		Success *bool   `json:"success,omitempty"`
		Type    *string `json:"type,omitempty"`
	}
	JSON403 *struct {
		Message *string `json:"message,omitempty"`
		Success *bool   `json:"success,omitempty"`
		Type    *string `json:"type,omitempty"`
	}
	JSON404 *struct {
		Message *string `json:"message,omitempty"`
		Success *bool   `json:"success,omitempty"`
		Type    *string `json:"type,omitempty"`
	}
	JSON422 *struct {
		Message *string `json:"message,omitempty"`
		Success *bool   `json:"success,omitempty"`
		Type    *string `json:"type,omitempty"`
	}
	JSON429 *struct {
		Message *string `json:"message,omitempty"`
		Success *bool   `json:"success,omitempty"`
		Type    *string `json:"type,omitempty"`
	}
	JSON500 *struct {
		Message *string `json:"message,omitempty"`
		Success *bool   `json:"success,omitempty"`
		Type    *string `json:"type,omitempty"`
	}
	JSON502 *struct {
		Message *string `json:"message,omitempty"`
		Success *bool   `json:"success,omitempty"`
		Type    *string `json:"type,omitempty"`
	}
	JSON503 *struct {
		Message *string `json:"message,omitempty"`
		Success *bool   `json:"success,omitempty"`
		Type    *string `json:"type,omitempty"`
	}
	JSON504 *struct {
		Message *string `json:"message,omitempty"`
		Success *bool   `json:"success,omitempty"`
		Type    *string `json:"type,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r PostV1UsersUsernameRegisterAndroidDeviceResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostV1UsersUsernameRegisterAndroidDeviceResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostV1UsersUsernameToggleFollowResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Data *struct {
			// Followed Whether the user is now followed or not.
			Followed *bool `json:"followed,omitempty"`
		} `json:"data,omitempty"`
		Success *bool `json:"success,omitempty"`
	}
	JSON400 *struct {
		Message *string `json:"message,omitempty"`
		Success *bool   `json:"success,omitempty"`
		Type    *string `json:"type,omitempty"`
	}
	JSON401 *struct {
		Message *string `json:"message,omitempty"`
		Success *bool   `json:"success,omitempty"`
		Type    *string `json:"type,omitempty"`
	}
	JSON403 *struct {
		Message *string `json:"message,omitempty"`
		Success *bool   `json:"success,omitempty"`
		Type    *string `json:"type,omitempty"`
	}
	JSON404 *struct {
		Message *string `json:"message,omitempty"`
		Success *bool   `json:"success,omitempty"`
		Type    *string `json:"type,omitempty"`
	}
	JSON422 *struct {
		Message *string `json:"message,omitempty"`
		Success *bool   `json:"success,omitempty"`
		Type    *string `json:"type,omitempty"`
	}
	JSON429 *struct {
		Message *string `json:"message,omitempty"`
		Success *bool   `json:"success,omitempty"`
		Type    *string `json:"type,omitempty"`
	}
	JSON500 *struct {
		Message *string `json:"message,omitempty"`
		Success *bool   `json:"success,omitempty"`
		Type    *string `json:"type,omitempty"`
	}
	JSON502 *struct {
		Message *string `json:"message,omitempty"`
		Success *bool   `json:"success,omitempty"`
		Type    *string `json:"type,omitempty"`
	}
	JSON503 *struct {
		Message *string `json:"message,omitempty"`
		Success *bool   `json:"success,omitempty"`
		Type    *string `json:"type,omitempty"`
	}
	JSON504 *struct {
		Message *string `json:"message,omitempty"`
		Success *bool   `json:"success,omitempty"`
		Type    *string `json:"type,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r PostV1UsersUsernameToggleFollowResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostV1UsersUsernameToggleFollowResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// GetV1ActivityDaysWithResponse request returning *GetV1ActivityDaysResponse
func (c *ClientWithResponses) GetV1ActivityDaysWithResponse(ctx context.Context, params *GetV1ActivityDaysParams, reqEditors ...RequestEditorFn) (*GetV1ActivityDaysResponse, error) {
	rsp, err := c.GetV1ActivityDays(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetV1ActivityDaysResponse(rsp)
}

// PostV1ActivityDaysWithBodyWithResponse request with arbitrary body returning *PostV1ActivityDaysResponse
func (c *ClientWithResponses) PostV1ActivityDaysWithBodyWithResponse(ctx context.Context, params *PostV1ActivityDaysParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostV1ActivityDaysResponse, error) {
	rsp, err := c.PostV1ActivityDaysWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostV1ActivityDaysResponse(rsp)
}

func (c *ClientWithResponses) PostV1ActivityDaysWithResponse(ctx context.Context, params *PostV1ActivityDaysParams, body PostV1ActivityDaysJSONRequestBody, reqEditors ...RequestEditorFn) (*PostV1ActivityDaysResponse, error) {
	rsp, err := c.PostV1ActivityDays(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostV1ActivityDaysResponse(rsp)
}

// GetV1ActivityDaysEstimateReadingTimeWithResponse request returning *GetV1ActivityDaysEstimateReadingTimeResponse
func (c *ClientWithResponses) GetV1ActivityDaysEstimateReadingTimeWithResponse(ctx context.Context, params *GetV1ActivityDaysEstimateReadingTimeParams, reqEditors ...RequestEditorFn) (*GetV1ActivityDaysEstimateReadingTimeResponse, error) {
	rsp, err := c.GetV1ActivityDaysEstimateReadingTime(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetV1ActivityDaysEstimateReadingTimeResponse(rsp)
}

// GetV1BookmarksWithResponse request returning *GetV1BookmarksResponse
func (c *ClientWithResponses) GetV1BookmarksWithResponse(ctx context.Context, params *GetV1BookmarksParams, reqEditors ...RequestEditorFn) (*GetV1BookmarksResponse, error) {
	rsp, err := c.GetV1Bookmarks(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetV1BookmarksResponse(rsp)
}

// PostV1BookmarksWithBodyWithResponse request with arbitrary body returning *PostV1BookmarksResponse
func (c *ClientWithResponses) PostV1BookmarksWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostV1BookmarksResponse, error) {
	rsp, err := c.PostV1BookmarksWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostV1BookmarksResponse(rsp)
}

func (c *ClientWithResponses) PostV1BookmarksWithResponse(ctx context.Context, body PostV1BookmarksJSONRequestBody, reqEditors ...RequestEditorFn) (*PostV1BookmarksResponse, error) {
	rsp, err := c.PostV1Bookmarks(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostV1BookmarksResponse(rsp)
}

// GetV1BookmarksAyahsRangeWithResponse request returning *GetV1BookmarksAyahsRangeResponse
func (c *ClientWithResponses) GetV1BookmarksAyahsRangeWithResponse(ctx context.Context, params *GetV1BookmarksAyahsRangeParams, reqEditors ...RequestEditorFn) (*GetV1BookmarksAyahsRangeResponse, error) {
	rsp, err := c.GetV1BookmarksAyahsRange(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetV1BookmarksAyahsRangeResponse(rsp)
}

// GetV1BookmarksBookmarkWithResponse request returning *GetV1BookmarksBookmarkResponse
func (c *ClientWithResponses) GetV1BookmarksBookmarkWithResponse(ctx context.Context, params *GetV1BookmarksBookmarkParams, reqEditors ...RequestEditorFn) (*GetV1BookmarksBookmarkResponse, error) {
	rsp, err := c.GetV1BookmarksBookmark(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetV1BookmarksBookmarkResponse(rsp)
}

// GetV1BookmarksCollectionsWithResponse request returning *GetV1BookmarksCollectionsResponse
func (c *ClientWithResponses) GetV1BookmarksCollectionsWithResponse(ctx context.Context, params *GetV1BookmarksCollectionsParams, reqEditors ...RequestEditorFn) (*GetV1BookmarksCollectionsResponse, error) {
	rsp, err := c.GetV1BookmarksCollections(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetV1BookmarksCollectionsResponse(rsp)
}

// DeleteV1BookmarksBookmarkIdWithResponse request returning *DeleteV1BookmarksBookmarkIdResponse
func (c *ClientWithResponses) DeleteV1BookmarksBookmarkIdWithResponse(ctx context.Context, bookmarkId string, reqEditors ...RequestEditorFn) (*DeleteV1BookmarksBookmarkIdResponse, error) {
	rsp, err := c.DeleteV1BookmarksBookmarkId(ctx, bookmarkId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteV1BookmarksBookmarkIdResponse(rsp)
}

// GetV1CollectionsWithResponse request returning *GetV1CollectionsResponse
func (c *ClientWithResponses) GetV1CollectionsWithResponse(ctx context.Context, params *GetV1CollectionsParams, reqEditors ...RequestEditorFn) (*GetV1CollectionsResponse, error) {
	rsp, err := c.GetV1Collections(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetV1CollectionsResponse(rsp)
}

// PostV1CollectionsWithBodyWithResponse request with arbitrary body returning *PostV1CollectionsResponse
func (c *ClientWithResponses) PostV1CollectionsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostV1CollectionsResponse, error) {
	rsp, err := c.PostV1CollectionsWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostV1CollectionsResponse(rsp)
}

func (c *ClientWithResponses) PostV1CollectionsWithResponse(ctx context.Context, body PostV1CollectionsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostV1CollectionsResponse, error) {
	rsp, err := c.PostV1Collections(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostV1CollectionsResponse(rsp)
}

// GetV1CollectionsAllWithResponse request returning *GetV1CollectionsAllResponse
func (c *ClientWithResponses) GetV1CollectionsAllWithResponse(ctx context.Context, params *GetV1CollectionsAllParams, reqEditors ...RequestEditorFn) (*GetV1CollectionsAllResponse, error) {
	rsp, err := c.GetV1CollectionsAll(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetV1CollectionsAllResponse(rsp)
}

// DeleteV1CollectionsCollectionIdWithResponse request returning *DeleteV1CollectionsCollectionIdResponse
func (c *ClientWithResponses) DeleteV1CollectionsCollectionIdWithResponse(ctx context.Context, collectionId string, reqEditors ...RequestEditorFn) (*DeleteV1CollectionsCollectionIdResponse, error) {
	rsp, err := c.DeleteV1CollectionsCollectionId(ctx, collectionId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteV1CollectionsCollectionIdResponse(rsp)
}

// GetV1CollectionsCollectionIdWithResponse request returning *GetV1CollectionsCollectionIdResponse
func (c *ClientWithResponses) GetV1CollectionsCollectionIdWithResponse(ctx context.Context, collectionId string, params *GetV1CollectionsCollectionIdParams, reqEditors ...RequestEditorFn) (*GetV1CollectionsCollectionIdResponse, error) {
	rsp, err := c.GetV1CollectionsCollectionId(ctx, collectionId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetV1CollectionsCollectionIdResponse(rsp)
}

// PostV1CollectionsCollectionIdWithBodyWithResponse request with arbitrary body returning *PostV1CollectionsCollectionIdResponse
func (c *ClientWithResponses) PostV1CollectionsCollectionIdWithBodyWithResponse(ctx context.Context, collectionId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostV1CollectionsCollectionIdResponse, error) {
	rsp, err := c.PostV1CollectionsCollectionIdWithBody(ctx, collectionId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostV1CollectionsCollectionIdResponse(rsp)
}

func (c *ClientWithResponses) PostV1CollectionsCollectionIdWithResponse(ctx context.Context, collectionId string, body PostV1CollectionsCollectionIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PostV1CollectionsCollectionIdResponse, error) {
	rsp, err := c.PostV1CollectionsCollectionId(ctx, collectionId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostV1CollectionsCollectionIdResponse(rsp)
}

// PostV1CollectionsCollectionIdBookmarksWithBodyWithResponse request with arbitrary body returning *PostV1CollectionsCollectionIdBookmarksResponse
func (c *ClientWithResponses) PostV1CollectionsCollectionIdBookmarksWithBodyWithResponse(ctx context.Context, collectionId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostV1CollectionsCollectionIdBookmarksResponse, error) {
	rsp, err := c.PostV1CollectionsCollectionIdBookmarksWithBody(ctx, collectionId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostV1CollectionsCollectionIdBookmarksResponse(rsp)
}

func (c *ClientWithResponses) PostV1CollectionsCollectionIdBookmarksWithResponse(ctx context.Context, collectionId string, body PostV1CollectionsCollectionIdBookmarksJSONRequestBody, reqEditors ...RequestEditorFn) (*PostV1CollectionsCollectionIdBookmarksResponse, error) {
	rsp, err := c.PostV1CollectionsCollectionIdBookmarks(ctx, collectionId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostV1CollectionsCollectionIdBookmarksResponse(rsp)
}

// DeleteV1CollectionsCollectionIdBookmarksBookmarkIdWithResponse request returning *DeleteV1CollectionsCollectionIdBookmarksBookmarkIdResponse
func (c *ClientWithResponses) DeleteV1CollectionsCollectionIdBookmarksBookmarkIdWithResponse(ctx context.Context, collectionId string, bookmarkId string, reqEditors ...RequestEditorFn) (*DeleteV1CollectionsCollectionIdBookmarksBookmarkIdResponse, error) {
	rsp, err := c.DeleteV1CollectionsCollectionIdBookmarksBookmarkId(ctx, collectionId, bookmarkId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteV1CollectionsCollectionIdBookmarksBookmarkIdResponse(rsp)
}

// PostV1CommentsWithBodyWithResponse request with arbitrary body returning *PostV1CommentsResponse
func (c *ClientWithResponses) PostV1CommentsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostV1CommentsResponse, error) {
	rsp, err := c.PostV1CommentsWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostV1CommentsResponse(rsp)
}

func (c *ClientWithResponses) PostV1CommentsWithResponse(ctx context.Context, body PostV1CommentsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostV1CommentsResponse, error) {
	rsp, err := c.PostV1Comments(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostV1CommentsResponse(rsp)
}

// DeleteV1CommentsCommentIdWithResponse request returning *DeleteV1CommentsCommentIdResponse
func (c *ClientWithResponses) DeleteV1CommentsCommentIdWithResponse(ctx context.Context, commentId string, reqEditors ...RequestEditorFn) (*DeleteV1CommentsCommentIdResponse, error) {
	rsp, err := c.DeleteV1CommentsCommentId(ctx, commentId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteV1CommentsCommentIdResponse(rsp)
}

// PutV1CommentsCommentIdWithBodyWithResponse request with arbitrary body returning *PutV1CommentsCommentIdResponse
func (c *ClientWithResponses) PutV1CommentsCommentIdWithBodyWithResponse(ctx context.Context, commentId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutV1CommentsCommentIdResponse, error) {
	rsp, err := c.PutV1CommentsCommentIdWithBody(ctx, commentId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutV1CommentsCommentIdResponse(rsp)
}

func (c *ClientWithResponses) PutV1CommentsCommentIdWithResponse(ctx context.Context, commentId string, body PutV1CommentsCommentIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PutV1CommentsCommentIdResponse, error) {
	rsp, err := c.PutV1CommentsCommentId(ctx, commentId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutV1CommentsCommentIdResponse(rsp)
}

// PostV1GoalsWithBodyWithResponse request with arbitrary body returning *PostV1GoalsResponse
func (c *ClientWithResponses) PostV1GoalsWithBodyWithResponse(ctx context.Context, params *PostV1GoalsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostV1GoalsResponse, error) {
	rsp, err := c.PostV1GoalsWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostV1GoalsResponse(rsp)
}

func (c *ClientWithResponses) PostV1GoalsWithResponse(ctx context.Context, params *PostV1GoalsParams, body PostV1GoalsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostV1GoalsResponse, error) {
	rsp, err := c.PostV1Goals(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostV1GoalsResponse(rsp)
}

// GetV1GoalsEstimateWithResponse request returning *GetV1GoalsEstimateResponse
func (c *ClientWithResponses) GetV1GoalsEstimateWithResponse(ctx context.Context, params *GetV1GoalsEstimateParams, reqEditors ...RequestEditorFn) (*GetV1GoalsEstimateResponse, error) {
	rsp, err := c.GetV1GoalsEstimate(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetV1GoalsEstimateResponse(rsp)
}

// GetV1GoalsGetTodaysPlanWithResponse request returning *GetV1GoalsGetTodaysPlanResponse
func (c *ClientWithResponses) GetV1GoalsGetTodaysPlanWithResponse(ctx context.Context, params *GetV1GoalsGetTodaysPlanParams, reqEditors ...RequestEditorFn) (*GetV1GoalsGetTodaysPlanResponse, error) {
	rsp, err := c.GetV1GoalsGetTodaysPlan(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetV1GoalsGetTodaysPlanResponse(rsp)
}

// DeleteV1GoalsIdWithResponse request returning *DeleteV1GoalsIdResponse
func (c *ClientWithResponses) DeleteV1GoalsIdWithResponse(ctx context.Context, id string, params *DeleteV1GoalsIdParams, reqEditors ...RequestEditorFn) (*DeleteV1GoalsIdResponse, error) {
	rsp, err := c.DeleteV1GoalsId(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteV1GoalsIdResponse(rsp)
}

// PutV1GoalsIdWithBodyWithResponse request with arbitrary body returning *PutV1GoalsIdResponse
func (c *ClientWithResponses) PutV1GoalsIdWithBodyWithResponse(ctx context.Context, id string, params *PutV1GoalsIdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutV1GoalsIdResponse, error) {
	rsp, err := c.PutV1GoalsIdWithBody(ctx, id, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutV1GoalsIdResponse(rsp)
}

func (c *ClientWithResponses) PutV1GoalsIdWithResponse(ctx context.Context, id string, params *PutV1GoalsIdParams, body PutV1GoalsIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PutV1GoalsIdResponse, error) {
	rsp, err := c.PutV1GoalsId(ctx, id, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutV1GoalsIdResponse(rsp)
}

// GetV1GroupsWithResponse request returning *GetV1GroupsResponse
func (c *ClientWithResponses) GetV1GroupsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetV1GroupsResponse, error) {
	rsp, err := c.GetV1Groups(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetV1GroupsResponse(rsp)
}

// GetV1GroupsGroupIdWithResponse request returning *GetV1GroupsGroupIdResponse
func (c *ClientWithResponses) GetV1GroupsGroupIdWithResponse(ctx context.Context, groupId string, reqEditors ...RequestEditorFn) (*GetV1GroupsGroupIdResponse, error) {
	rsp, err := c.GetV1GroupsGroupId(ctx, groupId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetV1GroupsGroupIdResponse(rsp)
}

// PutV1GroupsGroupIdAssignAsAdminWithBodyWithResponse request with arbitrary body returning *PutV1GroupsGroupIdAssignAsAdminResponse
func (c *ClientWithResponses) PutV1GroupsGroupIdAssignAsAdminWithBodyWithResponse(ctx context.Context, groupId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutV1GroupsGroupIdAssignAsAdminResponse, error) {
	rsp, err := c.PutV1GroupsGroupIdAssignAsAdminWithBody(ctx, groupId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutV1GroupsGroupIdAssignAsAdminResponse(rsp)
}

func (c *ClientWithResponses) PutV1GroupsGroupIdAssignAsAdminWithResponse(ctx context.Context, groupId string, body PutV1GroupsGroupIdAssignAsAdminJSONRequestBody, reqEditors ...RequestEditorFn) (*PutV1GroupsGroupIdAssignAsAdminResponse, error) {
	rsp, err := c.PutV1GroupsGroupIdAssignAsAdmin(ctx, groupId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutV1GroupsGroupIdAssignAsAdminResponse(rsp)
}

// PutV1GroupsGroupIdInviteUserWithBodyWithResponse request with arbitrary body returning *PutV1GroupsGroupIdInviteUserResponse
func (c *ClientWithResponses) PutV1GroupsGroupIdInviteUserWithBodyWithResponse(ctx context.Context, groupId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutV1GroupsGroupIdInviteUserResponse, error) {
	rsp, err := c.PutV1GroupsGroupIdInviteUserWithBody(ctx, groupId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutV1GroupsGroupIdInviteUserResponse(rsp)
}

func (c *ClientWithResponses) PutV1GroupsGroupIdInviteUserWithResponse(ctx context.Context, groupId string, body PutV1GroupsGroupIdInviteUserJSONRequestBody, reqEditors ...RequestEditorFn) (*PutV1GroupsGroupIdInviteUserResponse, error) {
	rsp, err := c.PutV1GroupsGroupIdInviteUser(ctx, groupId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutV1GroupsGroupIdInviteUserResponse(rsp)
}

// PutV1GroupsGroupIdRemoveUserWithBodyWithResponse request with arbitrary body returning *PutV1GroupsGroupIdRemoveUserResponse
func (c *ClientWithResponses) PutV1GroupsGroupIdRemoveUserWithBodyWithResponse(ctx context.Context, groupId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutV1GroupsGroupIdRemoveUserResponse, error) {
	rsp, err := c.PutV1GroupsGroupIdRemoveUserWithBody(ctx, groupId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutV1GroupsGroupIdRemoveUserResponse(rsp)
}

func (c *ClientWithResponses) PutV1GroupsGroupIdRemoveUserWithResponse(ctx context.Context, groupId string, body PutV1GroupsGroupIdRemoveUserJSONRequestBody, reqEditors ...RequestEditorFn) (*PutV1GroupsGroupIdRemoveUserResponse, error) {
	rsp, err := c.PutV1GroupsGroupIdRemoveUser(ctx, groupId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutV1GroupsGroupIdRemoveUserResponse(rsp)
}

// GetV1NotesWithResponse request returning *GetV1NotesResponse
func (c *ClientWithResponses) GetV1NotesWithResponse(ctx context.Context, params *GetV1NotesParams, reqEditors ...RequestEditorFn) (*GetV1NotesResponse, error) {
	rsp, err := c.GetV1Notes(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetV1NotesResponse(rsp)
}

// PostV1NotesWithBodyWithResponse request with arbitrary body returning *PostV1NotesResponse
func (c *ClientWithResponses) PostV1NotesWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostV1NotesResponse, error) {
	rsp, err := c.PostV1NotesWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostV1NotesResponse(rsp)
}

func (c *ClientWithResponses) PostV1NotesWithResponse(ctx context.Context, body PostV1NotesJSONRequestBody, reqEditors ...RequestEditorFn) (*PostV1NotesResponse, error) {
	rsp, err := c.PostV1Notes(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostV1NotesResponse(rsp)
}

// GetV1NotesByAttachedEntityWithResponse request returning *GetV1NotesByAttachedEntityResponse
func (c *ClientWithResponses) GetV1NotesByAttachedEntityWithResponse(ctx context.Context, params *GetV1NotesByAttachedEntityParams, reqEditors ...RequestEditorFn) (*GetV1NotesByAttachedEntityResponse, error) {
	rsp, err := c.GetV1NotesByAttachedEntity(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetV1NotesByAttachedEntityResponse(rsp)
}

// GetV1NotesByRangeWithResponse request returning *GetV1NotesByRangeResponse
func (c *ClientWithResponses) GetV1NotesByRangeWithResponse(ctx context.Context, params *GetV1NotesByRangeParams, reqEditors ...RequestEditorFn) (*GetV1NotesByRangeResponse, error) {
	rsp, err := c.GetV1NotesByRange(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetV1NotesByRangeResponse(rsp)
}

// GetV1NotesByVerseVerseKeyWithResponse request returning *GetV1NotesByVerseVerseKeyResponse
func (c *ClientWithResponses) GetV1NotesByVerseVerseKeyWithResponse(ctx context.Context, verseKey string, reqEditors ...RequestEditorFn) (*GetV1NotesByVerseVerseKeyResponse, error) {
	rsp, err := c.GetV1NotesByVerseVerseKey(ctx, verseKey, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetV1NotesByVerseVerseKeyResponse(rsp)
}

// GetV1NotesCountWithinRangeWithResponse request returning *GetV1NotesCountWithinRangeResponse
func (c *ClientWithResponses) GetV1NotesCountWithinRangeWithResponse(ctx context.Context, params *GetV1NotesCountWithinRangeParams, reqEditors ...RequestEditorFn) (*GetV1NotesCountWithinRangeResponse, error) {
	rsp, err := c.GetV1NotesCountWithinRange(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetV1NotesCountWithinRangeResponse(rsp)
}

// DeleteV1NotesNoteIdWithResponse request returning *DeleteV1NotesNoteIdResponse
func (c *ClientWithResponses) DeleteV1NotesNoteIdWithResponse(ctx context.Context, noteId string, reqEditors ...RequestEditorFn) (*DeleteV1NotesNoteIdResponse, error) {
	rsp, err := c.DeleteV1NotesNoteId(ctx, noteId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteV1NotesNoteIdResponse(rsp)
}

// GetV1NotesNoteIdWithResponse request returning *GetV1NotesNoteIdResponse
func (c *ClientWithResponses) GetV1NotesNoteIdWithResponse(ctx context.Context, noteId string, params *GetV1NotesNoteIdParams, reqEditors ...RequestEditorFn) (*GetV1NotesNoteIdResponse, error) {
	rsp, err := c.GetV1NotesNoteId(ctx, noteId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetV1NotesNoteIdResponse(rsp)
}

// PatchV1NotesNoteIdWithBodyWithResponse request with arbitrary body returning *PatchV1NotesNoteIdResponse
func (c *ClientWithResponses) PatchV1NotesNoteIdWithBodyWithResponse(ctx context.Context, noteId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchV1NotesNoteIdResponse, error) {
	rsp, err := c.PatchV1NotesNoteIdWithBody(ctx, noteId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchV1NotesNoteIdResponse(rsp)
}

func (c *ClientWithResponses) PatchV1NotesNoteIdWithResponse(ctx context.Context, noteId string, body PatchV1NotesNoteIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchV1NotesNoteIdResponse, error) {
	rsp, err := c.PatchV1NotesNoteId(ctx, noteId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchV1NotesNoteIdResponse(rsp)
}

// PostV1NotesNoteIdPublishWithBodyWithResponse request with arbitrary body returning *PostV1NotesNoteIdPublishResponse
func (c *ClientWithResponses) PostV1NotesNoteIdPublishWithBodyWithResponse(ctx context.Context, noteId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostV1NotesNoteIdPublishResponse, error) {
	rsp, err := c.PostV1NotesNoteIdPublishWithBody(ctx, noteId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostV1NotesNoteIdPublishResponse(rsp)
}

func (c *ClientWithResponses) PostV1NotesNoteIdPublishWithResponse(ctx context.Context, noteId string, body PostV1NotesNoteIdPublishJSONRequestBody, reqEditors ...RequestEditorFn) (*PostV1NotesNoteIdPublishResponse, error) {
	rsp, err := c.PostV1NotesNoteIdPublish(ctx, noteId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostV1NotesNoteIdPublishResponse(rsp)
}

// GetV1PostsWithResponse request returning *GetV1PostsResponse
func (c *ClientWithResponses) GetV1PostsWithResponse(ctx context.Context, params *GetV1PostsParams, reqEditors ...RequestEditorFn) (*GetV1PostsResponse, error) {
	rsp, err := c.GetV1Posts(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetV1PostsResponse(rsp)
}

// PostV1PostsWithBodyWithResponse request with arbitrary body returning *PostV1PostsResponse
func (c *ClientWithResponses) PostV1PostsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostV1PostsResponse, error) {
	rsp, err := c.PostV1PostsWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostV1PostsResponse(rsp)
}

func (c *ClientWithResponses) PostV1PostsWithResponse(ctx context.Context, body PostV1PostsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostV1PostsResponse, error) {
	rsp, err := c.PostV1Posts(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostV1PostsResponse(rsp)
}

// PostV1PostsReportPostIdWithBodyWithResponse request with arbitrary body returning *PostV1PostsReportPostIdResponse
func (c *ClientWithResponses) PostV1PostsReportPostIdWithBodyWithResponse(ctx context.Context, postId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostV1PostsReportPostIdResponse, error) {
	rsp, err := c.PostV1PostsReportPostIdWithBody(ctx, postId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostV1PostsReportPostIdResponse(rsp)
}

func (c *ClientWithResponses) PostV1PostsReportPostIdWithResponse(ctx context.Context, postId string, body PostV1PostsReportPostIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PostV1PostsReportPostIdResponse, error) {
	rsp, err := c.PostV1PostsReportPostId(ctx, postId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostV1PostsReportPostIdResponse(rsp)
}

// PostV1PostsToggleLikePostIdWithBodyWithResponse request with arbitrary body returning *PostV1PostsToggleLikePostIdResponse
func (c *ClientWithResponses) PostV1PostsToggleLikePostIdWithBodyWithResponse(ctx context.Context, postId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostV1PostsToggleLikePostIdResponse, error) {
	rsp, err := c.PostV1PostsToggleLikePostIdWithBody(ctx, postId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostV1PostsToggleLikePostIdResponse(rsp)
}

func (c *ClientWithResponses) PostV1PostsToggleLikePostIdWithResponse(ctx context.Context, postId string, body PostV1PostsToggleLikePostIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PostV1PostsToggleLikePostIdResponse, error) {
	rsp, err := c.PostV1PostsToggleLikePostId(ctx, postId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostV1PostsToggleLikePostIdResponse(rsp)
}

// PostV1PostsToggleSavePostIdWithBodyWithResponse request with arbitrary body returning *PostV1PostsToggleSavePostIdResponse
func (c *ClientWithResponses) PostV1PostsToggleSavePostIdWithBodyWithResponse(ctx context.Context, postId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostV1PostsToggleSavePostIdResponse, error) {
	rsp, err := c.PostV1PostsToggleSavePostIdWithBody(ctx, postId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostV1PostsToggleSavePostIdResponse(rsp)
}

func (c *ClientWithResponses) PostV1PostsToggleSavePostIdWithResponse(ctx context.Context, postId string, body PostV1PostsToggleSavePostIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PostV1PostsToggleSavePostIdResponse, error) {
	rsp, err := c.PostV1PostsToggleSavePostId(ctx, postId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostV1PostsToggleSavePostIdResponse(rsp)
}

// PostV1PostsViewPostIdWithBodyWithResponse request with arbitrary body returning *PostV1PostsViewPostIdResponse
func (c *ClientWithResponses) PostV1PostsViewPostIdWithBodyWithResponse(ctx context.Context, postId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostV1PostsViewPostIdResponse, error) {
	rsp, err := c.PostV1PostsViewPostIdWithBody(ctx, postId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostV1PostsViewPostIdResponse(rsp)
}

func (c *ClientWithResponses) PostV1PostsViewPostIdWithResponse(ctx context.Context, postId string, body PostV1PostsViewPostIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PostV1PostsViewPostIdResponse, error) {
	rsp, err := c.PostV1PostsViewPostId(ctx, postId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostV1PostsViewPostIdResponse(rsp)
}

// DeleteV1PostsPostIdWithResponse request returning *DeleteV1PostsPostIdResponse
func (c *ClientWithResponses) DeleteV1PostsPostIdWithResponse(ctx context.Context, postId string, reqEditors ...RequestEditorFn) (*DeleteV1PostsPostIdResponse, error) {
	rsp, err := c.DeleteV1PostsPostId(ctx, postId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteV1PostsPostIdResponse(rsp)
}

// GetV1PostsPostIdWithResponse request returning *GetV1PostsPostIdResponse
func (c *ClientWithResponses) GetV1PostsPostIdWithResponse(ctx context.Context, postId string, reqEditors ...RequestEditorFn) (*GetV1PostsPostIdResponse, error) {
	rsp, err := c.GetV1PostsPostId(ctx, postId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetV1PostsPostIdResponse(rsp)
}

// PutV1PostsPostIdWithBodyWithResponse request with arbitrary body returning *PutV1PostsPostIdResponse
func (c *ClientWithResponses) PutV1PostsPostIdWithBodyWithResponse(ctx context.Context, postId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutV1PostsPostIdResponse, error) {
	rsp, err := c.PutV1PostsPostIdWithBody(ctx, postId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutV1PostsPostIdResponse(rsp)
}

func (c *ClientWithResponses) PutV1PostsPostIdWithResponse(ctx context.Context, postId string, body PutV1PostsPostIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PutV1PostsPostIdResponse, error) {
	rsp, err := c.PutV1PostsPostId(ctx, postId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutV1PostsPostIdResponse(rsp)
}

// GetV1PostsPostIdCommentsWithResponse request returning *GetV1PostsPostIdCommentsResponse
func (c *ClientWithResponses) GetV1PostsPostIdCommentsWithResponse(ctx context.Context, postId string, reqEditors ...RequestEditorFn) (*GetV1PostsPostIdCommentsResponse, error) {
	rsp, err := c.GetV1PostsPostIdComments(ctx, postId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetV1PostsPostIdCommentsResponse(rsp)
}

// GetV1PreferencesWithResponse request returning *GetV1PreferencesResponse
func (c *ClientWithResponses) GetV1PreferencesWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetV1PreferencesResponse, error) {
	rsp, err := c.GetV1Preferences(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetV1PreferencesResponse(rsp)
}

// PostV1PreferencesWithBodyWithResponse request with arbitrary body returning *PostV1PreferencesResponse
func (c *ClientWithResponses) PostV1PreferencesWithBodyWithResponse(ctx context.Context, params *PostV1PreferencesParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostV1PreferencesResponse, error) {
	rsp, err := c.PostV1PreferencesWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostV1PreferencesResponse(rsp)
}

func (c *ClientWithResponses) PostV1PreferencesWithResponse(ctx context.Context, params *PostV1PreferencesParams, body PostV1PreferencesJSONRequestBody, reqEditors ...RequestEditorFn) (*PostV1PreferencesResponse, error) {
	rsp, err := c.PostV1Preferences(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostV1PreferencesResponse(rsp)
}

// PostV1PreferencesBulkWithBodyWithResponse request with arbitrary body returning *PostV1PreferencesBulkResponse
func (c *ClientWithResponses) PostV1PreferencesBulkWithBodyWithResponse(ctx context.Context, params *PostV1PreferencesBulkParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostV1PreferencesBulkResponse, error) {
	rsp, err := c.PostV1PreferencesBulkWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostV1PreferencesBulkResponse(rsp)
}

func (c *ClientWithResponses) PostV1PreferencesBulkWithResponse(ctx context.Context, params *PostV1PreferencesBulkParams, body PostV1PreferencesBulkJSONRequestBody, reqEditors ...RequestEditorFn) (*PostV1PreferencesBulkResponse, error) {
	rsp, err := c.PostV1PreferencesBulk(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostV1PreferencesBulkResponse(rsp)
}

// GetV1ReadingSessionsWithResponse request returning *GetV1ReadingSessionsResponse
func (c *ClientWithResponses) GetV1ReadingSessionsWithResponse(ctx context.Context, params *GetV1ReadingSessionsParams, reqEditors ...RequestEditorFn) (*GetV1ReadingSessionsResponse, error) {
	rsp, err := c.GetV1ReadingSessions(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetV1ReadingSessionsResponse(rsp)
}

// PostV1ReadingSessionsWithBodyWithResponse request with arbitrary body returning *PostV1ReadingSessionsResponse
func (c *ClientWithResponses) PostV1ReadingSessionsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostV1ReadingSessionsResponse, error) {
	rsp, err := c.PostV1ReadingSessionsWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostV1ReadingSessionsResponse(rsp)
}

func (c *ClientWithResponses) PostV1ReadingSessionsWithResponse(ctx context.Context, body PostV1ReadingSessionsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostV1ReadingSessionsResponse, error) {
	rsp, err := c.PostV1ReadingSessions(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostV1ReadingSessionsResponse(rsp)
}

// GetV1StreaksWithResponse request returning *GetV1StreaksResponse
func (c *ClientWithResponses) GetV1StreaksWithResponse(ctx context.Context, params *GetV1StreaksParams, reqEditors ...RequestEditorFn) (*GetV1StreaksResponse, error) {
	rsp, err := c.GetV1Streaks(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetV1StreaksResponse(rsp)
}

// GetV1StreaksCurrentStreakDaysWithResponse request returning *GetV1StreaksCurrentStreakDaysResponse
func (c *ClientWithResponses) GetV1StreaksCurrentStreakDaysWithResponse(ctx context.Context, params *GetV1StreaksCurrentStreakDaysParams, reqEditors ...RequestEditorFn) (*GetV1StreaksCurrentStreakDaysResponse, error) {
	rsp, err := c.GetV1StreaksCurrentStreakDays(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetV1StreaksCurrentStreakDaysResponse(rsp)
}

// PostV1UsersConfirmationEmailWithBodyWithResponse request with arbitrary body returning *PostV1UsersConfirmationEmailResponse
func (c *ClientWithResponses) PostV1UsersConfirmationEmailWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostV1UsersConfirmationEmailResponse, error) {
	rsp, err := c.PostV1UsersConfirmationEmailWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostV1UsersConfirmationEmailResponse(rsp)
}

func (c *ClientWithResponses) PostV1UsersConfirmationEmailWithResponse(ctx context.Context, body PostV1UsersConfirmationEmailJSONRequestBody, reqEditors ...RequestEditorFn) (*PostV1UsersConfirmationEmailResponse, error) {
	rsp, err := c.PostV1UsersConfirmationEmail(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostV1UsersConfirmationEmailResponse(rsp)
}

// GetV1UsersNotificationsWithResponse request returning *GetV1UsersNotificationsResponse
func (c *ClientWithResponses) GetV1UsersNotificationsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetV1UsersNotificationsResponse, error) {
	rsp, err := c.GetV1UsersNotifications(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetV1UsersNotificationsResponse(rsp)
}

// PutV1UsersNotificationsSettingIdWithBodyWithResponse request with arbitrary body returning *PutV1UsersNotificationsSettingIdResponse
func (c *ClientWithResponses) PutV1UsersNotificationsSettingIdWithBodyWithResponse(ctx context.Context, settingId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutV1UsersNotificationsSettingIdResponse, error) {
	rsp, err := c.PutV1UsersNotificationsSettingIdWithBody(ctx, settingId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutV1UsersNotificationsSettingIdResponse(rsp)
}

func (c *ClientWithResponses) PutV1UsersNotificationsSettingIdWithResponse(ctx context.Context, settingId string, body PutV1UsersNotificationsSettingIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PutV1UsersNotificationsSettingIdResponse, error) {
	rsp, err := c.PutV1UsersNotificationsSettingId(ctx, settingId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutV1UsersNotificationsSettingIdResponse(rsp)
}

// PostV1UsersPasswordResetEmailWithBodyWithResponse request with arbitrary body returning *PostV1UsersPasswordResetEmailResponse
func (c *ClientWithResponses) PostV1UsersPasswordResetEmailWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostV1UsersPasswordResetEmailResponse, error) {
	rsp, err := c.PostV1UsersPasswordResetEmailWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostV1UsersPasswordResetEmailResponse(rsp)
}

func (c *ClientWithResponses) PostV1UsersPasswordResetEmailWithResponse(ctx context.Context, body PostV1UsersPasswordResetEmailJSONRequestBody, reqEditors ...RequestEditorFn) (*PostV1UsersPasswordResetEmailResponse, error) {
	rsp, err := c.PostV1UsersPasswordResetEmail(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostV1UsersPasswordResetEmailResponse(rsp)
}

// GetV1UsersProfileWithResponse request returning *GetV1UsersProfileResponse
func (c *ClientWithResponses) GetV1UsersProfileWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetV1UsersProfileResponse, error) {
	rsp, err := c.GetV1UsersProfile(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetV1UsersProfileResponse(rsp)
}

// PutV1UsersProfileWithBodyWithResponse request with arbitrary body returning *PutV1UsersProfileResponse
func (c *ClientWithResponses) PutV1UsersProfileWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutV1UsersProfileResponse, error) {
	rsp, err := c.PutV1UsersProfileWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutV1UsersProfileResponse(rsp)
}

func (c *ClientWithResponses) PutV1UsersProfileWithResponse(ctx context.Context, body PutV1UsersProfileJSONRequestBody, reqEditors ...RequestEditorFn) (*PutV1UsersProfileResponse, error) {
	rsp, err := c.PutV1UsersProfile(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutV1UsersProfileResponse(rsp)
}

// PostV1UsersUsernameRegisterAndroidDeviceWithBodyWithResponse request with arbitrary body returning *PostV1UsersUsernameRegisterAndroidDeviceResponse
func (c *ClientWithResponses) PostV1UsersUsernameRegisterAndroidDeviceWithBodyWithResponse(ctx context.Context, username string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostV1UsersUsernameRegisterAndroidDeviceResponse, error) {
	rsp, err := c.PostV1UsersUsernameRegisterAndroidDeviceWithBody(ctx, username, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostV1UsersUsernameRegisterAndroidDeviceResponse(rsp)
}

func (c *ClientWithResponses) PostV1UsersUsernameRegisterAndroidDeviceWithResponse(ctx context.Context, username string, body PostV1UsersUsernameRegisterAndroidDeviceJSONRequestBody, reqEditors ...RequestEditorFn) (*PostV1UsersUsernameRegisterAndroidDeviceResponse, error) {
	rsp, err := c.PostV1UsersUsernameRegisterAndroidDevice(ctx, username, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostV1UsersUsernameRegisterAndroidDeviceResponse(rsp)
}

// PostV1UsersUsernameToggleFollowWithBodyWithResponse request with arbitrary body returning *PostV1UsersUsernameToggleFollowResponse
func (c *ClientWithResponses) PostV1UsersUsernameToggleFollowWithBodyWithResponse(ctx context.Context, username string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostV1UsersUsernameToggleFollowResponse, error) {
	rsp, err := c.PostV1UsersUsernameToggleFollowWithBody(ctx, username, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostV1UsersUsernameToggleFollowResponse(rsp)
}

func (c *ClientWithResponses) PostV1UsersUsernameToggleFollowWithResponse(ctx context.Context, username string, body PostV1UsersUsernameToggleFollowJSONRequestBody, reqEditors ...RequestEditorFn) (*PostV1UsersUsernameToggleFollowResponse, error) {
	rsp, err := c.PostV1UsersUsernameToggleFollow(ctx, username, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostV1UsersUsernameToggleFollowResponse(rsp)
}

// ParseGetV1ActivityDaysResponse parses an HTTP response from a GetV1ActivityDaysWithResponse call
func ParseGetV1ActivityDaysResponse(rsp *http.Response) (*GetV1ActivityDaysResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetV1ActivityDaysResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Data *[]struct {
				// DailyTargetPages The number of pages user should read on that day to meet their goal's target if a goal was set (will be included only when the type is QURAN)
				DailyTargetPages *GetV1ActivityDays_200_Data_DailyTargetPages `json:"dailyTargetPages,omitempty"`

				// DailyTargetRanges The range of Ayahs user should read on that day to meet their goal's target if a goal was set (will be included only when the type is QURAN)
				DailyTargetRanges *GetV1ActivityDays_200_Data_DailyTargetRanges `json:"dailyTargetRanges,omitempty"`

				// DailyTargetSeconds The number of seconds user should read on that day to meet their goal's target if a goal was set (will be included only when the type is QURAN)
				DailyTargetSeconds *GetV1ActivityDays_200_Data_DailyTargetSeconds `json:"dailyTargetSeconds,omitempty"`

				// Date The date of the activity day.
				Date string `json:"date"`

				// Id The id of the activity day.
				Id string `json:"id"`

				// ManuallyAddedSeconds The number of seconds spent reading that was manually input by the user and not auto-tracked (will be included only when the type is QURAN)
				ManuallyAddedSeconds *GetV1ActivityDays_200_Data_ManuallyAddedSeconds `json:"manuallyAddedSeconds,omitempty"`

				// MushafId The id of the Mushaf being used.
				//
				// 1 = QCFV2
				//
				//   2 = QCFV1
				//
				//   3 = Indopak
				//
				//   4 = UthmaniHafs
				//
				//   5 = KFGQPCHAFS
				//
				//   6 = Indopak15Lines
				//
				//   7 = Indopak16Lines
				//
				//   11 = Tajweeed
				//
				//   19 = QCFTajweedV4
				MushafId GetV1ActivityDays200DataMushafId `json:"mushafId"`

				// PagesRead The number of pages read on that day (will be included only when the type is QURAN)
				PagesRead *GetV1ActivityDays_200_Data_PagesRead `json:"pagesRead,omitempty"`

				// Progress The progress of the reading goal of that activity day (if the user has a reading goal on that day).
				Progress float32 `json:"progress"`

				// Ranges The ranges read on that day (will be included only when the type is QURAN)
				Ranges *GetV1ActivityDays_200_Data_Ranges `json:"ranges,omitempty"`

				// RemainingDailyTargetRanges The remaining range of Ayahs user should read on that day to meet their goal's target if a goal was set (will be included only when the type is QURAN)
				RemainingDailyTargetRanges *GetV1ActivityDays_200_Data_RemainingDailyTargetRanges `json:"remainingDailyTargetRanges,omitempty"`

				// SecondsRead The number of seconds spent reading on that day (will be included only when the type is QURAN)
				SecondsRead *GetV1ActivityDays_200_Data_SecondsRead `json:"secondsRead,omitempty"`

				// Type The type of the activity day
				Type GetV1ActivityDays200DataType `json:"type"`

				// VersesRead The number of Ayahs read on that day (will be included only when the type is QURAN)
				VersesRead *GetV1ActivityDays_200_Data_VersesRead `json:"versesRead,omitempty"`
			} `json:"data,omitempty"`
			Pagination *struct {
				EndCursor       *string `json:"endCursor,omitempty"`
				HasNextPage     *bool   `json:"hasNextPage,omitempty"`
				HasPreviousPage *bool   `json:"hasPreviousPage,omitempty"`
				StartCursor     *string `json:"startCursor,omitempty"`
			} `json:"pagination,omitempty"`
			Success *bool `json:"success,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest struct {
			Message *string `json:"message,omitempty"`
			Success *bool   `json:"success,omitempty"`
			Type    *string `json:"type,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest struct {
			Message *string `json:"message,omitempty"`
			Success *bool   `json:"success,omitempty"`
			Type    *string `json:"type,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest struct {
			Message *string `json:"message,omitempty"`
			Success *bool   `json:"success,omitempty"`
			Type    *string `json:"type,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest struct {
			Message *string `json:"message,omitempty"`
			Success *bool   `json:"success,omitempty"`
			Type    *string `json:"type,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest struct {
			Message *string `json:"message,omitempty"`
			Success *bool   `json:"success,omitempty"`
			Type    *string `json:"type,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest struct {
			Message *string `json:"message,omitempty"`
			Success *bool   `json:"success,omitempty"`
			Type    *string `json:"type,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest struct {
			Message *string `json:"message,omitempty"`
			Success *bool   `json:"success,omitempty"`
			Type    *string `json:"type,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 502:
		var dest struct {
			Message *string `json:"message,omitempty"`
			Success *bool   `json:"success,omitempty"`
			Type    *string `json:"type,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON502 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest struct {
			Message *string `json:"message,omitempty"`
			Success *bool   `json:"success,omitempty"`
			Type    *string `json:"type,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 504:
		var dest struct {
			Message *string `json:"message,omitempty"`
			Success *bool   `json:"success,omitempty"`
			Type    *string `json:"type,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON504 = &dest

	}

	return response, nil
}

// ParsePostV1ActivityDaysResponse parses an HTTP response from a PostV1ActivityDaysWithResponse call
func ParsePostV1ActivityDaysResponse(rsp *http.Response) (*PostV1ActivityDaysResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostV1ActivityDaysResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Data    *map[string]interface{} `json:"data,omitempty"`
			Success *bool                   `json:"success,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest struct {
			Message *string `json:"message,omitempty"`
			Success *bool   `json:"success,omitempty"`
			Type    *string `json:"type,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest struct {
			Message *string `json:"message,omitempty"`
			Success *bool   `json:"success,omitempty"`
			Type    *string `json:"type,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest struct {
			Message *string `json:"message,omitempty"`
			Success *bool   `json:"success,omitempty"`
			Type    *string `json:"type,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest struct {
			Message *string `json:"message,omitempty"`
			Success *bool   `json:"success,omitempty"`
			Type    *string `json:"type,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest struct {
			Message *string `json:"message,omitempty"`
			Success *bool   `json:"success,omitempty"`
			Type    *string `json:"type,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest struct {
			Message *string `json:"message,omitempty"`
			Success *bool   `json:"success,omitempty"`
			Type    *string `json:"type,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest struct {
			Message *string `json:"message,omitempty"`
			Success *bool   `json:"success,omitempty"`
			Type    *string `json:"type,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 502:
		var dest struct {
			Message *string `json:"message,omitempty"`
			Success *bool   `json:"success,omitempty"`
			Type    *string `json:"type,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON502 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest struct {
			Message *string `json:"message,omitempty"`
			Success *bool   `json:"success,omitempty"`
			Type    *string `json:"type,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 504:
		var dest struct {
			Message *string `json:"message,omitempty"`
			Success *bool   `json:"success,omitempty"`
			Type    *string `json:"type,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON504 = &dest

	}

	return response, nil
}

// ParseGetV1ActivityDaysEstimateReadingTimeResponse parses an HTTP response from a GetV1ActivityDaysEstimateReadingTimeWithResponse call
func ParseGetV1ActivityDaysEstimateReadingTimeResponse(rsp *http.Response) (*GetV1ActivityDaysEstimateReadingTimeResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetV1ActivityDaysEstimateReadingTimeResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Data *struct {
				// Seconds The number of seconds it would take on average to read the range of Ayahs.
				Seconds int `json:"seconds"`
			} `json:"data,omitempty"`
			Success *bool `json:"success,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest struct {
			Message *string `json:"message,omitempty"`
			Success *bool   `json:"success,omitempty"`
			Type    *string `json:"type,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest struct {
			Message *string `json:"message,omitempty"`
			Success *bool   `json:"success,omitempty"`
			Type    *string `json:"type,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest struct {
			Message *string `json:"message,omitempty"`
			Success *bool   `json:"success,omitempty"`
			Type    *string `json:"type,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest struct {
			Message *string `json:"message,omitempty"`
			Success *bool   `json:"success,omitempty"`
			Type    *string `json:"type,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest struct {
			Message *string `json:"message,omitempty"`
			Success *bool   `json:"success,omitempty"`
			Type    *string `json:"type,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest struct {
			Message *string `json:"message,omitempty"`
			Success *bool   `json:"success,omitempty"`
			Type    *string `json:"type,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest struct {
			Message *string `json:"message,omitempty"`
			Success *bool   `json:"success,omitempty"`
			Type    *string `json:"type,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 502:
		var dest struct {
			Message *string `json:"message,omitempty"`
			Success *bool   `json:"success,omitempty"`
			Type    *string `json:"type,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON502 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest struct {
			Message *string `json:"message,omitempty"`
			Success *bool   `json:"success,omitempty"`
			Type    *string `json:"type,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 504:
		var dest struct {
			Message *string `json:"message,omitempty"`
			Success *bool   `json:"success,omitempty"`
			Type    *string `json:"type,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON504 = &dest

	}

	return response, nil
}

// ParseGetV1BookmarksResponse parses an HTTP response from a GetV1BookmarksWithResponse call
func ParseGetV1BookmarksResponse(rsp *http.Response) (*GetV1BookmarksResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetV1BookmarksResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Data       *[]Bookmark `json:"data,omitempty"`
			Pagination *struct {
				EndCursor       *string `json:"endCursor,omitempty"`
				HasNextPage     *bool   `json:"hasNextPage,omitempty"`
				HasPreviousPage *bool   `json:"hasPreviousPage,omitempty"`
				StartCursor     *string `json:"startCursor,omitempty"`
			} `json:"pagination,omitempty"`
			Success *bool `json:"success,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest struct {
			Message *string `json:"message,omitempty"`
			Success *bool   `json:"success,omitempty"`
			Type    *string `json:"type,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest struct {
			Message *string `json:"message,omitempty"`
			Success *bool   `json:"success,omitempty"`
			Type    *string `json:"type,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest struct {
			Message *string `json:"message,omitempty"`
			Success *bool   `json:"success,omitempty"`
			Type    *string `json:"type,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest struct {
			Message *string `json:"message,omitempty"`
			Success *bool   `json:"success,omitempty"`
			Type    *string `json:"type,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest struct {
			Message *string `json:"message,omitempty"`
			Success *bool   `json:"success,omitempty"`
			Type    *string `json:"type,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest struct {
			Message *string `json:"message,omitempty"`
			Success *bool   `json:"success,omitempty"`
			Type    *string `json:"type,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest struct {
			Message *string `json:"message,omitempty"`
			Success *bool   `json:"success,omitempty"`
			Type    *string `json:"type,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 502:
		var dest struct {
			Message *string `json:"message,omitempty"`
			Success *bool   `json:"success,omitempty"`
			Type    *string `json:"type,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON502 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest struct {
			Message *string `json:"message,omitempty"`
			Success *bool   `json:"success,omitempty"`
			Type    *string `json:"type,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 504:
		var dest struct {
			Message *string `json:"message,omitempty"`
			Success *bool   `json:"success,omitempty"`
			Type    *string `json:"type,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON504 = &dest

	}

	return response, nil
}

// ParsePostV1BookmarksResponse parses an HTTP response from a PostV1BookmarksWithResponse call
func ParsePostV1BookmarksResponse(rsp *http.Response) (*PostV1BookmarksResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostV1BookmarksResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Data    *Bookmark `json:"data,omitempty"`
			Success *bool     `json:"success,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest struct {
			Message *string `json:"message,omitempty"`
			Success *bool   `json:"success,omitempty"`
			Type    *string `json:"type,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest struct {
			Message *string `json:"message,omitempty"`
			Success *bool   `json:"success,omitempty"`
			Type    *string `json:"type,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest struct {
			Message *string `json:"message,omitempty"`
			Success *bool   `json:"success,omitempty"`
			Type    *string `json:"type,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest struct {
			Message *string `json:"message,omitempty"`
			Success *bool   `json:"success,omitempty"`
			Type    *string `json:"type,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest struct {
			Message *string `json:"message,omitempty"`
			Success *bool   `json:"success,omitempty"`
			Type    *string `json:"type,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest struct {
			Message *string `json:"message,omitempty"`
			Success *bool   `json:"success,omitempty"`
			Type    *string `json:"type,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest struct {
			Message *string `json:"message,omitempty"`
			Success *bool   `json:"success,omitempty"`
			Type    *string `json:"type,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 502:
		var dest struct {
			Message *string `json:"message,omitempty"`
			Success *bool   `json:"success,omitempty"`
			Type    *string `json:"type,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON502 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest struct {
			Message *string `json:"message,omitempty"`
			Success *bool   `json:"success,omitempty"`
			Type    *string `json:"type,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 504:
		var dest struct {
			Message *string `json:"message,omitempty"`
			Success *bool   `json:"success,omitempty"`
			Type    *string `json:"type,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON504 = &dest

	}

	return response, nil
}

// ParseGetV1BookmarksAyahsRangeResponse parses an HTTP response from a GetV1BookmarksAyahsRangeWithResponse call
func ParseGetV1BookmarksAyahsRangeResponse(rsp *http.Response) (*GetV1BookmarksAyahsRangeResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetV1BookmarksAyahsRangeResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Data       *[]Bookmark `json:"data,omitempty"`
			Pagination *struct {
				EndCursor       *string `json:"endCursor,omitempty"`
				HasNextPage     *bool   `json:"hasNextPage,omitempty"`
				HasPreviousPage *bool   `json:"hasPreviousPage,omitempty"`
				StartCursor     *string `json:"startCursor,omitempty"`
			} `json:"pagination,omitempty"`
			Success *bool `json:"success,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest struct {
			Message *string `json:"message,omitempty"`
			Success *bool   `json:"success,omitempty"`
			Type    *string `json:"type,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest struct {
			Message *string `json:"message,omitempty"`
			Success *bool   `json:"success,omitempty"`
			Type    *string `json:"type,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest struct {
			Message *string `json:"message,omitempty"`
			Success *bool   `json:"success,omitempty"`
			Type    *string `json:"type,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest struct {
			Message *string `json:"message,omitempty"`
			Success *bool   `json:"success,omitempty"`
			Type    *string `json:"type,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest struct {
			Message *string `json:"message,omitempty"`
			Success *bool   `json:"success,omitempty"`
			Type    *string `json:"type,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest struct {
			Message *string `json:"message,omitempty"`
			Success *bool   `json:"success,omitempty"`
			Type    *string `json:"type,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest struct {
			Message *string `json:"message,omitempty"`
			Success *bool   `json:"success,omitempty"`
			Type    *string `json:"type,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 502:
		var dest struct {
			Message *string `json:"message,omitempty"`
			Success *bool   `json:"success,omitempty"`
			Type    *string `json:"type,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON502 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest struct {
			Message *string `json:"message,omitempty"`
			Success *bool   `json:"success,omitempty"`
			Type    *string `json:"type,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 504:
		var dest struct {
			Message *string `json:"message,omitempty"`
			Success *bool   `json:"success,omitempty"`
			Type    *string `json:"type,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON504 = &dest

	}

	return response, nil
}

// ParseGetV1BookmarksBookmarkResponse parses an HTTP response from a GetV1BookmarksBookmarkWithResponse call
func ParseGetV1BookmarksBookmarkResponse(rsp *http.Response) (*GetV1BookmarksBookmarkResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetV1BookmarksBookmarkResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Data    *Bookmark `json:"data,omitempty"`
			Success *bool     `json:"success,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest struct {
			Message *string `json:"message,omitempty"`
			Success *bool   `json:"success,omitempty"`
			Type    *string `json:"type,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest struct {
			Message *string `json:"message,omitempty"`
			Success *bool   `json:"success,omitempty"`
			Type    *string `json:"type,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest struct {
			Message *string `json:"message,omitempty"`
			Success *bool   `json:"success,omitempty"`
			Type    *string `json:"type,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest struct {
			Message *string `json:"message,omitempty"`
			Success *bool   `json:"success,omitempty"`
			Type    *string `json:"type,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest struct {
			Message *string `json:"message,omitempty"`
			Success *bool   `json:"success,omitempty"`
			Type    *string `json:"type,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest struct {
			Message *string `json:"message,omitempty"`
			Success *bool   `json:"success,omitempty"`
			Type    *string `json:"type,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest struct {
			Message *string `json:"message,omitempty"`
			Success *bool   `json:"success,omitempty"`
			Type    *string `json:"type,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 502:
		var dest struct {
			Message *string `json:"message,omitempty"`
			Success *bool   `json:"success,omitempty"`
			Type    *string `json:"type,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON502 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest struct {
			Message *string `json:"message,omitempty"`
			Success *bool   `json:"success,omitempty"`
			Type    *string `json:"type,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 504:
		var dest struct {
			Message *string `json:"message,omitempty"`
			Success *bool   `json:"success,omitempty"`
			Type    *string `json:"type,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON504 = &dest

	}

	return response, nil
}

// ParseGetV1BookmarksCollectionsResponse parses an HTTP response from a GetV1BookmarksCollectionsWithResponse call
func ParseGetV1BookmarksCollectionsResponse(rsp *http.Response) (*GetV1BookmarksCollectionsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetV1BookmarksCollectionsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Data    *[]Collection `json:"data,omitempty"`
			Success *bool         `json:"success,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest struct {
			Message *string `json:"message,omitempty"`
			Success *bool   `json:"success,omitempty"`
			Type    *string `json:"type,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest struct {
			Message *string `json:"message,omitempty"`
			Success *bool   `json:"success,omitempty"`
			Type    *string `json:"type,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest struct {
			Message *string `json:"message,omitempty"`
			Success *bool   `json:"success,omitempty"`
			Type    *string `json:"type,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest struct {
			Message *string `json:"message,omitempty"`
			Success *bool   `json:"success,omitempty"`
			Type    *string `json:"type,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest struct {
			Message *string `json:"message,omitempty"`
			Success *bool   `json:"success,omitempty"`
			Type    *string `json:"type,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest struct {
			Message *string `json:"message,omitempty"`
			Success *bool   `json:"success,omitempty"`
			Type    *string `json:"type,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest struct {
			Message *string `json:"message,omitempty"`
			Success *bool   `json:"success,omitempty"`
			Type    *string `json:"type,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 502:
		var dest struct {
			Message *string `json:"message,omitempty"`
			Success *bool   `json:"success,omitempty"`
			Type    *string `json:"type,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON502 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest struct {
			Message *string `json:"message,omitempty"`
			Success *bool   `json:"success,omitempty"`
			Type    *string `json:"type,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 504:
		var dest struct {
			Message *string `json:"message,omitempty"`
			Success *bool   `json:"success,omitempty"`
			Type    *string `json:"type,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON504 = &dest

	}

	return response, nil
}

// ParseDeleteV1BookmarksBookmarkIdResponse parses an HTTP response from a DeleteV1BookmarksBookmarkIdWithResponse call
func ParseDeleteV1BookmarksBookmarkIdResponse(rsp *http.Response) (*DeleteV1BookmarksBookmarkIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteV1BookmarksBookmarkIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Data *struct {
				Message interface{} `json:"message,omitempty"`
			} `json:"data,omitempty"`
			Success *bool `json:"success,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest struct {
			Message *string `json:"message,omitempty"`
			Success *bool   `json:"success,omitempty"`
			Type    *string `json:"type,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest struct {
			Message *string `json:"message,omitempty"`
			Success *bool   `json:"success,omitempty"`
			Type    *string `json:"type,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest struct {
			Message *string `json:"message,omitempty"`
			Success *bool   `json:"success,omitempty"`
			Type    *string `json:"type,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest struct {
			Message *string `json:"message,omitempty"`
			Success *bool   `json:"success,omitempty"`
			Type    *string `json:"type,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest struct {
			Message *string `json:"message,omitempty"`
			Success *bool   `json:"success,omitempty"`
			Type    *string `json:"type,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest struct {
			Message *string `json:"message,omitempty"`
			Success *bool   `json:"success,omitempty"`
			Type    *string `json:"type,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest struct {
			Message *string `json:"message,omitempty"`
			Success *bool   `json:"success,omitempty"`
			Type    *string `json:"type,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 502:
		var dest struct {
			Message *string `json:"message,omitempty"`
			Success *bool   `json:"success,omitempty"`
			Type    *string `json:"type,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON502 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest struct {
			Message *string `json:"message,omitempty"`
			Success *bool   `json:"success,omitempty"`
			Type    *string `json:"type,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 504:
		var dest struct {
			Message *string `json:"message,omitempty"`
			Success *bool   `json:"success,omitempty"`
			Type    *string `json:"type,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON504 = &dest

	}

	return response, nil
}

// ParseGetV1CollectionsResponse parses an HTTP response from a GetV1CollectionsWithResponse call
func ParseGetV1CollectionsResponse(rsp *http.Response) (*GetV1CollectionsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetV1CollectionsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Data       *[]Collection `json:"data,omitempty"`
			Pagination *struct {
				EndCursor       *string `json:"endCursor,omitempty"`
				HasNextPage     *bool   `json:"hasNextPage,omitempty"`
				HasPreviousPage *bool   `json:"hasPreviousPage,omitempty"`
				StartCursor     *string `json:"startCursor,omitempty"`
			} `json:"pagination,omitempty"`
			Success *bool `json:"success,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest struct {
			Message *string `json:"message,omitempty"`
			Success *bool   `json:"success,omitempty"`
			Type    *string `json:"type,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest struct {
			Message *string `json:"message,omitempty"`
			Success *bool   `json:"success,omitempty"`
			Type    *string `json:"type,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest struct {
			Message *string `json:"message,omitempty"`
			Success *bool   `json:"success,omitempty"`
			Type    *string `json:"type,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest struct {
			Message *string `json:"message,omitempty"`
			Success *bool   `json:"success,omitempty"`
			Type    *string `json:"type,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest struct {
			Message *string `json:"message,omitempty"`
			Success *bool   `json:"success,omitempty"`
			Type    *string `json:"type,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest struct {
			Message *string `json:"message,omitempty"`
			Success *bool   `json:"success,omitempty"`
			Type    *string `json:"type,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest struct {
			Message *string `json:"message,omitempty"`
			Success *bool   `json:"success,omitempty"`
			Type    *string `json:"type,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 502:
		var dest struct {
			Message *string `json:"message,omitempty"`
			Success *bool   `json:"success,omitempty"`
			Type    *string `json:"type,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON502 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest struct {
			Message *string `json:"message,omitempty"`
			Success *bool   `json:"success,omitempty"`
			Type    *string `json:"type,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 504:
		var dest struct {
			Message *string `json:"message,omitempty"`
			Success *bool   `json:"success,omitempty"`
			Type    *string `json:"type,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON504 = &dest

	}

	return response, nil
}

// ParsePostV1CollectionsResponse parses an HTTP response from a PostV1CollectionsWithResponse call
func ParsePostV1CollectionsResponse(rsp *http.Response) (*PostV1CollectionsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostV1CollectionsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Data    *Collection `json:"data,omitempty"`
			Success *bool       `json:"success,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest struct {
			Message *string `json:"message,omitempty"`
			Success *bool   `json:"success,omitempty"`
			Type    *string `json:"type,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest struct {
			Message *string `json:"message,omitempty"`
			Success *bool   `json:"success,omitempty"`
			Type    *string `json:"type,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest struct {
			Message *string `json:"message,omitempty"`
			Success *bool   `json:"success,omitempty"`
			Type    *string `json:"type,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest struct {
			Message *string `json:"message,omitempty"`
			Success *bool   `json:"success,omitempty"`
			Type    *string `json:"type,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest struct {
			Message *string `json:"message,omitempty"`
			Success *bool   `json:"success,omitempty"`
			Type    *string `json:"type,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest struct {
			Message *string `json:"message,omitempty"`
			Success *bool   `json:"success,omitempty"`
			Type    *string `json:"type,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest struct {
			Message *string `json:"message,omitempty"`
			Success *bool   `json:"success,omitempty"`
			Type    *string `json:"type,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 502:
		var dest struct {
			Message *string `json:"message,omitempty"`
			Success *bool   `json:"success,omitempty"`
			Type    *string `json:"type,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON502 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest struct {
			Message *string `json:"message,omitempty"`
			Success *bool   `json:"success,omitempty"`
			Type    *string `json:"type,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 504:
		var dest struct {
			Message *string `json:"message,omitempty"`
			Success *bool   `json:"success,omitempty"`
			Type    *string `json:"type,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON504 = &dest

	}

	return response, nil
}

// ParseGetV1CollectionsAllResponse parses an HTTP response from a GetV1CollectionsAllWithResponse call
func ParseGetV1CollectionsAllResponse(rsp *http.Response) (*GetV1CollectionsAllResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetV1CollectionsAllResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Data       *[]Bookmark `json:"data,omitempty"`
			Pagination *struct {
				EndCursor       *string `json:"endCursor,omitempty"`
				HasNextPage     *bool   `json:"hasNextPage,omitempty"`
				HasPreviousPage *bool   `json:"hasPreviousPage,omitempty"`
				StartCursor     *string `json:"startCursor,omitempty"`
			} `json:"pagination,omitempty"`
			Success *bool `json:"success,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest struct {
			Message *string `json:"message,omitempty"`
			Success *bool   `json:"success,omitempty"`
			Type    *string `json:"type,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest struct {
			Message *string `json:"message,omitempty"`
			Success *bool   `json:"success,omitempty"`
			Type    *string `json:"type,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest struct {
			Message *string `json:"message,omitempty"`
			Success *bool   `json:"success,omitempty"`
			Type    *string `json:"type,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest struct {
			Message *string `json:"message,omitempty"`
			Success *bool   `json:"success,omitempty"`
			Type    *string `json:"type,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest struct {
			Message *string `json:"message,omitempty"`
			Success *bool   `json:"success,omitempty"`
			Type    *string `json:"type,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest struct {
			Message *string `json:"message,omitempty"`
			Success *bool   `json:"success,omitempty"`
			Type    *string `json:"type,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest struct {
			Message *string `json:"message,omitempty"`
			Success *bool   `json:"success,omitempty"`
			Type    *string `json:"type,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 502:
		var dest struct {
			Message *string `json:"message,omitempty"`
			Success *bool   `json:"success,omitempty"`
			Type    *string `json:"type,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON502 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest struct {
			Message *string `json:"message,omitempty"`
			Success *bool   `json:"success,omitempty"`
			Type    *string `json:"type,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 504:
		var dest struct {
			Message *string `json:"message,omitempty"`
			Success *bool   `json:"success,omitempty"`
			Type    *string `json:"type,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON504 = &dest

	}

	return response, nil
}

// ParseDeleteV1CollectionsCollectionIdResponse parses an HTTP response from a DeleteV1CollectionsCollectionIdWithResponse call
func ParseDeleteV1CollectionsCollectionIdResponse(rsp *http.Response) (*DeleteV1CollectionsCollectionIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteV1CollectionsCollectionIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Data *struct {
				Message interface{} `json:"message,omitempty"`
			} `json:"data,omitempty"`
			Success *bool `json:"success,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest struct {
			Message *string `json:"message,omitempty"`
			Success *bool   `json:"success,omitempty"`
			Type    *string `json:"type,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest struct {
			Message *string `json:"message,omitempty"`
			Success *bool   `json:"success,omitempty"`
			Type    *string `json:"type,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest struct {
			Message *string `json:"message,omitempty"`
			Success *bool   `json:"success,omitempty"`
			Type    *string `json:"type,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest struct {
			Message *string `json:"message,omitempty"`
			Success *bool   `json:"success,omitempty"`
			Type    *string `json:"type,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest struct {
			Message *string `json:"message,omitempty"`
			Success *bool   `json:"success,omitempty"`
			Type    *string `json:"type,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest struct {
			Message *string `json:"message,omitempty"`
			Success *bool   `json:"success,omitempty"`
			Type    *string `json:"type,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest struct {
			Message *string `json:"message,omitempty"`
			Success *bool   `json:"success,omitempty"`
			Type    *string `json:"type,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 502:
		var dest struct {
			Message *string `json:"message,omitempty"`
			Success *bool   `json:"success,omitempty"`
			Type    *string `json:"type,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON502 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest struct {
			Message *string `json:"message,omitempty"`
			Success *bool   `json:"success,omitempty"`
			Type    *string `json:"type,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 504:
		var dest struct {
			Message *string `json:"message,omitempty"`
			Success *bool   `json:"success,omitempty"`
			Type    *string `json:"type,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON504 = &dest

	}

	return response, nil
}

// ParseGetV1CollectionsCollectionIdResponse parses an HTTP response from a GetV1CollectionsCollectionIdWithResponse call
func ParseGetV1CollectionsCollectionIdResponse(rsp *http.Response) (*GetV1CollectionsCollectionIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetV1CollectionsCollectionIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Data *struct {
				Bookmarks  *[]Bookmark `json:"bookmarks,omitempty"`
				Collection *Collection `json:"collection,omitempty"`
			} `json:"data,omitempty"`
			Pagination *struct {
				EndCursor       *string `json:"endCursor,omitempty"`
				HasNextPage     *bool   `json:"hasNextPage,omitempty"`
				HasPreviousPage *bool   `json:"hasPreviousPage,omitempty"`
				StartCursor     *string `json:"startCursor,omitempty"`
			} `json:"pagination,omitempty"`
			Success *bool `json:"success,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest struct {
			Message *string `json:"message,omitempty"`
			Success *bool   `json:"success,omitempty"`
			Type    *string `json:"type,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest struct {
			Message *string `json:"message,omitempty"`
			Success *bool   `json:"success,omitempty"`
			Type    *string `json:"type,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest struct {
			Message *string `json:"message,omitempty"`
			Success *bool   `json:"success,omitempty"`
			Type    *string `json:"type,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest struct {
			Message *string `json:"message,omitempty"`
			Success *bool   `json:"success,omitempty"`
			Type    *string `json:"type,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest struct {
			Message *string `json:"message,omitempty"`
			Success *bool   `json:"success,omitempty"`
			Type    *string `json:"type,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest struct {
			Message *string `json:"message,omitempty"`
			Success *bool   `json:"success,omitempty"`
			Type    *string `json:"type,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest struct {
			Message *string `json:"message,omitempty"`
			Success *bool   `json:"success,omitempty"`
			Type    *string `json:"type,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 502:
		var dest struct {
			Message *string `json:"message,omitempty"`
			Success *bool   `json:"success,omitempty"`
			Type    *string `json:"type,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON502 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest struct {
			Message *string `json:"message,omitempty"`
			Success *bool   `json:"success,omitempty"`
			Type    *string `json:"type,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 504:
		var dest struct {
			Message *string `json:"message,omitempty"`
			Success *bool   `json:"success,omitempty"`
			Type    *string `json:"type,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON504 = &dest

	}

	return response, nil
}

// ParsePostV1CollectionsCollectionIdResponse parses an HTTP response from a PostV1CollectionsCollectionIdWithResponse call
func ParsePostV1CollectionsCollectionIdResponse(rsp *http.Response) (*PostV1CollectionsCollectionIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostV1CollectionsCollectionIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Data *struct {
				Message interface{} `json:"message,omitempty"`
			} `json:"data,omitempty"`
			Success *bool `json:"success,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest struct {
			Message *string `json:"message,omitempty"`
			Success *bool   `json:"success,omitempty"`
			Type    *string `json:"type,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest struct {
			Message *string `json:"message,omitempty"`
			Success *bool   `json:"success,omitempty"`
			Type    *string `json:"type,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest struct {
			Message *string `json:"message,omitempty"`
			Success *bool   `json:"success,omitempty"`
			Type    *string `json:"type,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest struct {
			Message *string `json:"message,omitempty"`
			Success *bool   `json:"success,omitempty"`
			Type    *string `json:"type,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest struct {
			Message *string `json:"message,omitempty"`
			Success *bool   `json:"success,omitempty"`
			Type    *string `json:"type,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest struct {
			Message *string `json:"message,omitempty"`
			Success *bool   `json:"success,omitempty"`
			Type    *string `json:"type,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest struct {
			Message *string `json:"message,omitempty"`
			Success *bool   `json:"success,omitempty"`
			Type    *string `json:"type,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 502:
		var dest struct {
			Message *string `json:"message,omitempty"`
			Success *bool   `json:"success,omitempty"`
			Type    *string `json:"type,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON502 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest struct {
			Message *string `json:"message,omitempty"`
			Success *bool   `json:"success,omitempty"`
			Type    *string `json:"type,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 504:
		var dest struct {
			Message *string `json:"message,omitempty"`
			Success *bool   `json:"success,omitempty"`
			Type    *string `json:"type,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON504 = &dest

	}

	return response, nil
}

// ParsePostV1CollectionsCollectionIdBookmarksResponse parses an HTTP response from a PostV1CollectionsCollectionIdBookmarksWithResponse call
func ParsePostV1CollectionsCollectionIdBookmarksResponse(rsp *http.Response) (*PostV1CollectionsCollectionIdBookmarksResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostV1CollectionsCollectionIdBookmarksResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Data *struct {
				Message interface{} `json:"message,omitempty"`
			} `json:"data,omitempty"`
			Success *bool `json:"success,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest struct {
			Message *string `json:"message,omitempty"`
			Success *bool   `json:"success,omitempty"`
			Type    *string `json:"type,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest struct {
			Message *string `json:"message,omitempty"`
			Success *bool   `json:"success,omitempty"`
			Type    *string `json:"type,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest struct {
			Message *string `json:"message,omitempty"`
			Success *bool   `json:"success,omitempty"`
			Type    *string `json:"type,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest struct {
			Message *string `json:"message,omitempty"`
			Success *bool   `json:"success,omitempty"`
			Type    *string `json:"type,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest struct {
			Message *string `json:"message,omitempty"`
			Success *bool   `json:"success,omitempty"`
			Type    *string `json:"type,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest struct {
			Message *string `json:"message,omitempty"`
			Success *bool   `json:"success,omitempty"`
			Type    *string `json:"type,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest struct {
			Message *string `json:"message,omitempty"`
			Success *bool   `json:"success,omitempty"`
			Type    *string `json:"type,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 502:
		var dest struct {
			Message *string `json:"message,omitempty"`
			Success *bool   `json:"success,omitempty"`
			Type    *string `json:"type,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON502 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest struct {
			Message *string `json:"message,omitempty"`
			Success *bool   `json:"success,omitempty"`
			Type    *string `json:"type,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 504:
		var dest struct {
			Message *string `json:"message,omitempty"`
			Success *bool   `json:"success,omitempty"`
			Type    *string `json:"type,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON504 = &dest

	}

	return response, nil
}

// ParseDeleteV1CollectionsCollectionIdBookmarksBookmarkIdResponse parses an HTTP response from a DeleteV1CollectionsCollectionIdBookmarksBookmarkIdWithResponse call
func ParseDeleteV1CollectionsCollectionIdBookmarksBookmarkIdResponse(rsp *http.Response) (*DeleteV1CollectionsCollectionIdBookmarksBookmarkIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteV1CollectionsCollectionIdBookmarksBookmarkIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Data *struct {
				Message interface{} `json:"message,omitempty"`
			} `json:"data,omitempty"`
			Success *bool `json:"success,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest struct {
			Message *string `json:"message,omitempty"`
			Success *bool   `json:"success,omitempty"`
			Type    *string `json:"type,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest struct {
			Message *string `json:"message,omitempty"`
			Success *bool   `json:"success,omitempty"`
			Type    *string `json:"type,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest struct {
			Message *string `json:"message,omitempty"`
			Success *bool   `json:"success,omitempty"`
			Type    *string `json:"type,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest struct {
			Message *string `json:"message,omitempty"`
			Success *bool   `json:"success,omitempty"`
			Type    *string `json:"type,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest struct {
			Message *string `json:"message,omitempty"`
			Success *bool   `json:"success,omitempty"`
			Type    *string `json:"type,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest struct {
			Message *string `json:"message,omitempty"`
			Success *bool   `json:"success,omitempty"`
			Type    *string `json:"type,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest struct {
			Message *string `json:"message,omitempty"`
			Success *bool   `json:"success,omitempty"`
			Type    *string `json:"type,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 502:
		var dest struct {
			Message *string `json:"message,omitempty"`
			Success *bool   `json:"success,omitempty"`
			Type    *string `json:"type,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON502 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest struct {
			Message *string `json:"message,omitempty"`
			Success *bool   `json:"success,omitempty"`
			Type    *string `json:"type,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 504:
		var dest struct {
			Message *string `json:"message,omitempty"`
			Success *bool   `json:"success,omitempty"`
			Type    *string `json:"type,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON504 = &dest

	}

	return response, nil
}

// ParsePostV1CommentsResponse parses an HTTP response from a PostV1CommentsWithResponse call
func ParsePostV1CommentsResponse(rsp *http.Response) (*PostV1CommentsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostV1CommentsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Data *struct {
				Message interface{} `json:"message,omitempty"`
			} `json:"data,omitempty"`
			Success *bool `json:"success,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest struct {
			Message *string `json:"message,omitempty"`
			Success *bool   `json:"success,omitempty"`
			Type    *string `json:"type,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest struct {
			Message *string `json:"message,omitempty"`
			Success *bool   `json:"success,omitempty"`
			Type    *string `json:"type,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest struct {
			Message *string `json:"message,omitempty"`
			Success *bool   `json:"success,omitempty"`
			Type    *string `json:"type,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest struct {
			Message *string `json:"message,omitempty"`
			Success *bool   `json:"success,omitempty"`
			Type    *string `json:"type,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest struct {
			Message *string `json:"message,omitempty"`
			Success *bool   `json:"success,omitempty"`
			Type    *string `json:"type,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest struct {
			Message *string `json:"message,omitempty"`
			Success *bool   `json:"success,omitempty"`
			Type    *string `json:"type,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest struct {
			Message *string `json:"message,omitempty"`
			Success *bool   `json:"success,omitempty"`
			Type    *string `json:"type,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 502:
		var dest struct {
			Message *string `json:"message,omitempty"`
			Success *bool   `json:"success,omitempty"`
			Type    *string `json:"type,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON502 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest struct {
			Message *string `json:"message,omitempty"`
			Success *bool   `json:"success,omitempty"`
			Type    *string `json:"type,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 504:
		var dest struct {
			Message *string `json:"message,omitempty"`
			Success *bool   `json:"success,omitempty"`
			Type    *string `json:"type,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON504 = &dest

	}

	return response, nil
}

// ParseDeleteV1CommentsCommentIdResponse parses an HTTP response from a DeleteV1CommentsCommentIdWithResponse call
func ParseDeleteV1CommentsCommentIdResponse(rsp *http.Response) (*DeleteV1CommentsCommentIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteV1CommentsCommentIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Data *struct {
				Message interface{} `json:"message,omitempty"`
			} `json:"data,omitempty"`
			Success *bool `json:"success,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest struct {
			Message *string `json:"message,omitempty"`
			Success *bool   `json:"success,omitempty"`
			Type    *string `json:"type,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest struct {
			Message *string `json:"message,omitempty"`
			Success *bool   `json:"success,omitempty"`
			Type    *string `json:"type,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest struct {
			Message *string `json:"message,omitempty"`
			Success *bool   `json:"success,omitempty"`
			Type    *string `json:"type,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest struct {
			Message *string `json:"message,omitempty"`
			Success *bool   `json:"success,omitempty"`
			Type    *string `json:"type,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest struct {
			Message *string `json:"message,omitempty"`
			Success *bool   `json:"success,omitempty"`
			Type    *string `json:"type,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest struct {
			Message *string `json:"message,omitempty"`
			Success *bool   `json:"success,omitempty"`
			Type    *string `json:"type,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest struct {
			Message *string `json:"message,omitempty"`
			Success *bool   `json:"success,omitempty"`
			Type    *string `json:"type,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 502:
		var dest struct {
			Message *string `json:"message,omitempty"`
			Success *bool   `json:"success,omitempty"`
			Type    *string `json:"type,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON502 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest struct {
			Message *string `json:"message,omitempty"`
			Success *bool   `json:"success,omitempty"`
			Type    *string `json:"type,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 504:
		var dest struct {
			Message *string `json:"message,omitempty"`
			Success *bool   `json:"success,omitempty"`
			Type    *string `json:"type,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON504 = &dest

	}

	return response, nil
}

// ParsePutV1CommentsCommentIdResponse parses an HTTP response from a PutV1CommentsCommentIdWithResponse call
func ParsePutV1CommentsCommentIdResponse(rsp *http.Response) (*PutV1CommentsCommentIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutV1CommentsCommentIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Data *struct {
				Message interface{} `json:"message,omitempty"`
			} `json:"data,omitempty"`
			Success *bool `json:"success,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest struct {
			Message *string `json:"message,omitempty"`
			Success *bool   `json:"success,omitempty"`
			Type    *string `json:"type,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest struct {
			Message *string `json:"message,omitempty"`
			Success *bool   `json:"success,omitempty"`
			Type    *string `json:"type,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest struct {
			Message *string `json:"message,omitempty"`
			Success *bool   `json:"success,omitempty"`
			Type    *string `json:"type,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest struct {
			Message *string `json:"message,omitempty"`
			Success *bool   `json:"success,omitempty"`
			Type    *string `json:"type,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest struct {
			Message *string `json:"message,omitempty"`
			Success *bool   `json:"success,omitempty"`
			Type    *string `json:"type,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest struct {
			Message *string `json:"message,omitempty"`
			Success *bool   `json:"success,omitempty"`
			Type    *string `json:"type,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest struct {
			Message *string `json:"message,omitempty"`
			Success *bool   `json:"success,omitempty"`
			Type    *string `json:"type,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 502:
		var dest struct {
			Message *string `json:"message,omitempty"`
			Success *bool   `json:"success,omitempty"`
			Type    *string `json:"type,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON502 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest struct {
			Message *string `json:"message,omitempty"`
			Success *bool   `json:"success,omitempty"`
			Type    *string `json:"type,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 504:
		var dest struct {
			Message *string `json:"message,omitempty"`
			Success *bool   `json:"success,omitempty"`
			Type    *string `json:"type,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON504 = &dest

	}

	return response, nil
}

// ParsePostV1GoalsResponse parses an HTTP response from a PostV1GoalsWithResponse call
func ParsePostV1GoalsResponse(rsp *http.Response) (*PostV1GoalsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostV1GoalsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Data *struct {
				// Id The id of the goal.
				Id string `json:"id"`
			} `json:"data,omitempty"`
			Success *bool `json:"success,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest struct {
			Message *string `json:"message,omitempty"`
			Success *bool   `json:"success,omitempty"`
			Type    *string `json:"type,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest struct {
			Message *string `json:"message,omitempty"`
			Success *bool   `json:"success,omitempty"`
			Type    *string `json:"type,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest struct {
			Message *string `json:"message,omitempty"`
			Success *bool   `json:"success,omitempty"`
			Type    *string `json:"type,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest struct {
			Message *string `json:"message,omitempty"`
			Success *bool   `json:"success,omitempty"`
			Type    *string `json:"type,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest struct {
			Message *string `json:"message,omitempty"`
			Success *bool   `json:"success,omitempty"`
			Type    *string `json:"type,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest struct {
			Message *string `json:"message,omitempty"`
			Success *bool   `json:"success,omitempty"`
			Type    *string `json:"type,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest struct {
			Message *string `json:"message,omitempty"`
			Success *bool   `json:"success,omitempty"`
			Type    *string `json:"type,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 502:
		var dest struct {
			Message *string `json:"message,omitempty"`
			Success *bool   `json:"success,omitempty"`
			Type    *string `json:"type,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON502 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest struct {
			Message *string `json:"message,omitempty"`
			Success *bool   `json:"success,omitempty"`
			Type    *string `json:"type,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 504:
		var dest struct {
			Message *string `json:"message,omitempty"`
			Success *bool   `json:"success,omitempty"`
			Type    *string `json:"type,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON504 = &dest

	}

	return response, nil
}

// ParseGetV1GoalsEstimateResponse parses an HTTP response from a GetV1GoalsEstimateWithResponse call
func ParseGetV1GoalsEstimateResponse(rsp *http.Response) (*GetV1GoalsEstimateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetV1GoalsEstimateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Data    *EstimatedGoalTimeline `json:"data,omitempty"`
			Success *bool                  `json:"success,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest struct {
			Message *string `json:"message,omitempty"`
			Success *bool   `json:"success,omitempty"`
			Type    *string `json:"type,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest struct {
			Message *string `json:"message,omitempty"`
			Success *bool   `json:"success,omitempty"`
			Type    *string `json:"type,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest struct {
			Message *string `json:"message,omitempty"`
			Success *bool   `json:"success,omitempty"`
			Type    *string `json:"type,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest struct {
			Message *string `json:"message,omitempty"`
			Success *bool   `json:"success,omitempty"`
			Type    *string `json:"type,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest struct {
			Message *string `json:"message,omitempty"`
			Success *bool   `json:"success,omitempty"`
			Type    *string `json:"type,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest struct {
			Message *string `json:"message,omitempty"`
			Success *bool   `json:"success,omitempty"`
			Type    *string `json:"type,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest struct {
			Message *string `json:"message,omitempty"`
			Success *bool   `json:"success,omitempty"`
			Type    *string `json:"type,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 502:
		var dest struct {
			Message *string `json:"message,omitempty"`
			Success *bool   `json:"success,omitempty"`
			Type    *string `json:"type,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON502 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest struct {
			Message *string `json:"message,omitempty"`
			Success *bool   `json:"success,omitempty"`
			Type    *string `json:"type,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 504:
		var dest struct {
			Message *string `json:"message,omitempty"`
			Success *bool   `json:"success,omitempty"`
			Type    *string `json:"type,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON504 = &dest

	}

	return response, nil
}

// ParseGetV1GoalsGetTodaysPlanResponse parses an HTTP response from a GetV1GoalsGetTodaysPlanWithResponse call
func ParseGetV1GoalsGetTodaysPlanResponse(rsp *http.Response) (*GetV1GoalsGetTodaysPlanResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetV1GoalsGetTodaysPlanResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Data    *GetV1GoalsGetTodaysPlan_200_Data `json:"data,omitempty"`
			Success *bool                             `json:"success,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest struct {
			Message *string `json:"message,omitempty"`
			Success *bool   `json:"success,omitempty"`
			Type    *string `json:"type,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest struct {
			Message *string `json:"message,omitempty"`
			Success *bool   `json:"success,omitempty"`
			Type    *string `json:"type,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest struct {
			Message *string `json:"message,omitempty"`
			Success *bool   `json:"success,omitempty"`
			Type    *string `json:"type,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest struct {
			Message *string `json:"message,omitempty"`
			Success *bool   `json:"success,omitempty"`
			Type    *string `json:"type,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest struct {
			Message *string `json:"message,omitempty"`
			Success *bool   `json:"success,omitempty"`
			Type    *string `json:"type,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest struct {
			Message *string `json:"message,omitempty"`
			Success *bool   `json:"success,omitempty"`
			Type    *string `json:"type,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest struct {
			Message *string `json:"message,omitempty"`
			Success *bool   `json:"success,omitempty"`
			Type    *string `json:"type,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 502:
		var dest struct {
			Message *string `json:"message,omitempty"`
			Success *bool   `json:"success,omitempty"`
			Type    *string `json:"type,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON502 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest struct {
			Message *string `json:"message,omitempty"`
			Success *bool   `json:"success,omitempty"`
			Type    *string `json:"type,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 504:
		var dest struct {
			Message *string `json:"message,omitempty"`
			Success *bool   `json:"success,omitempty"`
			Type    *string `json:"type,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON504 = &dest

	}

	return response, nil
}

// ParseDeleteV1GoalsIdResponse parses an HTTP response from a DeleteV1GoalsIdWithResponse call
func ParseDeleteV1GoalsIdResponse(rsp *http.Response) (*DeleteV1GoalsIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteV1GoalsIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Data *struct {
				Message interface{} `json:"message,omitempty"`
			} `json:"data,omitempty"`
			Success *bool `json:"success,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest struct {
			Message *string `json:"message,omitempty"`
			Success *bool   `json:"success,omitempty"`
			Type    *string `json:"type,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest struct {
			Message *string `json:"message,omitempty"`
			Success *bool   `json:"success,omitempty"`
			Type    *string `json:"type,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest struct {
			Message *string `json:"message,omitempty"`
			Success *bool   `json:"success,omitempty"`
			Type    *string `json:"type,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest struct {
			Message *string `json:"message,omitempty"`
			Success *bool   `json:"success,omitempty"`
			Type    *string `json:"type,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest struct {
			Message *string `json:"message,omitempty"`
			Success *bool   `json:"success,omitempty"`
			Type    *string `json:"type,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest struct {
			Message *string `json:"message,omitempty"`
			Success *bool   `json:"success,omitempty"`
			Type    *string `json:"type,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest struct {
			Message *string `json:"message,omitempty"`
			Success *bool   `json:"success,omitempty"`
			Type    *string `json:"type,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 502:
		var dest struct {
			Message *string `json:"message,omitempty"`
			Success *bool   `json:"success,omitempty"`
			Type    *string `json:"type,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON502 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest struct {
			Message *string `json:"message,omitempty"`
			Success *bool   `json:"success,omitempty"`
			Type    *string `json:"type,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 504:
		var dest struct {
			Message *string `json:"message,omitempty"`
			Success *bool   `json:"success,omitempty"`
			Type    *string `json:"type,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON504 = &dest

	}

	return response, nil
}

// ParsePutV1GoalsIdResponse parses an HTTP response from a PutV1GoalsIdWithResponse call
func ParsePutV1GoalsIdResponse(rsp *http.Response) (*PutV1GoalsIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutV1GoalsIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Data    *map[string]interface{} `json:"data,omitempty"`
			Success *bool                   `json:"success,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest struct {
			Message *string `json:"message,omitempty"`
			Success *bool   `json:"success,omitempty"`
			Type    *string `json:"type,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest struct {
			Message *string `json:"message,omitempty"`
			Success *bool   `json:"success,omitempty"`
			Type    *string `json:"type,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest struct {
			Message *string `json:"message,omitempty"`
			Success *bool   `json:"success,omitempty"`
			Type    *string `json:"type,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest struct {
			Message *string `json:"message,omitempty"`
			Success *bool   `json:"success,omitempty"`
			Type    *string `json:"type,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest struct {
			Message *string `json:"message,omitempty"`
			Success *bool   `json:"success,omitempty"`
			Type    *string `json:"type,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest struct {
			Message *string `json:"message,omitempty"`
			Success *bool   `json:"success,omitempty"`
			Type    *string `json:"type,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest struct {
			Message *string `json:"message,omitempty"`
			Success *bool   `json:"success,omitempty"`
			Type    *string `json:"type,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 502:
		var dest struct {
			Message *string `json:"message,omitempty"`
			Success *bool   `json:"success,omitempty"`
			Type    *string `json:"type,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON502 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest struct {
			Message *string `json:"message,omitempty"`
			Success *bool   `json:"success,omitempty"`
			Type    *string `json:"type,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 504:
		var dest struct {
			Message *string `json:"message,omitempty"`
			Success *bool   `json:"success,omitempty"`
			Type    *string `json:"type,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON504 = &dest

	}

	return response, nil
}

// ParseGetV1GroupsResponse parses an HTTP response from a GetV1GroupsWithResponse call
func ParseGetV1GroupsResponse(rsp *http.Response) (*GetV1GroupsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetV1GroupsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Data *struct {
				// Groups List of user groups.
				Groups *[]Room `json:"groups,omitempty"`

				// Pages List of user pages.
				Pages *[]Room `json:"pages,omitempty"`
			} `json:"data,omitempty"`
			Success *bool `json:"success,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest struct {
			Message *string `json:"message,omitempty"`
			Success *bool   `json:"success,omitempty"`
			Type    *string `json:"type,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest struct {
			Message *string `json:"message,omitempty"`
			Success *bool   `json:"success,omitempty"`
			Type    *string `json:"type,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest struct {
			Message *string `json:"message,omitempty"`
			Success *bool   `json:"success,omitempty"`
			Type    *string `json:"type,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest struct {
			Message *string `json:"message,omitempty"`
			Success *bool   `json:"success,omitempty"`
			Type    *string `json:"type,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest struct {
			Message *string `json:"message,omitempty"`
			Success *bool   `json:"success,omitempty"`
			Type    *string `json:"type,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest struct {
			Message *string `json:"message,omitempty"`
			Success *bool   `json:"success,omitempty"`
			Type    *string `json:"type,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest struct {
			Message *string `json:"message,omitempty"`
			Success *bool   `json:"success,omitempty"`
			Type    *string `json:"type,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 502:
		var dest struct {
			Message *string `json:"message,omitempty"`
			Success *bool   `json:"success,omitempty"`
			Type    *string `json:"type,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON502 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest struct {
			Message *string `json:"message,omitempty"`
			Success *bool   `json:"success,omitempty"`
			Type    *string `json:"type,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 504:
		var dest struct {
			Message *string `json:"message,omitempty"`
			Success *bool   `json:"success,omitempty"`
			Type    *string `json:"type,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON504 = &dest

	}

	return response, nil
}

// ParseGetV1GroupsGroupIdResponse parses an HTTP response from a GetV1GroupsGroupIdWithResponse call
func ParseGetV1GroupsGroupIdResponse(rsp *http.Response) (*GetV1GroupsGroupIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetV1GroupsGroupIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Data    *Room `json:"data,omitempty"`
			Success *bool `json:"success,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest struct {
			Message *string `json:"message,omitempty"`
			Success *bool   `json:"success,omitempty"`
			Type    *string `json:"type,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest struct {
			Message *string `json:"message,omitempty"`
			Success *bool   `json:"success,omitempty"`
			Type    *string `json:"type,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest struct {
			Message *string `json:"message,omitempty"`
			Success *bool   `json:"success,omitempty"`
			Type    *string `json:"type,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest struct {
			Message *string `json:"message,omitempty"`
			Success *bool   `json:"success,omitempty"`
			Type    *string `json:"type,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest struct {
			Message *string `json:"message,omitempty"`
			Success *bool   `json:"success,omitempty"`
			Type    *string `json:"type,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest struct {
			Message *string `json:"message,omitempty"`
			Success *bool   `json:"success,omitempty"`
			Type    *string `json:"type,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest struct {
			Message *string `json:"message,omitempty"`
			Success *bool   `json:"success,omitempty"`
			Type    *string `json:"type,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 502:
		var dest struct {
			Message *string `json:"message,omitempty"`
			Success *bool   `json:"success,omitempty"`
			Type    *string `json:"type,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON502 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest struct {
			Message *string `json:"message,omitempty"`
			Success *bool   `json:"success,omitempty"`
			Type    *string `json:"type,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 504:
		var dest struct {
			Message *string `json:"message,omitempty"`
			Success *bool   `json:"success,omitempty"`
			Type    *string `json:"type,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON504 = &dest

	}

	return response, nil
}

// ParsePutV1GroupsGroupIdAssignAsAdminResponse parses an HTTP response from a PutV1GroupsGroupIdAssignAsAdminWithResponse call
func ParsePutV1GroupsGroupIdAssignAsAdminResponse(rsp *http.Response) (*PutV1GroupsGroupIdAssignAsAdminResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutV1GroupsGroupIdAssignAsAdminResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Data *struct {
				Message interface{} `json:"message,omitempty"`
			} `json:"data,omitempty"`
			Success *bool `json:"success,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest struct {
			Message *string `json:"message,omitempty"`
			Success *bool   `json:"success,omitempty"`
			Type    *string `json:"type,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest struct {
			Message *string `json:"message,omitempty"`
			Success *bool   `json:"success,omitempty"`
			Type    *string `json:"type,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest struct {
			Message *string `json:"message,omitempty"`
			Success *bool   `json:"success,omitempty"`
			Type    *string `json:"type,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest struct {
			Message *string `json:"message,omitempty"`
			Success *bool   `json:"success,omitempty"`
			Type    *string `json:"type,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest struct {
			Message *string `json:"message,omitempty"`
			Success *bool   `json:"success,omitempty"`
			Type    *string `json:"type,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest struct {
			Message *string `json:"message,omitempty"`
			Success *bool   `json:"success,omitempty"`
			Type    *string `json:"type,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest struct {
			Message *string `json:"message,omitempty"`
			Success *bool   `json:"success,omitempty"`
			Type    *string `json:"type,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 502:
		var dest struct {
			Message *string `json:"message,omitempty"`
			Success *bool   `json:"success,omitempty"`
			Type    *string `json:"type,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON502 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest struct {
			Message *string `json:"message,omitempty"`
			Success *bool   `json:"success,omitempty"`
			Type    *string `json:"type,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 504:
		var dest struct {
			Message *string `json:"message,omitempty"`
			Success *bool   `json:"success,omitempty"`
			Type    *string `json:"type,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON504 = &dest

	}

	return response, nil
}

// ParsePutV1GroupsGroupIdInviteUserResponse parses an HTTP response from a PutV1GroupsGroupIdInviteUserWithResponse call
func ParsePutV1GroupsGroupIdInviteUserResponse(rsp *http.Response) (*PutV1GroupsGroupIdInviteUserResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutV1GroupsGroupIdInviteUserResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Data *struct {
				Message interface{} `json:"message,omitempty"`
			} `json:"data,omitempty"`
			Success *bool `json:"success,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest struct {
			Message *string `json:"message,omitempty"`
			Success *bool   `json:"success,omitempty"`
			Type    *string `json:"type,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest struct {
			Message *string `json:"message,omitempty"`
			Success *bool   `json:"success,omitempty"`
			Type    *string `json:"type,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest struct {
			Message *string `json:"message,omitempty"`
			Success *bool   `json:"success,omitempty"`
			Type    *string `json:"type,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest struct {
			Message *string `json:"message,omitempty"`
			Success *bool   `json:"success,omitempty"`
			Type    *string `json:"type,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest struct {
			Message *string `json:"message,omitempty"`
			Success *bool   `json:"success,omitempty"`
			Type    *string `json:"type,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest struct {
			Message *string `json:"message,omitempty"`
			Success *bool   `json:"success,omitempty"`
			Type    *string `json:"type,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest struct {
			Message *string `json:"message,omitempty"`
			Success *bool   `json:"success,omitempty"`
			Type    *string `json:"type,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 502:
		var dest struct {
			Message *string `json:"message,omitempty"`
			Success *bool   `json:"success,omitempty"`
			Type    *string `json:"type,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON502 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest struct {
			Message *string `json:"message,omitempty"`
			Success *bool   `json:"success,omitempty"`
			Type    *string `json:"type,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 504:
		var dest struct {
			Message *string `json:"message,omitempty"`
			Success *bool   `json:"success,omitempty"`
			Type    *string `json:"type,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON504 = &dest

	}

	return response, nil
}

// ParsePutV1GroupsGroupIdRemoveUserResponse parses an HTTP response from a PutV1GroupsGroupIdRemoveUserWithResponse call
func ParsePutV1GroupsGroupIdRemoveUserResponse(rsp *http.Response) (*PutV1GroupsGroupIdRemoveUserResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutV1GroupsGroupIdRemoveUserResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Data *struct {
				Message interface{} `json:"message,omitempty"`
			} `json:"data,omitempty"`
			Success *bool `json:"success,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest struct {
			Message *string `json:"message,omitempty"`
			Success *bool   `json:"success,omitempty"`
			Type    *string `json:"type,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest struct {
			Message *string `json:"message,omitempty"`
			Success *bool   `json:"success,omitempty"`
			Type    *string `json:"type,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest struct {
			Message *string `json:"message,omitempty"`
			Success *bool   `json:"success,omitempty"`
			Type    *string `json:"type,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest struct {
			Message *string `json:"message,omitempty"`
			Success *bool   `json:"success,omitempty"`
			Type    *string `json:"type,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest struct {
			Message *string `json:"message,omitempty"`
			Success *bool   `json:"success,omitempty"`
			Type    *string `json:"type,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest struct {
			Message *string `json:"message,omitempty"`
			Success *bool   `json:"success,omitempty"`
			Type    *string `json:"type,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest struct {
			Message *string `json:"message,omitempty"`
			Success *bool   `json:"success,omitempty"`
			Type    *string `json:"type,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 502:
		var dest struct {
			Message *string `json:"message,omitempty"`
			Success *bool   `json:"success,omitempty"`
			Type    *string `json:"type,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON502 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest struct {
			Message *string `json:"message,omitempty"`
			Success *bool   `json:"success,omitempty"`
			Type    *string `json:"type,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 504:
		var dest struct {
			Message *string `json:"message,omitempty"`
			Success *bool   `json:"success,omitempty"`
			Type    *string `json:"type,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON504 = &dest

	}

	return response, nil
}

// ParseGetV1NotesResponse parses an HTTP response from a GetV1NotesWithResponse call
func ParseGetV1NotesResponse(rsp *http.Response) (*GetV1NotesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetV1NotesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Data *[]struct {
				// AttachedEntities An array of attached entities associated with the note.
				AttachedEntities *[]struct {
					// EntityId The unique identifier for the attached entity.
					EntityId string `json:"entityId"`

					// EntityMetadata Additional metadata for the attached entity.
					EntityMetadata *map[string]interface{} `json:"entityMetadata,omitempty"`

					// EntityType The type of the attached entity, must be one of the predefined NoteEntityType values.
					EntityType GetV1Notes200DataAttachedEntitiesEntityType `json:"entityType"`
				} `json:"attachedEntities,omitempty"`

				// Body The main content of the note, must be between the specified minimum and maximum length.
				Body string `json:"body"`

				// CreatedAt The creation date of the note.
				CreatedAt time.Time `json:"createdAt"`

				// Id The unique identifier of the note.
				Id string `json:"id"`

				// Ranges An array of verse ranges associated with the note.
				Ranges *[]string `json:"ranges,omitempty"`

				// Source The source of the note.
				Source *string `json:"source,omitempty"`

				// UpdatedAt The last update date of the note.
				UpdatedAt time.Time `json:"updatedAt"`
			} `json:"data,omitempty"`
			Pagination *struct {
				EndCursor       *string `json:"endCursor,omitempty"`
				HasNextPage     *bool   `json:"hasNextPage,omitempty"`
				HasPreviousPage *bool   `json:"hasPreviousPage,omitempty"`
				StartCursor     *string `json:"startCursor,omitempty"`
			} `json:"pagination,omitempty"`
			Success *bool `json:"success,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest struct {
			Message *string `json:"message,omitempty"`
			Success *bool   `json:"success,omitempty"`
			Type    *string `json:"type,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest struct {
			Message *string `json:"message,omitempty"`
			Success *bool   `json:"success,omitempty"`
			Type    *string `json:"type,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest struct {
			Message *string `json:"message,omitempty"`
			Success *bool   `json:"success,omitempty"`
			Type    *string `json:"type,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest struct {
			Message *string `json:"message,omitempty"`
			Success *bool   `json:"success,omitempty"`
			Type    *string `json:"type,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest struct {
			Message *string `json:"message,omitempty"`
			Success *bool   `json:"success,omitempty"`
			Type    *string `json:"type,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest struct {
			Message *string `json:"message,omitempty"`
			Success *bool   `json:"success,omitempty"`
			Type    *string `json:"type,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest struct {
			Message *string `json:"message,omitempty"`
			Success *bool   `json:"success,omitempty"`
			Type    *string `json:"type,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 502:
		var dest struct {
			Message *string `json:"message,omitempty"`
			Success *bool   `json:"success,omitempty"`
			Type    *string `json:"type,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON502 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest struct {
			Message *string `json:"message,omitempty"`
			Success *bool   `json:"success,omitempty"`
			Type    *string `json:"type,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 504:
		var dest struct {
			Message *string `json:"message,omitempty"`
			Success *bool   `json:"success,omitempty"`
			Type    *string `json:"type,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON504 = &dest

	}

	return response, nil
}

// ParsePostV1NotesResponse parses an HTTP response from a PostV1NotesWithResponse call
func ParsePostV1NotesResponse(rsp *http.Response) (*PostV1NotesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostV1NotesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Data *struct {
				// AttachedEntities An array of attached entities associated with the note.
				AttachedEntities *[]struct {
					// EntityId The unique identifier for the attached entity.
					EntityId string `json:"entityId"`

					// EntityMetadata Additional metadata for the attached entity.
					EntityMetadata *map[string]interface{} `json:"entityMetadata,omitempty"`

					// EntityType The type of the attached entity, must be one of the predefined NoteEntityType values.
					EntityType PostV1Notes200DataAttachedEntitiesEntityType `json:"entityType"`
				} `json:"attachedEntities,omitempty"`

				// Body The main content of the note, must be between the specified minimum and maximum length.
				Body string `json:"body"`

				// CreatedAt The creation date of the note.
				CreatedAt time.Time `json:"createdAt"`

				// Id The unique identifier of the note.
				Id string `json:"id"`

				// Ranges An array of verse ranges associated with the note.
				Ranges *[]string `json:"ranges,omitempty"`

				// Source The source of the note.
				Source *string `json:"source,omitempty"`

				// UpdatedAt The last update date of the note.
				UpdatedAt time.Time `json:"updatedAt"`
			} `json:"data,omitempty"`
			Success *bool `json:"success,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest struct {
			Message *string `json:"message,omitempty"`
			Success *bool   `json:"success,omitempty"`
			Type    *string `json:"type,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest struct {
			Message *string `json:"message,omitempty"`
			Success *bool   `json:"success,omitempty"`
			Type    *string `json:"type,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest struct {
			Message *string `json:"message,omitempty"`
			Success *bool   `json:"success,omitempty"`
			Type    *string `json:"type,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest struct {
			Message *string `json:"message,omitempty"`
			Success *bool   `json:"success,omitempty"`
			Type    *string `json:"type,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest struct {
			Message *string `json:"message,omitempty"`
			Success *bool   `json:"success,omitempty"`
			Type    *string `json:"type,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest struct {
			Message *string `json:"message,omitempty"`
			Success *bool   `json:"success,omitempty"`
			Type    *string `json:"type,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest struct {
			Message *string `json:"message,omitempty"`
			Success *bool   `json:"success,omitempty"`
			Type    *string `json:"type,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 502:
		var dest struct {
			Message *string `json:"message,omitempty"`
			Success *bool   `json:"success,omitempty"`
			Type    *string `json:"type,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON502 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest struct {
			Message *string `json:"message,omitempty"`
			Success *bool   `json:"success,omitempty"`
			Type    *string `json:"type,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 504:
		var dest struct {
			Message *string `json:"message,omitempty"`
			Success *bool   `json:"success,omitempty"`
			Type    *string `json:"type,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON504 = &dest

	}

	return response, nil
}

// ParseGetV1NotesByAttachedEntityResponse parses an HTTP response from a GetV1NotesByAttachedEntityWithResponse call
func ParseGetV1NotesByAttachedEntityResponse(rsp *http.Response) (*GetV1NotesByAttachedEntityResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetV1NotesByAttachedEntityResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Data *[]struct {
				// AttachedEntities An array of attached entities associated with the note.
				AttachedEntities *[]struct {
					// EntityId The unique identifier for the attached entity.
					EntityId string `json:"entityId"`

					// EntityMetadata Additional metadata for the attached entity.
					EntityMetadata *map[string]interface{} `json:"entityMetadata,omitempty"`

					// EntityType The type of the attached entity, must be one of the predefined NoteEntityType values.
					EntityType GetV1NotesByAttachedEntity200DataAttachedEntitiesEntityType `json:"entityType"`
				} `json:"attachedEntities,omitempty"`

				// Body The main content of the note, must be between the specified minimum and maximum length.
				Body string `json:"body"`

				// CreatedAt The creation date of the note.
				CreatedAt time.Time `json:"createdAt"`

				// Id The unique identifier of the note.
				Id string `json:"id"`

				// Ranges An array of verse ranges associated with the note.
				Ranges *[]string `json:"ranges,omitempty"`

				// Source The source of the note.
				Source *string `json:"source,omitempty"`

				// UpdatedAt The last update date of the note.
				UpdatedAt time.Time `json:"updatedAt"`
			} `json:"data,omitempty"`
			Success *bool `json:"success,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest struct {
			Message *string `json:"message,omitempty"`
			Success *bool   `json:"success,omitempty"`
			Type    *string `json:"type,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest struct {
			Message *string `json:"message,omitempty"`
			Success *bool   `json:"success,omitempty"`
			Type    *string `json:"type,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest struct {
			Message *string `json:"message,omitempty"`
			Success *bool   `json:"success,omitempty"`
			Type    *string `json:"type,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest struct {
			Message *string `json:"message,omitempty"`
			Success *bool   `json:"success,omitempty"`
			Type    *string `json:"type,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest struct {
			Message *string `json:"message,omitempty"`
			Success *bool   `json:"success,omitempty"`
			Type    *string `json:"type,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest struct {
			Message *string `json:"message,omitempty"`
			Success *bool   `json:"success,omitempty"`
			Type    *string `json:"type,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest struct {
			Message *string `json:"message,omitempty"`
			Success *bool   `json:"success,omitempty"`
			Type    *string `json:"type,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 502:
		var dest struct {
			Message *string `json:"message,omitempty"`
			Success *bool   `json:"success,omitempty"`
			Type    *string `json:"type,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON502 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest struct {
			Message *string `json:"message,omitempty"`
			Success *bool   `json:"success,omitempty"`
			Type    *string `json:"type,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 504:
		var dest struct {
			Message *string `json:"message,omitempty"`
			Success *bool   `json:"success,omitempty"`
			Type    *string `json:"type,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON504 = &dest

	}

	return response, nil
}

// ParseGetV1NotesByRangeResponse parses an HTTP response from a GetV1NotesByRangeWithResponse call
func ParseGetV1NotesByRangeResponse(rsp *http.Response) (*GetV1NotesByRangeResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetV1NotesByRangeResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Data *[]struct {
				// AttachedEntities An array of attached entities associated with the note.
				AttachedEntities *[]struct {
					// EntityId The unique identifier for the attached entity.
					EntityId string `json:"entityId"`

					// EntityMetadata Additional metadata for the attached entity.
					EntityMetadata *map[string]interface{} `json:"entityMetadata,omitempty"`

					// EntityType The type of the attached entity, must be one of the predefined NoteEntityType values.
					EntityType GetV1NotesByRange200DataAttachedEntitiesEntityType `json:"entityType"`
				} `json:"attachedEntities,omitempty"`

				// Body The main content of the note, must be between the specified minimum and maximum length.
				Body string `json:"body"`

				// CreatedAt The creation date of the note.
				CreatedAt time.Time `json:"createdAt"`

				// Id The unique identifier of the note.
				Id string `json:"id"`

				// Ranges An array of verse ranges associated with the note.
				Ranges *[]string `json:"ranges,omitempty"`

				// Source The source of the note.
				Source *string `json:"source,omitempty"`

				// UpdatedAt The last update date of the note.
				UpdatedAt time.Time `json:"updatedAt"`
			} `json:"data,omitempty"`
			Success *bool `json:"success,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest struct {
			Message *string `json:"message,omitempty"`
			Success *bool   `json:"success,omitempty"`
			Type    *string `json:"type,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest struct {
			Message *string `json:"message,omitempty"`
			Success *bool   `json:"success,omitempty"`
			Type    *string `json:"type,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest struct {
			Message *string `json:"message,omitempty"`
			Success *bool   `json:"success,omitempty"`
			Type    *string `json:"type,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest struct {
			Message *string `json:"message,omitempty"`
			Success *bool   `json:"success,omitempty"`
			Type    *string `json:"type,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest struct {
			Message *string `json:"message,omitempty"`
			Success *bool   `json:"success,omitempty"`
			Type    *string `json:"type,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest struct {
			Message *string `json:"message,omitempty"`
			Success *bool   `json:"success,omitempty"`
			Type    *string `json:"type,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest struct {
			Message *string `json:"message,omitempty"`
			Success *bool   `json:"success,omitempty"`
			Type    *string `json:"type,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 502:
		var dest struct {
			Message *string `json:"message,omitempty"`
			Success *bool   `json:"success,omitempty"`
			Type    *string `json:"type,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON502 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest struct {
			Message *string `json:"message,omitempty"`
			Success *bool   `json:"success,omitempty"`
			Type    *string `json:"type,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 504:
		var dest struct {
			Message *string `json:"message,omitempty"`
			Success *bool   `json:"success,omitempty"`
			Type    *string `json:"type,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON504 = &dest

	}

	return response, nil
}

// ParseGetV1NotesByVerseVerseKeyResponse parses an HTTP response from a GetV1NotesByVerseVerseKeyWithResponse call
func ParseGetV1NotesByVerseVerseKeyResponse(rsp *http.Response) (*GetV1NotesByVerseVerseKeyResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetV1NotesByVerseVerseKeyResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Data *[]struct {
				// AttachedEntities An array of attached entities associated with the note.
				AttachedEntities *[]struct {
					// EntityId The unique identifier for the attached entity.
					EntityId string `json:"entityId"`

					// EntityMetadata Additional metadata for the attached entity.
					EntityMetadata *map[string]interface{} `json:"entityMetadata,omitempty"`

					// EntityType The type of the attached entity, must be one of the predefined NoteEntityType values.
					EntityType GetV1NotesByVerseVerseKey200DataAttachedEntitiesEntityType `json:"entityType"`
				} `json:"attachedEntities,omitempty"`

				// Body The main content of the note, must be between the specified minimum and maximum length.
				Body string `json:"body"`

				// CreatedAt The creation date of the note.
				CreatedAt time.Time `json:"createdAt"`

				// Id The unique identifier of the note.
				Id string `json:"id"`

				// Ranges An array of verse ranges associated with the note.
				Ranges *[]string `json:"ranges,omitempty"`

				// Source The source of the note.
				Source *string `json:"source,omitempty"`

				// UpdatedAt The last update date of the note.
				UpdatedAt time.Time `json:"updatedAt"`
			} `json:"data,omitempty"`
			Pagination *struct {
				EndCursor       *string `json:"endCursor,omitempty"`
				HasNextPage     *bool   `json:"hasNextPage,omitempty"`
				HasPreviousPage *bool   `json:"hasPreviousPage,omitempty"`
				StartCursor     *string `json:"startCursor,omitempty"`
			} `json:"pagination,omitempty"`
			Success *bool `json:"success,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest struct {
			Message *string `json:"message,omitempty"`
			Success *bool   `json:"success,omitempty"`
			Type    *string `json:"type,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest struct {
			Message *string `json:"message,omitempty"`
			Success *bool   `json:"success,omitempty"`
			Type    *string `json:"type,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest struct {
			Message *string `json:"message,omitempty"`
			Success *bool   `json:"success,omitempty"`
			Type    *string `json:"type,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest struct {
			Message *string `json:"message,omitempty"`
			Success *bool   `json:"success,omitempty"`
			Type    *string `json:"type,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest struct {
			Message *string `json:"message,omitempty"`
			Success *bool   `json:"success,omitempty"`
			Type    *string `json:"type,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest struct {
			Message *string `json:"message,omitempty"`
			Success *bool   `json:"success,omitempty"`
			Type    *string `json:"type,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest struct {
			Message *string `json:"message,omitempty"`
			Success *bool   `json:"success,omitempty"`
			Type    *string `json:"type,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 502:
		var dest struct {
			Message *string `json:"message,omitempty"`
			Success *bool   `json:"success,omitempty"`
			Type    *string `json:"type,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON502 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest struct {
			Message *string `json:"message,omitempty"`
			Success *bool   `json:"success,omitempty"`
			Type    *string `json:"type,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 504:
		var dest struct {
			Message *string `json:"message,omitempty"`
			Success *bool   `json:"success,omitempty"`
			Type    *string `json:"type,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON504 = &dest

	}

	return response, nil
}

// ParseGetV1NotesCountWithinRangeResponse parses an HTTP response from a GetV1NotesCountWithinRangeWithResponse call
func ParseGetV1NotesCountWithinRangeResponse(rsp *http.Response) (*GetV1NotesCountWithinRangeResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetV1NotesCountWithinRangeResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			// Data A map of verse keys to note counts, where each key is a verse key and each value is an integer count of notes.
			Data    *map[string]int `json:"data,omitempty"`
			Success *bool           `json:"success,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest struct {
			Message *string `json:"message,omitempty"`
			Success *bool   `json:"success,omitempty"`
			Type    *string `json:"type,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest struct {
			Message *string `json:"message,omitempty"`
			Success *bool   `json:"success,omitempty"`
			Type    *string `json:"type,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest struct {
			Message *string `json:"message,omitempty"`
			Success *bool   `json:"success,omitempty"`
			Type    *string `json:"type,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest struct {
			Message *string `json:"message,omitempty"`
			Success *bool   `json:"success,omitempty"`
			Type    *string `json:"type,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest struct {
			Message *string `json:"message,omitempty"`
			Success *bool   `json:"success,omitempty"`
			Type    *string `json:"type,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest struct {
			Message *string `json:"message,omitempty"`
			Success *bool   `json:"success,omitempty"`
			Type    *string `json:"type,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest struct {
			Message *string `json:"message,omitempty"`
			Success *bool   `json:"success,omitempty"`
			Type    *string `json:"type,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 502:
		var dest struct {
			Message *string `json:"message,omitempty"`
			Success *bool   `json:"success,omitempty"`
			Type    *string `json:"type,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON502 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest struct {
			Message *string `json:"message,omitempty"`
			Success *bool   `json:"success,omitempty"`
			Type    *string `json:"type,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 504:
		var dest struct {
			Message *string `json:"message,omitempty"`
			Success *bool   `json:"success,omitempty"`
			Type    *string `json:"type,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON504 = &dest

	}

	return response, nil
}

// ParseDeleteV1NotesNoteIdResponse parses an HTTP response from a DeleteV1NotesNoteIdWithResponse call
func ParseDeleteV1NotesNoteIdResponse(rsp *http.Response) (*DeleteV1NotesNoteIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteV1NotesNoteIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Data *struct {
				Success *bool `json:"success,omitempty"`
			} `json:"data,omitempty"`
			Success *bool `json:"success,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest struct {
			Message *string `json:"message,omitempty"`
			Success *bool   `json:"success,omitempty"`
			Type    *string `json:"type,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest struct {
			Message *string `json:"message,omitempty"`
			Success *bool   `json:"success,omitempty"`
			Type    *string `json:"type,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest struct {
			Message *string `json:"message,omitempty"`
			Success *bool   `json:"success,omitempty"`
			Type    *string `json:"type,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest struct {
			Message *string `json:"message,omitempty"`
			Success *bool   `json:"success,omitempty"`
			Type    *string `json:"type,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest struct {
			Message *string `json:"message,omitempty"`
			Success *bool   `json:"success,omitempty"`
			Type    *string `json:"type,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest struct {
			Message *string `json:"message,omitempty"`
			Success *bool   `json:"success,omitempty"`
			Type    *string `json:"type,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest struct {
			Message *string `json:"message,omitempty"`
			Success *bool   `json:"success,omitempty"`
			Type    *string `json:"type,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 502:
		var dest struct {
			Message *string `json:"message,omitempty"`
			Success *bool   `json:"success,omitempty"`
			Type    *string `json:"type,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON502 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest struct {
			Message *string `json:"message,omitempty"`
			Success *bool   `json:"success,omitempty"`
			Type    *string `json:"type,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 504:
		var dest struct {
			Message *string `json:"message,omitempty"`
			Success *bool   `json:"success,omitempty"`
			Type    *string `json:"type,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON504 = &dest

	}

	return response, nil
}

// ParseGetV1NotesNoteIdResponse parses an HTTP response from a GetV1NotesNoteIdWithResponse call
func ParseGetV1NotesNoteIdResponse(rsp *http.Response) (*GetV1NotesNoteIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetV1NotesNoteIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Data *struct {
				// AttachedEntities An array of attached entities associated with the note.
				AttachedEntities *[]struct {
					// EntityId The unique identifier for the attached entity.
					EntityId string `json:"entityId"`

					// EntityMetadata Additional metadata for the attached entity.
					EntityMetadata *map[string]interface{} `json:"entityMetadata,omitempty"`

					// EntityType The type of the attached entity, must be one of the predefined NoteEntityType values.
					EntityType GetV1NotesNoteId200DataAttachedEntitiesEntityType `json:"entityType"`
				} `json:"attachedEntities,omitempty"`

				// Body The main content of the note, must be between the specified minimum and maximum length.
				Body string `json:"body"`

				// CreatedAt The creation date of the note.
				CreatedAt time.Time `json:"createdAt"`

				// Id The unique identifier of the note.
				Id string `json:"id"`

				// Ranges An array of verse ranges associated with the note.
				Ranges *[]string `json:"ranges,omitempty"`

				// Source The source of the note.
				Source *string `json:"source,omitempty"`

				// UpdatedAt The last update date of the note.
				UpdatedAt time.Time `json:"updatedAt"`
			} `json:"data,omitempty"`
			Success *bool `json:"success,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest struct {
			Message *string `json:"message,omitempty"`
			Success *bool   `json:"success,omitempty"`
			Type    *string `json:"type,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest struct {
			Message *string `json:"message,omitempty"`
			Success *bool   `json:"success,omitempty"`
			Type    *string `json:"type,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest struct {
			Message *string `json:"message,omitempty"`
			Success *bool   `json:"success,omitempty"`
			Type    *string `json:"type,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest struct {
			Message *string `json:"message,omitempty"`
			Success *bool   `json:"success,omitempty"`
			Type    *string `json:"type,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest struct {
			Message *string `json:"message,omitempty"`
			Success *bool   `json:"success,omitempty"`
			Type    *string `json:"type,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest struct {
			Message *string `json:"message,omitempty"`
			Success *bool   `json:"success,omitempty"`
			Type    *string `json:"type,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest struct {
			Message *string `json:"message,omitempty"`
			Success *bool   `json:"success,omitempty"`
			Type    *string `json:"type,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 502:
		var dest struct {
			Message *string `json:"message,omitempty"`
			Success *bool   `json:"success,omitempty"`
			Type    *string `json:"type,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON502 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest struct {
			Message *string `json:"message,omitempty"`
			Success *bool   `json:"success,omitempty"`
			Type    *string `json:"type,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 504:
		var dest struct {
			Message *string `json:"message,omitempty"`
			Success *bool   `json:"success,omitempty"`
			Type    *string `json:"type,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON504 = &dest

	}

	return response, nil
}

// ParsePatchV1NotesNoteIdResponse parses an HTTP response from a PatchV1NotesNoteIdWithResponse call
func ParsePatchV1NotesNoteIdResponse(rsp *http.Response) (*PatchV1NotesNoteIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PatchV1NotesNoteIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Data *struct {
				// AttachedEntities An array of attached entities associated with the note.
				AttachedEntities *[]struct {
					// EntityId The unique identifier for the attached entity.
					EntityId string `json:"entityId"`

					// EntityMetadata Additional metadata for the attached entity.
					EntityMetadata *map[string]interface{} `json:"entityMetadata,omitempty"`

					// EntityType The type of the attached entity, must be one of the predefined NoteEntityType values.
					EntityType PatchV1NotesNoteId200DataAttachedEntitiesEntityType `json:"entityType"`
				} `json:"attachedEntities,omitempty"`

				// Body The main content of the note, must be between the specified minimum and maximum length.
				Body string `json:"body"`

				// CreatedAt The creation date of the note.
				CreatedAt time.Time `json:"createdAt"`

				// Id The unique identifier of the note.
				Id string `json:"id"`

				// Ranges An array of verse ranges associated with the note.
				Ranges *[]string `json:"ranges,omitempty"`

				// Source The source of the note.
				Source *string `json:"source,omitempty"`

				// UpdatedAt The last update date of the note.
				UpdatedAt time.Time `json:"updatedAt"`
			} `json:"data,omitempty"`
			Success *bool `json:"success,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest struct {
			Message *string `json:"message,omitempty"`
			Success *bool   `json:"success,omitempty"`
			Type    *string `json:"type,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest struct {
			Message *string `json:"message,omitempty"`
			Success *bool   `json:"success,omitempty"`
			Type    *string `json:"type,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest struct {
			Message *string `json:"message,omitempty"`
			Success *bool   `json:"success,omitempty"`
			Type    *string `json:"type,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest struct {
			Message *string `json:"message,omitempty"`
			Success *bool   `json:"success,omitempty"`
			Type    *string `json:"type,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest struct {
			Message *string `json:"message,omitempty"`
			Success *bool   `json:"success,omitempty"`
			Type    *string `json:"type,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest struct {
			Message *string `json:"message,omitempty"`
			Success *bool   `json:"success,omitempty"`
			Type    *string `json:"type,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest struct {
			Message *string `json:"message,omitempty"`
			Success *bool   `json:"success,omitempty"`
			Type    *string `json:"type,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 502:
		var dest struct {
			Message *string `json:"message,omitempty"`
			Success *bool   `json:"success,omitempty"`
			Type    *string `json:"type,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON502 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest struct {
			Message *string `json:"message,omitempty"`
			Success *bool   `json:"success,omitempty"`
			Type    *string `json:"type,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 504:
		var dest struct {
			Message *string `json:"message,omitempty"`
			Success *bool   `json:"success,omitempty"`
			Type    *string `json:"type,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON504 = &dest

	}

	return response, nil
}

// ParsePostV1NotesNoteIdPublishResponse parses an HTTP response from a PostV1NotesNoteIdPublishWithResponse call
func ParsePostV1NotesNoteIdPublishResponse(rsp *http.Response) (*PostV1NotesNoteIdPublishResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostV1NotesNoteIdPublishResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			// Data Response object indicating the success of the note publishing operation and the optional post ID if successful.
			Data *struct {
				PostId  *float32 `json:"postId,omitempty"`
				Success bool     `json:"success"`
			} `json:"data,omitempty"`
			Success *bool `json:"success,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest struct {
			Message *string `json:"message,omitempty"`
			Success *bool   `json:"success,omitempty"`
			Type    *string `json:"type,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest struct {
			Message *string `json:"message,omitempty"`
			Success *bool   `json:"success,omitempty"`
			Type    *string `json:"type,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest struct {
			Message *string `json:"message,omitempty"`
			Success *bool   `json:"success,omitempty"`
			Type    *string `json:"type,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest struct {
			Message *string `json:"message,omitempty"`
			Success *bool   `json:"success,omitempty"`
			Type    *string `json:"type,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest struct {
			Message *string `json:"message,omitempty"`
			Success *bool   `json:"success,omitempty"`
			Type    *string `json:"type,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest struct {
			Message *string `json:"message,omitempty"`
			Success *bool   `json:"success,omitempty"`
			Type    *string `json:"type,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest struct {
			Message *string `json:"message,omitempty"`
			Success *bool   `json:"success,omitempty"`
			Type    *string `json:"type,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 502:
		var dest struct {
			Message *string `json:"message,omitempty"`
			Success *bool   `json:"success,omitempty"`
			Type    *string `json:"type,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON502 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest struct {
			Message *string `json:"message,omitempty"`
			Success *bool   `json:"success,omitempty"`
			Type    *string `json:"type,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 504:
		var dest struct {
			Message *string `json:"message,omitempty"`
			Success *bool   `json:"success,omitempty"`
			Type    *string `json:"type,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON504 = &dest

	}

	return response, nil
}

// ParseGetV1PostsResponse parses an HTTP response from a GetV1PostsWithResponse call
func ParseGetV1PostsResponse(rsp *http.Response) (*GetV1PostsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetV1PostsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Data *struct {
				// Pages Number of pages matching the queried posts
				Pages *int `json:"pages,omitempty"`

				// Posts List of posts
				Posts *[]Post `json:"posts,omitempty"`
			} `json:"data,omitempty"`
			Success *bool `json:"success,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest struct {
			Message *string `json:"message,omitempty"`
			Success *bool   `json:"success,omitempty"`
			Type    *string `json:"type,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest struct {
			Message *string `json:"message,omitempty"`
			Success *bool   `json:"success,omitempty"`
			Type    *string `json:"type,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest struct {
			Message *string `json:"message,omitempty"`
			Success *bool   `json:"success,omitempty"`
			Type    *string `json:"type,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest struct {
			Message *string `json:"message,omitempty"`
			Success *bool   `json:"success,omitempty"`
			Type    *string `json:"type,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest struct {
			Message *string `json:"message,omitempty"`
			Success *bool   `json:"success,omitempty"`
			Type    *string `json:"type,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest struct {
			Message *string `json:"message,omitempty"`
			Success *bool   `json:"success,omitempty"`
			Type    *string `json:"type,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest struct {
			Message *string `json:"message,omitempty"`
			Success *bool   `json:"success,omitempty"`
			Type    *string `json:"type,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 502:
		var dest struct {
			Message *string `json:"message,omitempty"`
			Success *bool   `json:"success,omitempty"`
			Type    *string `json:"type,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON502 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest struct {
			Message *string `json:"message,omitempty"`
			Success *bool   `json:"success,omitempty"`
			Type    *string `json:"type,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 504:
		var dest struct {
			Message *string `json:"message,omitempty"`
			Success *bool   `json:"success,omitempty"`
			Type    *string `json:"type,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON504 = &dest

	}

	return response, nil
}

// ParsePostV1PostsResponse parses an HTTP response from a PostV1PostsWithResponse call
func ParsePostV1PostsResponse(rsp *http.Response) (*PostV1PostsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostV1PostsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Data *struct {
				Message interface{} `json:"message,omitempty"`
				PostId  interface{} `json:"postId,omitempty"`
			} `json:"data,omitempty"`
			Success *bool `json:"success,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest struct {
			Message *string `json:"message,omitempty"`
			Success *bool   `json:"success,omitempty"`
			Type    *string `json:"type,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest struct {
			Message *string `json:"message,omitempty"`
			Success *bool   `json:"success,omitempty"`
			Type    *string `json:"type,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest struct {
			Message *string `json:"message,omitempty"`
			Success *bool   `json:"success,omitempty"`
			Type    *string `json:"type,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest struct {
			Message *string `json:"message,omitempty"`
			Success *bool   `json:"success,omitempty"`
			Type    *string `json:"type,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest struct {
			Message *string `json:"message,omitempty"`
			Success *bool   `json:"success,omitempty"`
			Type    *string `json:"type,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest struct {
			Message *string `json:"message,omitempty"`
			Success *bool   `json:"success,omitempty"`
			Type    *string `json:"type,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest struct {
			Message *string `json:"message,omitempty"`
			Success *bool   `json:"success,omitempty"`
			Type    *string `json:"type,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 502:
		var dest struct {
			Message *string `json:"message,omitempty"`
			Success *bool   `json:"success,omitempty"`
			Type    *string `json:"type,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON502 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest struct {
			Message *string `json:"message,omitempty"`
			Success *bool   `json:"success,omitempty"`
			Type    *string `json:"type,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 504:
		var dest struct {
			Message *string `json:"message,omitempty"`
			Success *bool   `json:"success,omitempty"`
			Type    *string `json:"type,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON504 = &dest

	}

	return response, nil
}

// ParsePostV1PostsReportPostIdResponse parses an HTTP response from a PostV1PostsReportPostIdWithResponse call
func ParsePostV1PostsReportPostIdResponse(rsp *http.Response) (*PostV1PostsReportPostIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostV1PostsReportPostIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Data *struct {
				Message interface{} `json:"message,omitempty"`
			} `json:"data,omitempty"`
			Success *bool `json:"success,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest struct {
			Message *string `json:"message,omitempty"`
			Success *bool   `json:"success,omitempty"`
			Type    *string `json:"type,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest struct {
			Message *string `json:"message,omitempty"`
			Success *bool   `json:"success,omitempty"`
			Type    *string `json:"type,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest struct {
			Message *string `json:"message,omitempty"`
			Success *bool   `json:"success,omitempty"`
			Type    *string `json:"type,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest struct {
			Message *string `json:"message,omitempty"`
			Success *bool   `json:"success,omitempty"`
			Type    *string `json:"type,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest struct {
			Message *string `json:"message,omitempty"`
			Success *bool   `json:"success,omitempty"`
			Type    *string `json:"type,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest struct {
			Message *string `json:"message,omitempty"`
			Success *bool   `json:"success,omitempty"`
			Type    *string `json:"type,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest struct {
			Message *string `json:"message,omitempty"`
			Success *bool   `json:"success,omitempty"`
			Type    *string `json:"type,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 502:
		var dest struct {
			Message *string `json:"message,omitempty"`
			Success *bool   `json:"success,omitempty"`
			Type    *string `json:"type,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON502 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest struct {
			Message *string `json:"message,omitempty"`
			Success *bool   `json:"success,omitempty"`
			Type    *string `json:"type,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 504:
		var dest struct {
			Message *string `json:"message,omitempty"`
			Success *bool   `json:"success,omitempty"`
			Type    *string `json:"type,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON504 = &dest

	}

	return response, nil
}

// ParsePostV1PostsToggleLikePostIdResponse parses an HTTP response from a PostV1PostsToggleLikePostIdWithResponse call
func ParsePostV1PostsToggleLikePostIdResponse(rsp *http.Response) (*PostV1PostsToggleLikePostIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostV1PostsToggleLikePostIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Data *struct {
				Liked *bool `json:"liked,omitempty"`
			} `json:"data,omitempty"`
			Success *bool `json:"success,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest struct {
			Message *string `json:"message,omitempty"`
			Success *bool   `json:"success,omitempty"`
			Type    *string `json:"type,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest struct {
			Message *string `json:"message,omitempty"`
			Success *bool   `json:"success,omitempty"`
			Type    *string `json:"type,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest struct {
			Message *string `json:"message,omitempty"`
			Success *bool   `json:"success,omitempty"`
			Type    *string `json:"type,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest struct {
			Message *string `json:"message,omitempty"`
			Success *bool   `json:"success,omitempty"`
			Type    *string `json:"type,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest struct {
			Message *string `json:"message,omitempty"`
			Success *bool   `json:"success,omitempty"`
			Type    *string `json:"type,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest struct {
			Message *string `json:"message,omitempty"`
			Success *bool   `json:"success,omitempty"`
			Type    *string `json:"type,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest struct {
			Message *string `json:"message,omitempty"`
			Success *bool   `json:"success,omitempty"`
			Type    *string `json:"type,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 502:
		var dest struct {
			Message *string `json:"message,omitempty"`
			Success *bool   `json:"success,omitempty"`
			Type    *string `json:"type,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON502 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest struct {
			Message *string `json:"message,omitempty"`
			Success *bool   `json:"success,omitempty"`
			Type    *string `json:"type,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 504:
		var dest struct {
			Message *string `json:"message,omitempty"`
			Success *bool   `json:"success,omitempty"`
			Type    *string `json:"type,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON504 = &dest

	}

	return response, nil
}

// ParsePostV1PostsToggleSavePostIdResponse parses an HTTP response from a PostV1PostsToggleSavePostIdWithResponse call
func ParsePostV1PostsToggleSavePostIdResponse(rsp *http.Response) (*PostV1PostsToggleSavePostIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostV1PostsToggleSavePostIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Data *struct {
				Saved *bool `json:"saved,omitempty"`
			} `json:"data,omitempty"`
			Success *bool `json:"success,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest struct {
			Message *string `json:"message,omitempty"`
			Success *bool   `json:"success,omitempty"`
			Type    *string `json:"type,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest struct {
			Message *string `json:"message,omitempty"`
			Success *bool   `json:"success,omitempty"`
			Type    *string `json:"type,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest struct {
			Message *string `json:"message,omitempty"`
			Success *bool   `json:"success,omitempty"`
			Type    *string `json:"type,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest struct {
			Message *string `json:"message,omitempty"`
			Success *bool   `json:"success,omitempty"`
			Type    *string `json:"type,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest struct {
			Message *string `json:"message,omitempty"`
			Success *bool   `json:"success,omitempty"`
			Type    *string `json:"type,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest struct {
			Message *string `json:"message,omitempty"`
			Success *bool   `json:"success,omitempty"`
			Type    *string `json:"type,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest struct {
			Message *string `json:"message,omitempty"`
			Success *bool   `json:"success,omitempty"`
			Type    *string `json:"type,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 502:
		var dest struct {
			Message *string `json:"message,omitempty"`
			Success *bool   `json:"success,omitempty"`
			Type    *string `json:"type,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON502 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest struct {
			Message *string `json:"message,omitempty"`
			Success *bool   `json:"success,omitempty"`
			Type    *string `json:"type,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 504:
		var dest struct {
			Message *string `json:"message,omitempty"`
			Success *bool   `json:"success,omitempty"`
			Type    *string `json:"type,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON504 = &dest

	}

	return response, nil
}

// ParsePostV1PostsViewPostIdResponse parses an HTTP response from a PostV1PostsViewPostIdWithResponse call
func ParsePostV1PostsViewPostIdResponse(rsp *http.Response) (*PostV1PostsViewPostIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostV1PostsViewPostIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Data *struct {
				Success *bool `json:"success,omitempty"`
			} `json:"data,omitempty"`
			Success *bool `json:"success,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest struct {
			Message *string `json:"message,omitempty"`
			Success *bool   `json:"success,omitempty"`
			Type    *string `json:"type,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest struct {
			Message *string `json:"message,omitempty"`
			Success *bool   `json:"success,omitempty"`
			Type    *string `json:"type,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest struct {
			Message *string `json:"message,omitempty"`
			Success *bool   `json:"success,omitempty"`
			Type    *string `json:"type,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest struct {
			Message *string `json:"message,omitempty"`
			Success *bool   `json:"success,omitempty"`
			Type    *string `json:"type,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest struct {
			Message *string `json:"message,omitempty"`
			Success *bool   `json:"success,omitempty"`
			Type    *string `json:"type,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest struct {
			Message *string `json:"message,omitempty"`
			Success *bool   `json:"success,omitempty"`
			Type    *string `json:"type,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest struct {
			Message *string `json:"message,omitempty"`
			Success *bool   `json:"success,omitempty"`
			Type    *string `json:"type,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 502:
		var dest struct {
			Message *string `json:"message,omitempty"`
			Success *bool   `json:"success,omitempty"`
			Type    *string `json:"type,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON502 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest struct {
			Message *string `json:"message,omitempty"`
			Success *bool   `json:"success,omitempty"`
			Type    *string `json:"type,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 504:
		var dest struct {
			Message *string `json:"message,omitempty"`
			Success *bool   `json:"success,omitempty"`
			Type    *string `json:"type,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON504 = &dest

	}

	return response, nil
}

// ParseDeleteV1PostsPostIdResponse parses an HTTP response from a DeleteV1PostsPostIdWithResponse call
func ParseDeleteV1PostsPostIdResponse(rsp *http.Response) (*DeleteV1PostsPostIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteV1PostsPostIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Data *struct {
				Message interface{} `json:"message,omitempty"`
			} `json:"data,omitempty"`
			Success *bool `json:"success,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest struct {
			Message *string `json:"message,omitempty"`
			Success *bool   `json:"success,omitempty"`
			Type    *string `json:"type,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest struct {
			Message *string `json:"message,omitempty"`
			Success *bool   `json:"success,omitempty"`
			Type    *string `json:"type,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest struct {
			Message *string `json:"message,omitempty"`
			Success *bool   `json:"success,omitempty"`
			Type    *string `json:"type,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest struct {
			Message *string `json:"message,omitempty"`
			Success *bool   `json:"success,omitempty"`
			Type    *string `json:"type,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest struct {
			Message *string `json:"message,omitempty"`
			Success *bool   `json:"success,omitempty"`
			Type    *string `json:"type,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest struct {
			Message *string `json:"message,omitempty"`
			Success *bool   `json:"success,omitempty"`
			Type    *string `json:"type,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest struct {
			Message *string `json:"message,omitempty"`
			Success *bool   `json:"success,omitempty"`
			Type    *string `json:"type,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 502:
		var dest struct {
			Message *string `json:"message,omitempty"`
			Success *bool   `json:"success,omitempty"`
			Type    *string `json:"type,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON502 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest struct {
			Message *string `json:"message,omitempty"`
			Success *bool   `json:"success,omitempty"`
			Type    *string `json:"type,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 504:
		var dest struct {
			Message *string `json:"message,omitempty"`
			Success *bool   `json:"success,omitempty"`
			Type    *string `json:"type,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON504 = &dest

	}

	return response, nil
}

// ParseGetV1PostsPostIdResponse parses an HTTP response from a GetV1PostsPostIdWithResponse call
func ParseGetV1PostsPostIdResponse(rsp *http.Response) (*GetV1PostsPostIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetV1PostsPostIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Data    *Post `json:"data,omitempty"`
			Success *bool `json:"success,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest struct {
			Message *string `json:"message,omitempty"`
			Success *bool   `json:"success,omitempty"`
			Type    *string `json:"type,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest struct {
			Message *string `json:"message,omitempty"`
			Success *bool   `json:"success,omitempty"`
			Type    *string `json:"type,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest struct {
			Message *string `json:"message,omitempty"`
			Success *bool   `json:"success,omitempty"`
			Type    *string `json:"type,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest struct {
			Message *string `json:"message,omitempty"`
			Success *bool   `json:"success,omitempty"`
			Type    *string `json:"type,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest struct {
			Message *string `json:"message,omitempty"`
			Success *bool   `json:"success,omitempty"`
			Type    *string `json:"type,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest struct {
			Message *string `json:"message,omitempty"`
			Success *bool   `json:"success,omitempty"`
			Type    *string `json:"type,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest struct {
			Message *string `json:"message,omitempty"`
			Success *bool   `json:"success,omitempty"`
			Type    *string `json:"type,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 502:
		var dest struct {
			Message *string `json:"message,omitempty"`
			Success *bool   `json:"success,omitempty"`
			Type    *string `json:"type,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON502 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest struct {
			Message *string `json:"message,omitempty"`
			Success *bool   `json:"success,omitempty"`
			Type    *string `json:"type,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 504:
		var dest struct {
			Message *string `json:"message,omitempty"`
			Success *bool   `json:"success,omitempty"`
			Type    *string `json:"type,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON504 = &dest

	}

	return response, nil
}

// ParsePutV1PostsPostIdResponse parses an HTTP response from a PutV1PostsPostIdWithResponse call
func ParsePutV1PostsPostIdResponse(rsp *http.Response) (*PutV1PostsPostIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutV1PostsPostIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Data *struct {
				Message interface{} `json:"message,omitempty"`
			} `json:"data,omitempty"`
			Success *bool `json:"success,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest struct {
			Message *string `json:"message,omitempty"`
			Success *bool   `json:"success,omitempty"`
			Type    *string `json:"type,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest struct {
			Message *string `json:"message,omitempty"`
			Success *bool   `json:"success,omitempty"`
			Type    *string `json:"type,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest struct {
			Message *string `json:"message,omitempty"`
			Success *bool   `json:"success,omitempty"`
			Type    *string `json:"type,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest struct {
			Message *string `json:"message,omitempty"`
			Success *bool   `json:"success,omitempty"`
			Type    *string `json:"type,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest struct {
			Message *string `json:"message,omitempty"`
			Success *bool   `json:"success,omitempty"`
			Type    *string `json:"type,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest struct {
			Message *string `json:"message,omitempty"`
			Success *bool   `json:"success,omitempty"`
			Type    *string `json:"type,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest struct {
			Message *string `json:"message,omitempty"`
			Success *bool   `json:"success,omitempty"`
			Type    *string `json:"type,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 502:
		var dest struct {
			Message *string `json:"message,omitempty"`
			Success *bool   `json:"success,omitempty"`
			Type    *string `json:"type,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON502 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest struct {
			Message *string `json:"message,omitempty"`
			Success *bool   `json:"success,omitempty"`
			Type    *string `json:"type,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 504:
		var dest struct {
			Message *string `json:"message,omitempty"`
			Success *bool   `json:"success,omitempty"`
			Type    *string `json:"type,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON504 = &dest

	}

	return response, nil
}

// ParseGetV1PostsPostIdCommentsResponse parses an HTTP response from a GetV1PostsPostIdCommentsWithResponse call
func ParseGetV1PostsPostIdCommentsResponse(rsp *http.Response) (*GetV1PostsPostIdCommentsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetV1PostsPostIdCommentsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Data *struct {
				// Comments List of comments that belong to the post.
				Comments *[]Comment `json:"comments,omitempty"`
			} `json:"data,omitempty"`
			Success *bool `json:"success,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest struct {
			Message *string `json:"message,omitempty"`
			Success *bool   `json:"success,omitempty"`
			Type    *string `json:"type,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest struct {
			Message *string `json:"message,omitempty"`
			Success *bool   `json:"success,omitempty"`
			Type    *string `json:"type,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest struct {
			Message *string `json:"message,omitempty"`
			Success *bool   `json:"success,omitempty"`
			Type    *string `json:"type,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest struct {
			Message *string `json:"message,omitempty"`
			Success *bool   `json:"success,omitempty"`
			Type    *string `json:"type,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest struct {
			Message *string `json:"message,omitempty"`
			Success *bool   `json:"success,omitempty"`
			Type    *string `json:"type,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest struct {
			Message *string `json:"message,omitempty"`
			Success *bool   `json:"success,omitempty"`
			Type    *string `json:"type,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest struct {
			Message *string `json:"message,omitempty"`
			Success *bool   `json:"success,omitempty"`
			Type    *string `json:"type,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 502:
		var dest struct {
			Message *string `json:"message,omitempty"`
			Success *bool   `json:"success,omitempty"`
			Type    *string `json:"type,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON502 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest struct {
			Message *string `json:"message,omitempty"`
			Success *bool   `json:"success,omitempty"`
			Type    *string `json:"type,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 504:
		var dest struct {
			Message *string `json:"message,omitempty"`
			Success *bool   `json:"success,omitempty"`
			Type    *string `json:"type,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON504 = &dest

	}

	return response, nil
}

// ParseGetV1PreferencesResponse parses an HTTP response from a GetV1PreferencesWithResponse call
func ParseGetV1PreferencesResponse(rsp *http.Response) (*GetV1PreferencesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetV1PreferencesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Data    *Preference `json:"data,omitempty"`
			Success *bool       `json:"success,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest struct {
			Message *string `json:"message,omitempty"`
			Success *bool   `json:"success,omitempty"`
			Type    *string `json:"type,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest struct {
			Message *string `json:"message,omitempty"`
			Success *bool   `json:"success,omitempty"`
			Type    *string `json:"type,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest struct {
			Message *string `json:"message,omitempty"`
			Success *bool   `json:"success,omitempty"`
			Type    *string `json:"type,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest struct {
			Message *string `json:"message,omitempty"`
			Success *bool   `json:"success,omitempty"`
			Type    *string `json:"type,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest struct {
			Message *string `json:"message,omitempty"`
			Success *bool   `json:"success,omitempty"`
			Type    *string `json:"type,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest struct {
			Message *string `json:"message,omitempty"`
			Success *bool   `json:"success,omitempty"`
			Type    *string `json:"type,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest struct {
			Message *string `json:"message,omitempty"`
			Success *bool   `json:"success,omitempty"`
			Type    *string `json:"type,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 502:
		var dest struct {
			Message *string `json:"message,omitempty"`
			Success *bool   `json:"success,omitempty"`
			Type    *string `json:"type,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON502 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest struct {
			Message *string `json:"message,omitempty"`
			Success *bool   `json:"success,omitempty"`
			Type    *string `json:"type,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 504:
		var dest struct {
			Message *string `json:"message,omitempty"`
			Success *bool   `json:"success,omitempty"`
			Type    *string `json:"type,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON504 = &dest

	}

	return response, nil
}

// ParsePostV1PreferencesResponse parses an HTTP response from a PostV1PreferencesWithResponse call
func ParsePostV1PreferencesResponse(rsp *http.Response) (*PostV1PreferencesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostV1PreferencesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Data *struct {
				Message interface{} `json:"message,omitempty"`
			} `json:"data,omitempty"`
			Success *bool `json:"success,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest struct {
			Message *string `json:"message,omitempty"`
			Success *bool   `json:"success,omitempty"`
			Type    *string `json:"type,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest struct {
			Message *string `json:"message,omitempty"`
			Success *bool   `json:"success,omitempty"`
			Type    *string `json:"type,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest struct {
			Message *string `json:"message,omitempty"`
			Success *bool   `json:"success,omitempty"`
			Type    *string `json:"type,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest struct {
			Message *string `json:"message,omitempty"`
			Success *bool   `json:"success,omitempty"`
			Type    *string `json:"type,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest struct {
			Message *string `json:"message,omitempty"`
			Success *bool   `json:"success,omitempty"`
			Type    *string `json:"type,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest struct {
			Message *string `json:"message,omitempty"`
			Success *bool   `json:"success,omitempty"`
			Type    *string `json:"type,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest struct {
			Message *string `json:"message,omitempty"`
			Success *bool   `json:"success,omitempty"`
			Type    *string `json:"type,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 502:
		var dest struct {
			Message *string `json:"message,omitempty"`
			Success *bool   `json:"success,omitempty"`
			Type    *string `json:"type,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON502 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest struct {
			Message *string `json:"message,omitempty"`
			Success *bool   `json:"success,omitempty"`
			Type    *string `json:"type,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 504:
		var dest struct {
			Message *string `json:"message,omitempty"`
			Success *bool   `json:"success,omitempty"`
			Type    *string `json:"type,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON504 = &dest

	}

	return response, nil
}

// ParsePostV1PreferencesBulkResponse parses an HTTP response from a PostV1PreferencesBulkWithResponse call
func ParsePostV1PreferencesBulkResponse(rsp *http.Response) (*PostV1PreferencesBulkResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostV1PreferencesBulkResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Data *struct {
				Message interface{} `json:"message,omitempty"`
			} `json:"data,omitempty"`
			Success *bool `json:"success,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest struct {
			Message *string `json:"message,omitempty"`
			Success *bool   `json:"success,omitempty"`
			Type    *string `json:"type,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest struct {
			Message *string `json:"message,omitempty"`
			Success *bool   `json:"success,omitempty"`
			Type    *string `json:"type,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest struct {
			Message *string `json:"message,omitempty"`
			Success *bool   `json:"success,omitempty"`
			Type    *string `json:"type,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest struct {
			Message *string `json:"message,omitempty"`
			Success *bool   `json:"success,omitempty"`
			Type    *string `json:"type,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest struct {
			Message *string `json:"message,omitempty"`
			Success *bool   `json:"success,omitempty"`
			Type    *string `json:"type,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest struct {
			Message *string `json:"message,omitempty"`
			Success *bool   `json:"success,omitempty"`
			Type    *string `json:"type,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest struct {
			Message *string `json:"message,omitempty"`
			Success *bool   `json:"success,omitempty"`
			Type    *string `json:"type,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 502:
		var dest struct {
			Message *string `json:"message,omitempty"`
			Success *bool   `json:"success,omitempty"`
			Type    *string `json:"type,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON502 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest struct {
			Message *string `json:"message,omitempty"`
			Success *bool   `json:"success,omitempty"`
			Type    *string `json:"type,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 504:
		var dest struct {
			Message *string `json:"message,omitempty"`
			Success *bool   `json:"success,omitempty"`
			Type    *string `json:"type,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON504 = &dest

	}

	return response, nil
}

// ParseGetV1ReadingSessionsResponse parses an HTTP response from a GetV1ReadingSessionsWithResponse call
func ParseGetV1ReadingSessionsResponse(rsp *http.Response) (*GetV1ReadingSessionsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetV1ReadingSessionsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Data       *[]ReadingSession `json:"data,omitempty"`
			Pagination *struct {
				EndCursor       *string `json:"endCursor,omitempty"`
				HasNextPage     *bool   `json:"hasNextPage,omitempty"`
				HasPreviousPage *bool   `json:"hasPreviousPage,omitempty"`
				StartCursor     *string `json:"startCursor,omitempty"`
			} `json:"pagination,omitempty"`
			Success *bool `json:"success,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest struct {
			Message *string `json:"message,omitempty"`
			Success *bool   `json:"success,omitempty"`
			Type    *string `json:"type,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest struct {
			Message *string `json:"message,omitempty"`
			Success *bool   `json:"success,omitempty"`
			Type    *string `json:"type,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest struct {
			Message *string `json:"message,omitempty"`
			Success *bool   `json:"success,omitempty"`
			Type    *string `json:"type,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest struct {
			Message *string `json:"message,omitempty"`
			Success *bool   `json:"success,omitempty"`
			Type    *string `json:"type,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest struct {
			Message *string `json:"message,omitempty"`
			Success *bool   `json:"success,omitempty"`
			Type    *string `json:"type,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest struct {
			Message *string `json:"message,omitempty"`
			Success *bool   `json:"success,omitempty"`
			Type    *string `json:"type,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest struct {
			Message *string `json:"message,omitempty"`
			Success *bool   `json:"success,omitempty"`
			Type    *string `json:"type,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 502:
		var dest struct {
			Message *string `json:"message,omitempty"`
			Success *bool   `json:"success,omitempty"`
			Type    *string `json:"type,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON502 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest struct {
			Message *string `json:"message,omitempty"`
			Success *bool   `json:"success,omitempty"`
			Type    *string `json:"type,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 504:
		var dest struct {
			Message *string `json:"message,omitempty"`
			Success *bool   `json:"success,omitempty"`
			Type    *string `json:"type,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON504 = &dest

	}

	return response, nil
}

// ParsePostV1ReadingSessionsResponse parses an HTTP response from a PostV1ReadingSessionsWithResponse call
func ParsePostV1ReadingSessionsResponse(rsp *http.Response) (*PostV1ReadingSessionsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostV1ReadingSessionsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Data *struct {
				Message interface{} `json:"message,omitempty"`
			} `json:"data,omitempty"`
			Success *bool `json:"success,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest struct {
			Message *string `json:"message,omitempty"`
			Success *bool   `json:"success,omitempty"`
			Type    *string `json:"type,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest struct {
			Message *string `json:"message,omitempty"`
			Success *bool   `json:"success,omitempty"`
			Type    *string `json:"type,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest struct {
			Message *string `json:"message,omitempty"`
			Success *bool   `json:"success,omitempty"`
			Type    *string `json:"type,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest struct {
			Message *string `json:"message,omitempty"`
			Success *bool   `json:"success,omitempty"`
			Type    *string `json:"type,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest struct {
			Message *string `json:"message,omitempty"`
			Success *bool   `json:"success,omitempty"`
			Type    *string `json:"type,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest struct {
			Message *string `json:"message,omitempty"`
			Success *bool   `json:"success,omitempty"`
			Type    *string `json:"type,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest struct {
			Message *string `json:"message,omitempty"`
			Success *bool   `json:"success,omitempty"`
			Type    *string `json:"type,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 502:
		var dest struct {
			Message *string `json:"message,omitempty"`
			Success *bool   `json:"success,omitempty"`
			Type    *string `json:"type,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON502 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest struct {
			Message *string `json:"message,omitempty"`
			Success *bool   `json:"success,omitempty"`
			Type    *string `json:"type,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 504:
		var dest struct {
			Message *string `json:"message,omitempty"`
			Success *bool   `json:"success,omitempty"`
			Type    *string `json:"type,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON504 = &dest

	}

	return response, nil
}

// ParseGetV1StreaksResponse parses an HTTP response from a GetV1StreaksWithResponse call
func ParseGetV1StreaksResponse(rsp *http.Response) (*GetV1StreaksResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetV1StreaksResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Data *[]struct {
				// Days The number of days the streak is/was active for.
				Days int `json:"days"`

				// EndDate The date of the streak.
				EndDate string `json:"endDate"`

				// Id The id of the streak.
				Id string `json:"id"`

				// StartDate The date of the streak.
				StartDate string `json:"startDate"`

				// Status The status of the streak.
				Status GetV1Streaks200DataStatus `json:"status"`
			} `json:"data,omitempty"`
			Pagination *struct {
				EndCursor       *string `json:"endCursor,omitempty"`
				HasNextPage     *bool   `json:"hasNextPage,omitempty"`
				HasPreviousPage *bool   `json:"hasPreviousPage,omitempty"`
				StartCursor     *string `json:"startCursor,omitempty"`
			} `json:"pagination,omitempty"`
			Success *bool `json:"success,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest struct {
			Message *string `json:"message,omitempty"`
			Success *bool   `json:"success,omitempty"`
			Type    *string `json:"type,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest struct {
			Message *string `json:"message,omitempty"`
			Success *bool   `json:"success,omitempty"`
			Type    *string `json:"type,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest struct {
			Message *string `json:"message,omitempty"`
			Success *bool   `json:"success,omitempty"`
			Type    *string `json:"type,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest struct {
			Message *string `json:"message,omitempty"`
			Success *bool   `json:"success,omitempty"`
			Type    *string `json:"type,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest struct {
			Message *string `json:"message,omitempty"`
			Success *bool   `json:"success,omitempty"`
			Type    *string `json:"type,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest struct {
			Message *string `json:"message,omitempty"`
			Success *bool   `json:"success,omitempty"`
			Type    *string `json:"type,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest struct {
			Message *string `json:"message,omitempty"`
			Success *bool   `json:"success,omitempty"`
			Type    *string `json:"type,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 502:
		var dest struct {
			Message *string `json:"message,omitempty"`
			Success *bool   `json:"success,omitempty"`
			Type    *string `json:"type,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON502 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest struct {
			Message *string `json:"message,omitempty"`
			Success *bool   `json:"success,omitempty"`
			Type    *string `json:"type,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 504:
		var dest struct {
			Message *string `json:"message,omitempty"`
			Success *bool   `json:"success,omitempty"`
			Type    *string `json:"type,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON504 = &dest

	}

	return response, nil
}

// ParseGetV1StreaksCurrentStreakDaysResponse parses an HTTP response from a GetV1StreaksCurrentStreakDaysWithResponse call
func ParseGetV1StreaksCurrentStreakDaysResponse(rsp *http.Response) (*GetV1StreaksCurrentStreakDaysResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetV1StreaksCurrentStreakDaysResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Data *[]struct {
				// Days The number of days the current streak is active for.
				Days int `json:"days"`
			} `json:"data,omitempty"`
			Success *bool `json:"success,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest struct {
			Message *string `json:"message,omitempty"`
			Success *bool   `json:"success,omitempty"`
			Type    *string `json:"type,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest struct {
			Message *string `json:"message,omitempty"`
			Success *bool   `json:"success,omitempty"`
			Type    *string `json:"type,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest struct {
			Message *string `json:"message,omitempty"`
			Success *bool   `json:"success,omitempty"`
			Type    *string `json:"type,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest struct {
			Message *string `json:"message,omitempty"`
			Success *bool   `json:"success,omitempty"`
			Type    *string `json:"type,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest struct {
			Message *string `json:"message,omitempty"`
			Success *bool   `json:"success,omitempty"`
			Type    *string `json:"type,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest struct {
			Message *string `json:"message,omitempty"`
			Success *bool   `json:"success,omitempty"`
			Type    *string `json:"type,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest struct {
			Message *string `json:"message,omitempty"`
			Success *bool   `json:"success,omitempty"`
			Type    *string `json:"type,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 502:
		var dest struct {
			Message *string `json:"message,omitempty"`
			Success *bool   `json:"success,omitempty"`
			Type    *string `json:"type,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON502 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest struct {
			Message *string `json:"message,omitempty"`
			Success *bool   `json:"success,omitempty"`
			Type    *string `json:"type,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 504:
		var dest struct {
			Message *string `json:"message,omitempty"`
			Success *bool   `json:"success,omitempty"`
			Type    *string `json:"type,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON504 = &dest

	}

	return response, nil
}

// ParsePostV1UsersConfirmationEmailResponse parses an HTTP response from a PostV1UsersConfirmationEmailWithResponse call
func ParsePostV1UsersConfirmationEmailResponse(rsp *http.Response) (*PostV1UsersConfirmationEmailResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostV1UsersConfirmationEmailResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Data    *map[string]interface{} `json:"data,omitempty"`
			Success *bool                   `json:"success,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest struct {
			Message *string `json:"message,omitempty"`
			Success *bool   `json:"success,omitempty"`
			Type    *string `json:"type,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest struct {
			Message *string `json:"message,omitempty"`
			Success *bool   `json:"success,omitempty"`
			Type    *string `json:"type,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest struct {
			Message *string `json:"message,omitempty"`
			Success *bool   `json:"success,omitempty"`
			Type    *string `json:"type,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest struct {
			Message *string `json:"message,omitempty"`
			Success *bool   `json:"success,omitempty"`
			Type    *string `json:"type,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest struct {
			Message *string `json:"message,omitempty"`
			Success *bool   `json:"success,omitempty"`
			Type    *string `json:"type,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest struct {
			Message *string `json:"message,omitempty"`
			Success *bool   `json:"success,omitempty"`
			Type    *string `json:"type,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest struct {
			Message *string `json:"message,omitempty"`
			Success *bool   `json:"success,omitempty"`
			Type    *string `json:"type,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 502:
		var dest struct {
			Message *string `json:"message,omitempty"`
			Success *bool   `json:"success,omitempty"`
			Type    *string `json:"type,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON502 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest struct {
			Message *string `json:"message,omitempty"`
			Success *bool   `json:"success,omitempty"`
			Type    *string `json:"type,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 504:
		var dest struct {
			Message *string `json:"message,omitempty"`
			Success *bool   `json:"success,omitempty"`
			Type    *string `json:"type,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON504 = &dest

	}

	return response, nil
}

// ParseGetV1UsersNotificationsResponse parses an HTTP response from a GetV1UsersNotificationsWithResponse call
func ParseGetV1UsersNotificationsResponse(rsp *http.Response) (*GetV1UsersNotificationsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetV1UsersNotificationsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Data *struct {
				Notifications *[]Notification `json:"notifications,omitempty"`
			} `json:"data,omitempty"`
			Success *bool `json:"success,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest struct {
			Message *string `json:"message,omitempty"`
			Success *bool   `json:"success,omitempty"`
			Type    *string `json:"type,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest struct {
			Message *string `json:"message,omitempty"`
			Success *bool   `json:"success,omitempty"`
			Type    *string `json:"type,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest struct {
			Message *string `json:"message,omitempty"`
			Success *bool   `json:"success,omitempty"`
			Type    *string `json:"type,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest struct {
			Message *string `json:"message,omitempty"`
			Success *bool   `json:"success,omitempty"`
			Type    *string `json:"type,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest struct {
			Message *string `json:"message,omitempty"`
			Success *bool   `json:"success,omitempty"`
			Type    *string `json:"type,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest struct {
			Message *string `json:"message,omitempty"`
			Success *bool   `json:"success,omitempty"`
			Type    *string `json:"type,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest struct {
			Message *string `json:"message,omitempty"`
			Success *bool   `json:"success,omitempty"`
			Type    *string `json:"type,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 502:
		var dest struct {
			Message *string `json:"message,omitempty"`
			Success *bool   `json:"success,omitempty"`
			Type    *string `json:"type,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON502 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest struct {
			Message *string `json:"message,omitempty"`
			Success *bool   `json:"success,omitempty"`
			Type    *string `json:"type,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 504:
		var dest struct {
			Message *string `json:"message,omitempty"`
			Success *bool   `json:"success,omitempty"`
			Type    *string `json:"type,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON504 = &dest

	}

	return response, nil
}

// ParsePutV1UsersNotificationsSettingIdResponse parses an HTTP response from a PutV1UsersNotificationsSettingIdWithResponse call
func ParsePutV1UsersNotificationsSettingIdResponse(rsp *http.Response) (*PutV1UsersNotificationsSettingIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutV1UsersNotificationsSettingIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Data *struct {
				Message interface{} `json:"message,omitempty"`
			} `json:"data,omitempty"`
			Success *bool `json:"success,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest struct {
			Message *string `json:"message,omitempty"`
			Success *bool   `json:"success,omitempty"`
			Type    *string `json:"type,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest struct {
			Message *string `json:"message,omitempty"`
			Success *bool   `json:"success,omitempty"`
			Type    *string `json:"type,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest struct {
			Message *string `json:"message,omitempty"`
			Success *bool   `json:"success,omitempty"`
			Type    *string `json:"type,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest struct {
			Message *string `json:"message,omitempty"`
			Success *bool   `json:"success,omitempty"`
			Type    *string `json:"type,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest struct {
			Message *string `json:"message,omitempty"`
			Success *bool   `json:"success,omitempty"`
			Type    *string `json:"type,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest struct {
			Message *string `json:"message,omitempty"`
			Success *bool   `json:"success,omitempty"`
			Type    *string `json:"type,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest struct {
			Message *string `json:"message,omitempty"`
			Success *bool   `json:"success,omitempty"`
			Type    *string `json:"type,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 502:
		var dest struct {
			Message *string `json:"message,omitempty"`
			Success *bool   `json:"success,omitempty"`
			Type    *string `json:"type,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON502 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest struct {
			Message *string `json:"message,omitempty"`
			Success *bool   `json:"success,omitempty"`
			Type    *string `json:"type,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 504:
		var dest struct {
			Message *string `json:"message,omitempty"`
			Success *bool   `json:"success,omitempty"`
			Type    *string `json:"type,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON504 = &dest

	}

	return response, nil
}

// ParsePostV1UsersPasswordResetEmailResponse parses an HTTP response from a PostV1UsersPasswordResetEmailWithResponse call
func ParsePostV1UsersPasswordResetEmailResponse(rsp *http.Response) (*PostV1UsersPasswordResetEmailResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostV1UsersPasswordResetEmailResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Data    *map[string]interface{} `json:"data,omitempty"`
			Success *bool                   `json:"success,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest struct {
			Message *string `json:"message,omitempty"`
			Success *bool   `json:"success,omitempty"`
			Type    *string `json:"type,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest struct {
			Message *string `json:"message,omitempty"`
			Success *bool   `json:"success,omitempty"`
			Type    *string `json:"type,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest struct {
			Message *string `json:"message,omitempty"`
			Success *bool   `json:"success,omitempty"`
			Type    *string `json:"type,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest struct {
			Message *string `json:"message,omitempty"`
			Success *bool   `json:"success,omitempty"`
			Type    *string `json:"type,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest struct {
			Message *string `json:"message,omitempty"`
			Success *bool   `json:"success,omitempty"`
			Type    *string `json:"type,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest struct {
			Message *string `json:"message,omitempty"`
			Success *bool   `json:"success,omitempty"`
			Type    *string `json:"type,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest struct {
			Message *string `json:"message,omitempty"`
			Success *bool   `json:"success,omitempty"`
			Type    *string `json:"type,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 502:
		var dest struct {
			Message *string `json:"message,omitempty"`
			Success *bool   `json:"success,omitempty"`
			Type    *string `json:"type,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON502 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest struct {
			Message *string `json:"message,omitempty"`
			Success *bool   `json:"success,omitempty"`
			Type    *string `json:"type,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 504:
		var dest struct {
			Message *string `json:"message,omitempty"`
			Success *bool   `json:"success,omitempty"`
			Type    *string `json:"type,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON504 = &dest

	}

	return response, nil
}

// ParseGetV1UsersProfileResponse parses an HTTP response from a GetV1UsersProfileWithResponse call
func ParseGetV1UsersProfileResponse(rsp *http.Response) (*GetV1UsersProfileResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetV1UsersProfileResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Data    *UserProfile `json:"data,omitempty"`
			Success *bool        `json:"success,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest struct {
			Message *string `json:"message,omitempty"`
			Success *bool   `json:"success,omitempty"`
			Type    *string `json:"type,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest struct {
			Message *string `json:"message,omitempty"`
			Success *bool   `json:"success,omitempty"`
			Type    *string `json:"type,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest struct {
			Message *string `json:"message,omitempty"`
			Success *bool   `json:"success,omitempty"`
			Type    *string `json:"type,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest struct {
			Message *string `json:"message,omitempty"`
			Success *bool   `json:"success,omitempty"`
			Type    *string `json:"type,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest struct {
			Message *string `json:"message,omitempty"`
			Success *bool   `json:"success,omitempty"`
			Type    *string `json:"type,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest struct {
			Message *string `json:"message,omitempty"`
			Success *bool   `json:"success,omitempty"`
			Type    *string `json:"type,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest struct {
			Message *string `json:"message,omitempty"`
			Success *bool   `json:"success,omitempty"`
			Type    *string `json:"type,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 502:
		var dest struct {
			Message *string `json:"message,omitempty"`
			Success *bool   `json:"success,omitempty"`
			Type    *string `json:"type,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON502 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest struct {
			Message *string `json:"message,omitempty"`
			Success *bool   `json:"success,omitempty"`
			Type    *string `json:"type,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 504:
		var dest struct {
			Message *string `json:"message,omitempty"`
			Success *bool   `json:"success,omitempty"`
			Type    *string `json:"type,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON504 = &dest

	}

	return response, nil
}

// ParsePutV1UsersProfileResponse parses an HTTP response from a PutV1UsersProfileWithResponse call
func ParsePutV1UsersProfileResponse(rsp *http.Response) (*PutV1UsersProfileResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutV1UsersProfileResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Data *struct {
				Message interface{} `json:"message,omitempty"`
			} `json:"data,omitempty"`
			Success *bool `json:"success,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest struct {
			Message *string `json:"message,omitempty"`
			Success *bool   `json:"success,omitempty"`
			Type    *string `json:"type,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest struct {
			Message *string `json:"message,omitempty"`
			Success *bool   `json:"success,omitempty"`
			Type    *string `json:"type,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest struct {
			Message *string `json:"message,omitempty"`
			Success *bool   `json:"success,omitempty"`
			Type    *string `json:"type,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest struct {
			Message *string `json:"message,omitempty"`
			Success *bool   `json:"success,omitempty"`
			Type    *string `json:"type,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest struct {
			Message *string `json:"message,omitempty"`
			Success *bool   `json:"success,omitempty"`
			Type    *string `json:"type,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest struct {
			Message *string `json:"message,omitempty"`
			Success *bool   `json:"success,omitempty"`
			Type    *string `json:"type,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest struct {
			Message *string `json:"message,omitempty"`
			Success *bool   `json:"success,omitempty"`
			Type    *string `json:"type,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 502:
		var dest struct {
			Message *string `json:"message,omitempty"`
			Success *bool   `json:"success,omitempty"`
			Type    *string `json:"type,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON502 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest struct {
			Message *string `json:"message,omitempty"`
			Success *bool   `json:"success,omitempty"`
			Type    *string `json:"type,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 504:
		var dest struct {
			Message *string `json:"message,omitempty"`
			Success *bool   `json:"success,omitempty"`
			Type    *string `json:"type,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON504 = &dest

	}

	return response, nil
}

// ParsePostV1UsersUsernameRegisterAndroidDeviceResponse parses an HTTP response from a PostV1UsersUsernameRegisterAndroidDeviceWithResponse call
func ParsePostV1UsersUsernameRegisterAndroidDeviceResponse(rsp *http.Response) (*PostV1UsersUsernameRegisterAndroidDeviceResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostV1UsersUsernameRegisterAndroidDeviceResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Data *struct {
				Message interface{} `json:"message,omitempty"`
			} `json:"data,omitempty"`
			Success *bool `json:"success,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest struct {
			Message *string `json:"message,omitempty"`
			Success *bool   `json:"success,omitempty"`
			Type    *string `json:"type,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest struct {
			Message *string `json:"message,omitempty"`
			Success *bool   `json:"success,omitempty"`
			Type    *string `json:"type,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest struct {
			Message *string `json:"message,omitempty"`
			Success *bool   `json:"success,omitempty"`
			Type    *string `json:"type,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest struct {
			Message *string `json:"message,omitempty"`
			Success *bool   `json:"success,omitempty"`
			Type    *string `json:"type,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest struct {
			Message *string `json:"message,omitempty"`
			Success *bool   `json:"success,omitempty"`
			Type    *string `json:"type,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest struct {
			Message *string `json:"message,omitempty"`
			Success *bool   `json:"success,omitempty"`
			Type    *string `json:"type,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest struct {
			Message *string `json:"message,omitempty"`
			Success *bool   `json:"success,omitempty"`
			Type    *string `json:"type,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 502:
		var dest struct {
			Message *string `json:"message,omitempty"`
			Success *bool   `json:"success,omitempty"`
			Type    *string `json:"type,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON502 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest struct {
			Message *string `json:"message,omitempty"`
			Success *bool   `json:"success,omitempty"`
			Type    *string `json:"type,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 504:
		var dest struct {
			Message *string `json:"message,omitempty"`
			Success *bool   `json:"success,omitempty"`
			Type    *string `json:"type,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON504 = &dest

	}

	return response, nil
}

// ParsePostV1UsersUsernameToggleFollowResponse parses an HTTP response from a PostV1UsersUsernameToggleFollowWithResponse call
func ParsePostV1UsersUsernameToggleFollowResponse(rsp *http.Response) (*PostV1UsersUsernameToggleFollowResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostV1UsersUsernameToggleFollowResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Data *struct {
				// Followed Whether the user is now followed or not.
				Followed *bool `json:"followed,omitempty"`
			} `json:"data,omitempty"`
			Success *bool `json:"success,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest struct {
			Message *string `json:"message,omitempty"`
			Success *bool   `json:"success,omitempty"`
			Type    *string `json:"type,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest struct {
			Message *string `json:"message,omitempty"`
			Success *bool   `json:"success,omitempty"`
			Type    *string `json:"type,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest struct {
			Message *string `json:"message,omitempty"`
			Success *bool   `json:"success,omitempty"`
			Type    *string `json:"type,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest struct {
			Message *string `json:"message,omitempty"`
			Success *bool   `json:"success,omitempty"`
			Type    *string `json:"type,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest struct {
			Message *string `json:"message,omitempty"`
			Success *bool   `json:"success,omitempty"`
			Type    *string `json:"type,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest struct {
			Message *string `json:"message,omitempty"`
			Success *bool   `json:"success,omitempty"`
			Type    *string `json:"type,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest struct {
			Message *string `json:"message,omitempty"`
			Success *bool   `json:"success,omitempty"`
			Type    *string `json:"type,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 502:
		var dest struct {
			Message *string `json:"message,omitempty"`
			Success *bool   `json:"success,omitempty"`
			Type    *string `json:"type,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON502 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest struct {
			Message *string `json:"message,omitempty"`
			Success *bool   `json:"success,omitempty"`
			Type    *string `json:"type,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 504:
		var dest struct {
			Message *string `json:"message,omitempty"`
			Success *bool   `json:"success,omitempty"`
			Type    *string `json:"type,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON504 = &dest

	}

	return response, nil
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+ydCXPbOJr3vwqWPVXp7qVkSpadWFVdu8rZ3snh2E7n3Um8MURCImKSUAhQMjuV7/4W",
	"Dl4SKVE+YifzVM10LBLEff7+D4CvlsvCGYtIJLg1/Gpx1ychVn+OEuGzWP6FPY8KyiIcHMVsRmJBCbeG",
	"ExxwYlse4W5MZ/K9NbSeEoFpwBEes0Qg4ROElTddy7ZmpY+/Wh7lswCnr3FI1M+KN6c+QcYBinBIEJuU",
	"PMt+uSwMSSSk3+QSh7OAWENrhEbjMeaWbYl0Jh9wEdNoan2zrQmNuWgOUL3eOriQxLVhsSBgC+KtBvXe",
	"J8InsfYyiWMSCZRwEiPKkf6KRtPm4BGLUcSqsRBxQvI4jBkLCI5kJKhXn1LqtU9hb3cv95pGgkxJLL0O",
	"8M1nZVO5zWI2oQE5DPG0ITzjAlHpZH2Q6D0NAjQm6DxKguAc0Qmi4gFHJJyJtBKfnR2+28Uh/ptFeMG7",
	"Lgt3vsRkEhBXdMaJe0HEDpnLhrMzxlFE4h0S7eA5FjjmO729vd5gJyQeTcLuLJr+V29/b2/30cAZ7Fm2",
	"JUPG45WSK1Is60PUmLvZ2y3yFjdU0zmJ6YRurKbaywc8C8rHHI0JiVD2fYvq+M22YvIlobEM7YOsm6V0",
	"lhtnqXLZlW6iFN2lSlFqb2d5yGz8mbhCpvIxYxchji82dmbVLsqNCRbEGwn5o8jLvtPf7Ti9Tr936jwc",
	"9h8Ne7tdp7/7LxWLOMTCGloeFqQjqIr0SqZPY5bMpJ8rb3SDLYJyQ8IXc3KAHcfZ8/oHAzf9eyDLoM7b",
	"C5JWvu7VtVv9pBwGTrHfUDU4eZ2EYxJXPqjpDuqKtsg8415HsK54nrBANipV77YqoIbs8nzHcR6q7OJJ",
	"TAZRry59WfsqPn/PQhwhGqG3SYyjum+SmXcLNaK2ZeQhmZjWZ5xql1vmGs4H9n/EZGINrV92iknAjpkB",
	"7Jjh/5ttjZmX1ndE8s3abucVRtzHGI2CAPvoJfbxIsBogQP8JVlggRENAozG8r+1dbDSAlfDV68pi5DM",
	"q7UR6Tu9Rx1nv9N/eNobDAcHw57TdRznX3WB+tTzSNSqR5RjtnZeCc5k+1UG5C2G4BmWc4fDBi/121LX",
	"Tb26sU/4lOep8RjhcnKBfDwnCBs/VuPSMH617g9MDpuqVUpJXSV/xgUN5acvGA5OaUgCGpEtq/yCENX5",
	"U0FCvqnm1wb4FKdF92nhOJa/v7WNrvx6y0YasiRqqPb6XVZjPJw+4GjKcCALikXkzcQafih3T73hXqc3",
	"7Dk1lb3kbN9xbCukEQ2TsHbwOPtmq16sYbpeaoIkywMZuaV2eJM9pYqNneVVXeV5zQSdUBdfYXDRU7l3",
	"cVCf3pF6jZI4yFKtJvHyj6gUqOwhYhKozBCse2MTzEdOZXa5d+A8GvT7Bw/rOrTmDrwSU+msi17RqS+7",
	"jUhgGqE/T1+9rEb6Y+I4uy6f4Qi5Aeb8jwcuC1hMvAfqDXnFfByG2EPPAu7TCC9S/cWO/EQ7QdjziIcw",
	"isgCmQRTprrQGxkByqnq1lS/fqf36LS3PxzsDnsHjcNAU19dybPD6sx3fzDYdwa7tb0146KxMsmX6N3x",
	"y62qjy/EjA93dr7I2YrJRlWJpG98p/fQ2eu3m2yYbrio8dXuOov6pgZ2QoSg0ZRv29BkbThiXBxGL+TM",
	"eLnNVrPrnWxlMXEJnROOcIRIiGmAFj6JEGchYRGRUziM1Cy7aJiUy8c6WdzUPZmwdgP3chyPEu5vFc9q",
	"qd5ybFWW8KeUy0G6phqbN+iZyrpyOngr//Vi6/rlpP3hebK3CPwmC2A5Gt0t4kE8Gc4oqx7Xz5O8CmSx",
	"wp63fQ2ojdxN5pnwsbihuMqpJ2XR9bPOeMRLzUg2LdW5srh2ar0pUjeZZTcZPfmRWf0Rb30Ej3Xc6jLM",
	"BMkRi/JIPeBbFF0lGjeZVzcSs5f04hqZE9ALwq8Z+E1myZXjU7dKkd3BvcAGK4mwTuWKlMq8KKaGyLz+",
	"j9opoqkrq4G9pFwtk/LapHqtMQlYNEWCVSLQammYAZeVlWARiyfN67ZIwbSlCJnJn495F+mkR26QeISj",
	"WUznclabOa5kUy0R2DBZVnPkPMQF5maC4SEsuui5Wn8Vq0pBZCmcv3r16hXyPBulaZqiP/8chuH5EuOJ",
	"XR85uzaSs2vk7A0V414pJo8ERGhqICM3wUkgGlSkMmlRcaUc5Z9nAgg6FGiR8QwRJ8TwDPOJLmWeFXNZ",
	"aWk5ifLoNaKbff3dYpstuY8J9mg0PaVN6gGekxhPy7UxpEFAOXFZ5HFEBRJY9TQMxQR7RSORSXBxpFLg",
	"5NGf4yCRdTQJPIWOxqXlf7XG7jm9R92D0kJ/EjAsiqqiI6QAecDGOLhaxutv82wfmRcRpx6RfQpjYZYK",
	"ToRMpfkCRx4aE5eFhKM55VQWnmCIzEmcsoi0K4Yc7de0/pJiU8z2l0p/FdGJwlmO54oezCwclqhrwgMa",
	"olFIYiqTesJcSpS4tVF4Ur69pNFFfRoCGl1kdfTepqHMb7etPfrbOo11a6Z7+LRxjOv1axEB5Ue6y79C",
	"3LmvWuCYoFkyDqgbpGhOyYJ4W6UlwNE0aVRZs7fNY/ez1y9eHp78Wdf9B5iLd1rUaDs6yU+QEUJuf3yS",
	"8yvvCjmvYiq/ReN0VdTfKvflDG/T1EE52jwVkFE7pSKoKcoR4sylOOiExKNKoInVSCWk8+ayfcNxiNEJ",
	"Ton3gKPjYm7GInSSxNhHo6Azwh5NMRbDR7VCvqqaT7aZKelPGiZMm3NBfs39baZE+SffZVIUkwmJSeTq",
	"cs+///DV4jJLDz1r2P9mf7UmMQtHKfat4b5dvJJpZvrxo6qrfslVrzco3PW/nbWc68olwnEWvboZb0xm",
	"LL7CFKnSPmTfrj0qimGbNhMTLlh8I5GQHpUqA54IuUTXtULNPrfsTOVUo0mdO8wFPzUhqRtFVwaMTaqb",
	"DlEW24nAItlYwMdV199si+P5lbtA9e21u0CBp2vWcfJt/YzjcILO5dtzNbeYYc6JhxZU+Gb80F+Mjg5t",
	"RC4pFzSaoqLtlTu9fJYek5DNl+awH7TNQW//4FF5sCyNe9qqwDpi3imecKJ0sy0a3Cme1jW1qpnOtpOa",
	"7OutSkLOHjYORsrRpm54jeKgR7zyzKfaZ1d1iPIUopT92dCd1d+KmVAuNev05GuL0vquvDSt9GqV3mV5",
	"hV8/muWtPlsKlKfU5VF5pbE2LOHOGuBN0TNvR3GKIaKuZLnAcT7axTjScz3p/lf+m8aVeqjP8a+qY1qh",
	"0i3xY/Qxks1RGdVhxGk0DYjywj7PAj9Xi61zPSadZ3NXZXQg/eRypaTWlYV3TStlEgkaEx0rG20IYUxQ",
	"QCZi1dZvz7ZCfKmV7/6j/aoOvrnfpVyFf4XWuSY1JTm01CzzUb2u+HTZmHW0XbEEy5OnZgPrZP5irlAX",
	"BIm8f8P6sX+d+rHU/2Ul2NSy5RBwFTO4dZMMgadL9aHOonebtZ/A09ZLv2ZL1jITWfGxNIa2UrGjzHjU",
	"pKM2g+Mr9ps48Sjb8hsSyWoxSgQ7cWMWBDLm5Vl+k9n2LMDpGLsXxwYFkEjWtA9Ot79nO135/4d7ds/u",
	"yd+9rvz/wz27f7apgGPiUrFkzPmwziH32eKUsUDQ2XufREcBTmk0HWU5sJ2dbxZqXWmUq9wW+Vr+zOSN",
	"pcZ4LGvKWP41wfI/8qeqGlSZUcpRf6bG6EROFr7IaqXMDqW7RP7nb/kz1IOxdLIoRbtU9VYSokww5LBN",
	"4hORBmRbE4gw4T6evKRRVnF0onp7nwL1zLZ6++bPcjEXT2tanYrTc6aX2JmPLvPIp3lPzWbkX8pAhFyK",
	"T4nwQxzR7CeNPDbDcsryZeZmLz/5eKKCwp8XRM2uzF+f5oNqvIpg6qN1Si6FjNqJi4OqEe5ueahyNo5U",
	"eMJpfCM+xTjigZLdbsK7BYu9x+l7Fnubfdtf79lSe1pOcm2ONqSnPl51LTPWU9BtByJupq6P02MyJzr4",
	"N7G31Ok09Xsm0GofndXcUoKsIn6VWld1slLzOAmIK4j3Ps+DlywvmHI3kuT9hupLVPegOhTVb/hUrRhU",
	"7ZfuIl93NZWokNoYFLn/hEWCROJ02Rq/ms7yyrE+H/Qv2cHmX6yEuryYLGLxVG+uWI6B7vrrQzfvZLqV",
	"HW7bAJ8E1L14nkSurkpUpGVvZSw6eoi1rYiZPys5WnGyfjawWo/WFH5j9JqKqy4D65qQbqjbjgRZPE+L",
	"r4tCKFWvjsATyuMOHUedCyx8Wru9Z7O5svBJuO34m+8hMaWHE8HUKnzqC5XVMypbhofji2oZGoctBtRS",
	"Lb9yDi55sZqNvd01W2SaM60uvqbfOyGcb29p7Pp4Jkhcs9emNn71u14m4Z7jOMTrHwwO+NibeBP3++1g",
	"ufZuoSJadU3pmLFw2/m6K+icrN/EoRVMypF2vM3OSm0q2ySwK8vwstS7ZPedGXGzmE5phIOdkHK5EO7O",
	"ommthYvGqe84iQ/5yAtptN22UhwhLL/aJoUV32ulk+JJmWXXG/OwJEZ/4gB/wQ94kSXNO+NWg9OFxYNk",
	"WujLap2uraSo0DZDMzytSvVWmHZ8FfI2Rt7Ua0xTg3gbrBfNy7VhR0VSpyIztGdRoNH5GHOCPBbKhxtS",
	"1mgArkLhO2HakbHv9Xfrkh4S2VjbqXDG7WbBrd1Sf7WevEpN9aiVDRlvqxZKl1WfrUZd0G3ZOxgJclvp",
	"J5vbrcZXuq9UCOlnNhPSRFs/rk6A9JvVaW0y1tWlAelmr3ORo6h89U2opscK005T8O12EOeZuaxFFLYi",
	"uVGUIYMr9b39tmJDgsrRycvczoaGikxQZGKp8AqGb7p708qX2k6lgtZ21k1jWlWrWy07pQ1q8w7lqluq",
	"KJh/kq/zhAWp2v0VpJ9M5JamXrnzlRKUMT3Su6lvbIN0v9Prd5z9U2d/2Nsf9p1uv3/QfjKhrHGrfoaJ",
	"jz/T+L9VXyc7uY0HPJRtifSWpOYBoNZapd6jz/Uz7ZnPBDP7e1Z7aPWWd/PI79BwumOS1P08m7aZFKsV",
	"rJvEVKQnrpy1qyK47OBE+B3BLkhDB/A/708Rdl3COVKuUNZc0ITF5k124gSJvBmjxtZU9iiWr6BWIWxW",
	"wivmyjP6T6LWepcdN6AkEp26kfV/5TRAv0eay9UHUXixEoLMBhpN2KrnatN29zlLIk9bT8vZTyfbPDU6",
	"OuRIA1mUymjg2QwJhjjBYUA4D1KkxocYC6KF42X/HnDto0siEVMXTQgWSUy4jWYxm1M5/S/yGc1IzNVK",
	"8m+i7CKlu7E5hoDbarsmtxEXMcHyt1myIq4XENxW+kTIYmKsgj06UYtZQbWS4pMQTWIWog+uXpuqFJ79",
	"uuMxl++4WJApi9Md87KDZ5T/plWZCXMTZVcfsaijUsRnxKUT6qKYcJbELtEGTai8CLORWc/qmKnpPu8q",
	"9eWXX9CfbKEsKYnIskC9eU8QjglKVP16M0qE30cTvdWGqaMkZHpkXJWf2sCc/k1UDSVyJEen2lOlSxLP",
	"lkWHIqI2w6EPKrioUrmzDBCJYDHFAd9h1HN3pnpnWsf405EF3GEywP4vbCwnYPKtetDpO1n9c2PiqRwP",
	"ZN4xFOKLIm7ygaxHMttlGZHI7ILREpUgM57t+CAe+uCTmGwfud+MwPXLL+gIy6WCqtireesmMWexmjt6",
	"cuA0LlW8Sr/Rl4TEKZrhGIdcTj25Maw4Vz3nuX2ujF7ObXQ+JhMWEyOTyd7w3ETlme7c0McIdcx3Q9Rz",
	"zrXdxFSuo2Qh6RNgeg5Sy+5l17a2rhmiy/TvDV9qMxyZp/K3bprUQ+fqS+2tjF5dHITSrVajkbm3kU5l",
	"bTRWP9aOm6PyMVLZrWbyM8a1BbHLwrHJfa4KTGcC+k+dsHM5D1IRQv9pAjhXpZZmmqSxqU64qvRTNaWS",
	"3aK27VODd6WT0/MaTSGsXtfpOrJbZjMS4Rm1htauemRbMyx8NYLszHs7akpERdrxcMp35NMpqZlsvyBm",
	"TZm5R9K92nY+MwTy0NPu/uqNjJunOOV6jz8OiZATk+GHZtuD8j7eSijZaKGqcDFYyD5Qzt+UDc06o4Z1",
	"Hi9zkIOO09NZJEgsvfm/jx+9r4NvHflPP/vnH3Wjdr12yrdPmCJl65K10dfVVO3eVKoU00fjtBLmA47M",
	"hvy69MhX6rPH6VLCjMGECsKytwupmA1nn1anvcbPVsVUXpaVQ2sqIL1EWFdEa3zMIv723fHotWVbL5+d",
	"nLyRf6gHn46fjZ4evn7x6ej4zYvj0atqorJvWqWqWBzrXkww2Z1MiHB94nXRSW75UOlhdOeWjQINOSBr",
	"4IYcuKHQC/jilC0xnE3K2fZRaupmZKd9rbS2TkVxgsfKARxtk2imA3roXPjU9dWQtsCRyKZp6qABcinU",
	"MjuP86YS0dOEhjxSwW3Io9uP2TIX9xbUcRzH6x8Mdt3BYHAZL6yaTM4a0VnLZpXNuPScQKdE0ZWYzClL",
	"eDX2uVFpy5qvJlwN2ayDbJfPtxy91bz+7DhOT+Y1CVM6fZhcbpnXZ8rmcsYirpe3fcdRoEEvYxSemM0C",
	"sz925zPXcLrIiS3ghYcFruhCWxxzKbP4lbLZyPJH75VTu5WxHJZT9GuWqWZDp6dnhgq1iWxwoByp3vw3",
	"NX+skmcTwJjIGb4MRs/Ae+gP9PbJ87/6esqJ+uZ3z/zeRX+gQ22+YZ4M0B/onTbh+BNPzNoM7aE/0D+f",
	"v3h79OTP0fMT83C/+Li3p+xRzIuHpRf75Rc9GZ9TZQdCvOzZgY6Tfuz9NVg9/RPTID3F8ZSIIzzdvOtF",
	"Vle9/s7mxSv5LRdoRPcfNFYL7AccCRUEohOE1SNtqk7ElqVT6by7+7sPnUHP6Tu9/r4zeFSu4Zv2Nuoz",
	"lPK0H+OoMfEV88p7kvYPVm/Y6/SGfTkhKVKdN6FqKrDatoMRJ3LyLxcoup1nidJJ5Ih0p12UeVwxb8qf",
	"lSatv3786P3nUP6nk//1638N7ZrHv/3+2z82y+JLZXKiN8JuqpHZftl7US57a6cNrc/tKs9Ruze5gmh1",
	"FG1j4GZwubx0HGcgBxd/9tlzHya1NjYhjhIcBKk69WTLsuQzEomcxalSlGWTeYloNEtEtsdFL4QjvULH",
	"iWAdEWP3gnjXKMf+YFNBakvBw425+XMNHma11LP79q49sPfsffuh3evZvYPywmhQf0rilCiztHZDzDWH",
	"8RsdKGYxm8aE88Yzj9XbXFQ11VZ1KeoZFpVGhX6lpYPqfKyP2Ch/VCT7t0oLdLr7B3s1G/cLg8jSEsap",
	"2dAfbxrnbjTjf9pRKiahRtVPW04hMvcwmfiexWSGkzadTv3IczPNYNB7uGk0Ea1sFG4fXRn7sVZZpmvw",
	"DXYXmwbdOgsDgx/zHjo/4zofn2tNQpcMYwtlZuudJd4TtcKvswTUq/BdOVHqDZxH/SStVb59zF+TS7X8",
	"amWd7WN+ZOjByjeNhjCKvW+Kal9GddwTe97ndNzOPpQnSvRrtx1lWUhftm6zjrWmVxxr7+PIC2QXo4OZ",
	"JEGQdmW4g9vjESHhfDlfTS+uY0c5MnaChYSvtXOOmDkyco4D6tVbCa1mWPMu7JVD4o3Pn0xcWtkrfLNr",
	"h6TmxBQSUTU9Jud7d5bzJoZm3CwJ1007Da6X2UmUS+HejeR02UOTmbvfPTM5ieckRkkkK6xgzDOzVhVL",
	"G40Tmc+ThJPcOkAbA1BxC1k8YfE42xl+hfx9nn2OSByzuIue4AgRqhDpmCAvUUdHVaxutI4r67s+ncBG",
	"Pp7Ln6rDIZcz1QSYMeDFQUBiJOKUmjOStFc4N9FQJJYlApGIJVMfzUis2hOLuCnhwV01F+IVsaycCzZh",
	"SXQbnVPExKcGv9sU5msmkDLz0eYSedx1aemcJ15xcpU6QEJncr9/Z32SnH8vSBB05KqMeKr9yGeJtnEy",
	"4pM5BjarkZyEWPZcutryW+m7ZjGTHshYfJLdpNpKc4Vi+Ut2/dps5ZluZJVeLTslkUXKcD9kMcnGC2Pg",
	"0kVHAcGcINcn7kW5t8ksYHDkyTaG8BTTyJTowfctUcZQiKM0Nyuy0UxHOo8XCrCov7znmkUlV1GfAhpS",
	"8YlcuoR4Vx5t2iZCZfHeHUyhzNhDIpclkSCyp1U3vchlIA50a1C1odqCXCb9EMZisHHucwOzKx2RTzqe",
	"n1R8rlYWJzqlpsWcsJAIX3ZjC7m+XMQsmtoNpdK/q1KReS6XmLKzVfbnWJAFTmWrnsXsMlUFY47INeWm",
	"m3mmFGpDSEW2ZsqiMjRe30JRjbH3yUTwagV02DryqlTubJ5GebaNKEhLTUKvjCqdaTbbQYKEMxbjOEVs",
	"TuKAYTWfkbHzErmaCrGs6BHWOzJvumRkvKlLPiURnmMamEN7rjh5/j6ZoEp4cK/bnUf19M20P5lAGpIg",
	"vZPGZ2L4SUaBJeLaxXv1xHW1PX4ShjhOjWXksv2dPsvsg5UZQiJlCXlmNjTVnMvoqapiDixThs1VRaxq",
	"ZHnE+BWsLLOtgTKhf6u5U6EJdJGcChfW7MXxvqG6FAZPJsQ1t3q6bhJjVx3j7bMFWqg1i5vIAUWlX1Ue",
	"Y96+ZjNBFo3N5ix3EuvS5ZSc4p0TTKd1K35ttqI6gsfm1PObadAFltz6MBGQCFtLhE3q1BNT60zRPjDU",
	"uaqlLCsa5qqt8uEJP6SQkcsYqyk4aZDLi3ZayjGdt0tnrbU/7iSLRF5KS4jdmMEv6QpZ739WY/S1pR2E",
	"nZ0WLpinB0eMZpnptTp4sjhx0kbGmlmdPsbqLz+7snH5/ZFrlo+kkW/Paobeb9/fmg+UAlAKQCkApQCU",
	"AlAKQCkApQCUAlAKQCkApQCUAlAKQCkApeDOlYKR5+1kiL8Kapr0gm92zRkN2WURHYPf9FlKTQc3PDOu",
	"9ebaFetjKtBCTb8FviD5Zkas4V0XvS+u9JNO9Skj5mLW7DbB/ACbGSEeWhB9Wr/LAn0YJ1KHj5jTj1oc",
	"GJFFuHwVxgZ144pctW6LbY4aC8qlkVGTRnFPme5dbKfd6qTWrXZnVWspi/K6V76psgrnq5fz73cftebN",
	"Z2B0DCgRUCKgRECJgBIBJQJKBJQIKBFQIqBEQImAEgElAkq8Bygxp3q5CZ45T309SMyPoV5/0CsOguLE",
	"anMKdT4Byl+Y+zazFUNG/CiLGijf4+zLNtbKWTDKvq3b/iDO7EhRnGLfstt4vHT/wufkb8tctmrZ2pu2",
	"JwP+rAa2dVmfm2K2R6Vggzy4mZNK4ehWOLoVjm6Fo1vh6Nav1j9iMrGG1i87cvHMIhIJvqN95jvZhAMO",
	"4IEDeEALAy0MtDDQwkALAy0MtDDQwkALAy0MtDDQwkALAy0MtLAf/QAetTgcl/SlTAgrNKf1p+/gQhca",
	"p8gjAtOAN528Uxayrnz4S5Ruf77LBUnryeFJEmPfsOwKtO7XnXqitRsQaFoeElOcvXF1cbFBRzSnn7/W",
	"1yXUFojaRGBUCr2ywJ63JE3sbjRulzWnGlheDUpnqYx0upaR3/XrqKqfNvqf5G/VxeEpKVVWqKA3VkFb",
	"10etchvJW4vdleNfMv17/fEvulat1qOiuG30Rpd3zQk9d3NMTFvBADA3YG7A3IC5AXMD5gbMDZgbMDdg",
	"bsDcgLkBcwPmBswNmPsOTo+pYu4Gyr2y1QOn2OcddTpG+10favJPI4QRnxGXTqib3b6oDobZsMFDOVXX",
	"k7bZ6lGYYIscZavLHYXBnyZUs+EECdZk8O36eCZInBPObXYmXC0W7Uy7ywwXi5Jlr/ZRWWry7rojaU6k",
	"E+nNldLWOvwbSQ6JvPWJeRZ5t5WULOx2CYENO7BhZ+sNO2DtDtbuIAOADAAyAMgAIAOADAAyAMgAIAOA",
	"DAAyAMgAIAOADAAyAMgAt2vtXkPpV26mbCUN5FLCWl2gzjR+gwDwuNAo1uL/tXbBdRRTW5y2BZhrvV9n",
	"I1+Pi3/EM6nKvNyA3JKAVJeAqpF4Wxa/6jcg+HoEDwD+xwPwYDQOtBhoMdBioMVAi4EWAy0GWgy0GGgx",
	"0GKgxUCLgRYDLf4RaHFbKFyc48832ouX3Gpj6TIsVnbS+kTttHjceLZKlSA/KcXiHkNkOcvFQq7cAoZL",
	"Ja9d/EwgGWylAdXC5QZwuQFcbgCXG8DlBne/3aOYINVt+AAhCoQoEKJAiAIhCoQoEKJAiAIhCoQoEKJA",
	"iAIhCoQoEKJAiLpLIaqsGrUVpb5mfx563zRfkuPOKml6qp4v7Vmg3qrapB3WbFlQ1H/jmUUF6i8kFzWj",
	"1BErqO0MC79EysqBXE1aaA5vmX2Rg9BxnH11PAfx2Z77yLHuBd+6Yhs1UlZJSVRJ19UFDu4AAgYEDAgY",
	"EDAgYEDAgIABAQMCBgQMCBgQMCBgQMCAgN05ATNk6nEra+wSIdtpNMJ+SbmoWGCzRSSneamODidqQkQ5",
	"wjOKZPXBNFJmVuYo2C46JtjT8yI8liuFD8XLs193PObyHenNp5jIYcD7hGeUf5qTWC4iiKfedcy7jnz3",
	"S/H9b/X23duYdbNYm96VkxjINGfLKJ1QWSDyjxQtSCyLwZPxQVgg6R+JPBpNA1VncTDz8ZjIdbmiNfXW",
	"bJzF4nG6xprte0Qsg12y3smu5Z3+2LKtstvqnX2rblvZDYI5LpjjgjkumOOCOe7tmePC+etw/jrIOCDj",
	"gIwDMg7IOCDjgIwDMg7IOCDjgIwDMg7IOCDjgIzzIxkyL518U5JyyvLG2TfbmjFeI9w8iQlWRsoRWZQ8",
	"0ismtfR8IAtMDWGrlstHjK8IKaZyPmZeeluVTMPFWqyNQ5JZJy+lSE9OXZXeJRvl9yxUPTx6m8S4fnVW",
	"GEh/0MGf1ZT6t/t1GnSVAwK9AnoF9AroFdAroFdAr4BeAb0CegX0CugV0CugV0CvgF59b3o18rwSnmkE",
	"VzVWyDgINp4GrWacspzKhrE4YLJfp8LPp6zmrGh9QLSsjsInYXejwfAoCK5gM2wM2Naa5mLP+94Wwzcc",
	"rWV74ZGnp0nqMr9/krT1Mc9gDQzWwGANDNbAYA18HWvg8p2QYAsMtsCgpoCaAmoKqCmgpoCaAmoKqCmg",
	"poCaAmoKqCmgpoCaAmrKz2MLrPnYNrrK1+JH26ON5apjVWlpPuK4FIcnpcDaHHN8mB87vGLUu/6gY7ca",
	"0DZHHbcLc+WwYzp2HOfA6x8MfD4b7y7o/Gc47LiUBXDcMbAxYGPAxoCNARsDNgZsDNgYsDFgY8DGgI0B",
	"GwM2BmzsXh533MLY2F5vVNxoNFyPwdA4rfA4b7Nd8XoothluFXVxBUp9vnQcx/X6BwPn82Vw4MRhm1N5",
	"b9pceJyiUYp9dEHujwnzUpzAfhnsl8F+GeyXwX75HukR+fWbN2L3XJoKbHGGSp3WARbUYEENKhGoRKAS",
	"gUoEKhGoRKASgUoEKhGoRKASgUoEKhGoRKAS/UgW1CuCwjhFejG+1aHK+tbD1sbRK6co36BptLnp8bua",
	"RpfCrIWMd3k+NFlUzojeJu739xDoG7PrjolMFth1A7EDYgfEDogdEDsgdkDsgNgBsQNiB8QOiB0QOyB2",
	"QOzuC7EzmO1qh0hXDzvYqdiX1VO9kechjDKHzWbfWwK+x3nI1yN9yrz5u3K+PMTVAxB6juM88voHAywu",
	"J36czm+YBUapsWvcomlekLQ+iSdJjH1jQ1xJTn/V6te2woT7eFLvE80z65VyZZYzCSdeF32MPkY99Ad6",
	"++T5X331C6G++d0zv3fRH+gw8tgMX5gnA/QHeif8EEf0Tzzh5uke+gP98/mLt0dP/hw9PzEP94uPe3sv",
	"aUQy1w9LL/bLL3oyPqf484IQ4mXPDnSc9GPvr0FhEt+z+/auPbD37H37od3r2b2Ds1J2DeqyK+tQPDLB",
	"SSCsoYVTLKvmau4VTSudkbIlvvrirKZrUyb5r1XBVTqt3Tpz7Qq+lZWh+n1esjIgKlR1HumoLpPQ61c7",
	"VeVs9D/J36rnx1NSqn9Q526szrWuYp+Tv1X/O1Xm3bJ0rHIw5tEmUUDXqtV6VBS3jd7E6EgHs1Stzn5w",
	"8SDPWzUugIYAGgJoCKAhgIYAGgJoCKAhgIYAGgJoCKAhgIYAGgJoCKAh3MtbKFG+afwGlISdr9mfbU9T",
	"zgmKin3zoTKZuwccUa+L3vskqhCP7HxeW+VA7isVnASTYj48JSJzqVdxWK2DWKR8EFhW/SIjr3G8cy5x",
	"PM4z5Gc78Zk7joO9/sFgwsZxbzZtdbhONcCysrQxieNyTl4tgc3h1SdvLJN34CTeOORffrIDrfO8gJOt",
	"gV4CvQR6CfQS6CXQS6CXQC+BXgK9BHoJ9BLoJdBLoJf3/GTrAmSsP7kgx5hhqI673GT1bBw2mzZrf6zv",
	"bNI7NqHUGfp5aUHy8sgXhToK8d9qWcS4QCHm/igIsP8fddWH8qOYzrGo2rGaCFWDfu/rw1pLwSKeH+g6",
	"S8YBdYMUzSlZ6GVXxKrxaqyWMp4yx2uZ3tMsqSo15cCz42X14deCVQ9D7m82lFVZnAd/9nNYLZr6ityY",
	"YLEE3AD9AfoD9AfoD9AfoD9Af4D+AP0B+gP0B+gP0B+gP0B/gP7ukeFizuUqnM+guFXI99X81dYcsRH6",
	"FeZ+2ucnmb9trPqot8TlWpr0FUFsY+7WIrQyDhv8BGZtGdySrS0mIZsD4ALABYALABcALgBcALgAcAHg",
	"AsAFgAsAFwAuAFwAuABw3Wvbtg2My7ZmyZobeNYYriXihgHWpqt2bhZglUJrA7Bu/c6dZlM8E9Mrm+T9",
	"x8Zj91TYP8VdPGV2l+UbsDtgd8DugN0BuwN2B+wO2B2wO2B3wO6A3QG7A3YH7A7Y3f29maedfdqU4WDd",
	"DtQnapOeLBGGg4YNqC+kH9vBu5/rtgxFHL8kJE4L5KjvobgGcYQLRcyO2LpsMj2haiN/q2m3zrSEk7iL",
	"5CpqFrM59dSS1SdojoOEoJBOfYHwZEJcvVEXu24SY1eRUZ8t0EItd91EzkWQh1M9LVet7YLnbFmDrqKo",
	"LztZNKz1hXtXsS5RXk7xzgmm0zpY9J1gNQ7lxLc+h/S7LF9kn9NFT8mMRCpPWJQ/VnfI6CM2zTc6s2TK",
	"5SoUF7uvPTqZkFh3hCwiZqN7kSe94V6nN+w5qgcTcvZrDa3/+/XjR+8/fxvqfzqVX/+oGU5KHu47jm2F",
	"NKKhrPK91Sp99s22XCzIlMUN1D57W86I0n05b98dj15btvXkzbvjk2eWrR98On42enr4+sWno+M3L45H",
	"r2ovbfIS3X3Xh5u9LYeLaKQqVRcdThAVDzgi4UykiAoUEhzxkkM5cnuYBqn+LctCDmmZr50x5lo0WZc7",
	"624Qkm8qlWM5Uz6dHr4qMuRo9OLZSZE9o9cvnrXKtaJuVDxdr4Oot3ZWu0sl/ONpI9TbNDjlmb98WCmP",
	"HcfxvP7BgOwlD/2He+nGjKN1JxuArAKyCsgqIKuArAKyCsgqIKuArAKyCsgqIKuArAKyCsgqIKt8f1ll",
	"WQnJNBWtfiwJKoQLGppDK6ekBna+IBGJtX8qQjSSEdD1a0HIRQZaDCkzWM2gznw5LRgKCREVJFNVaF6Q",
	"TKB5lkWphVBTx9nqRA7DvLYROO4ZwrsLCF2Xkzk23CYv/01oeX0pfS9WXVdaOUVfXz73AafXZx4osaDE",
	"ghJ7z5XY76sP/SMmE2to/bIjl8QsUocWaQ/5TjZ38ORM4tTMV0CkAZEGRBoQaUCkAZEGRBoQaUCkAZEG",
	"RBoQaUCkAZEGRBoQae5CpMlllVxUMUqMWSGu02ymRHQE83DKO7MAR2ukG4GUuwdcg1npep3y8oKIU+Xv",
	"kfQW5JcN8gsQxZ+EKK79pNCW1jpbzWhD4xOu9c+YyJ49QsLHQmYQ+jVTsszSRL4NUrTwidbDVAugHKmK",
	"+ZsC5T8z7l8uGhqkpzieEnGEp+bZShZHSTgmscyPmXSkcZu5SXElv0saNI1Vn/KAI6GCQHRi9HI1yHEi",
	"tiydyvla3f3dh86g5/SdXn/fGTwq1yEtYlpDaxIwXBqQdEr0lptS2o9x1Jj4WL6TaR+l2L8naf9g9Ya9",
	"Tm/Yl31rkWoqSFiTCr3zEyNO5EijTrFSvUCWKJ1Ejkh32kWZx3ZF482eLUu8Q/mfTv7Xr/81tGse//Z7",
	"reqbPcBxjNOVMjkhLou8jTWSa2f3o1z2yqVRt83Lw6JhK5Pao2t6HDn7m1ORyrhX+/S+09/tOAed3V61",
	"MD5+9L4Ovskc/9rP/qnN8s1beZoD11t6vMtLx3EGXv9g4M8+e+7DpJa1hzhKcBCkI88j3pZlyWdEWbVg",
	"MzpijdAyLxGNZolA4zQfUHMtHCeCdUSM3QviXaMc+4NNBZmLyKAVt9GKZWWdEn5MsNduiLnmMH6jA8Us",
	"ZtPYLI9WY569zUo8q7aqS1HPsKg0KvQrLaaCStvESx8Vyf6t0gKd7v7Bnr0a5xBf5vYeue2Hs5IW24o3",
	"jXM3mvE/7SgVkxDTiEbTpy2nEJl7mEx8z2Iyw0mbTqd+5LmZZjDoPdw0mrTb4VzuRGp2f798dnLy5vUW",
	"q/C6XJyTmLfrp3UNvsHuYtOgu7pN2MynSj20nTGQfHw+sy1BhUr0exmHUqebGe4u3aG+vEbyMX8hXa6e",
	"a1z1qs3V8UtpyLyG/c5gSgOmNGBKA6Y0YEoDpjRgSgOmNGBKA6Y0YEoDpjRgSgOmNGBKcz9MaWrMXDbZ",
	"0HylLa83Vz6OU0S95hvOVQjbXgtVsZep3gJFr74F8Jrn3W1xxmOdnU9+lOB20b+tUyTBbOff12xn4yVa",
	"qmGbC/7hwiwgnUA6gXQC6QTSCaQTSCeQTiCdQDqBdALpBNIJpBNI53277L7hZMdN19zXX42ViJ+dYMIh",
	"cnCIHBwiB9d5wXVecJ3XT3Gd172/pgukFJBSQEoBKQWkFJBSQEoBKQWkFJBSQEoBKQWkFJBSQEoBKeXO",
	"pZRlTaTJWDxmyYzvrD1iEQcB0u4ajlbM3t1j+1gT/5X0vaRcUVG1jtaOFI7OjuBYdxfHMWPh6vkX5sCd",
	"DUEpN9cMCSx6AUMBhgIMBRgKMBRgKMBQgKEAQwGGAgwFGAowFGAowFD35eyCElspgyj9YJlEfVX/HurD",
	"CxqRlHKEOBGylHh3HZd6of3b0vJXftRg+jvNPbyi/W/md3FOcn93cO9vns0YFBAmIExAmIAwAWECwgSE",
	"CQgTECYgTECYgDABYQLCBIQJCNNdEKYqDtoCMu1gzuk0GvGRF1JV3rUbzEfKlVmDqgJTAWL5Ubdhw3kZ",
	"Po0qofyYJOrWt6/K3G261u3waXlLb7Y+ULkqByY5nyxKo0jN3m7dvufKRTAm1LMfYM/hxhMf82tx1MK2",
	"LnuWsBqcCgmEDwgfED4gfED4gPAB4QPCB4QPCB8QPiB8QPiA8AHhux+Ebx1924b10WhOBXnHSdwI+g6V",
	"Ex2UYAUg2wT4Dguvge6ZStecs+MUnWvudi4bxDkJMQ3Ou+hNFKSoOL4vzC5oHxOzrutay+1QfVqfE+pV",
	"DTbU1cCrlG/RDHBI4v/+ksQ46rosrGtnW3PKtQE2McqfjUZmmQAAEgAkAEgAkAAgAUACgAQACQASACQA",
	"SACQACABQAKABAB5HwFkHRXcBjzGJGTz9eDxWDnRQahotUaPx4XngB5vxrBQl5e3VBBgVqgWs1nmAMgD",
	"kAcgD0AegDwAeQDyAOQByAOQByAPQB6APAB5APIA5N1HkFdP2dagvIgJsuZ2BHWkv3KD2CKS07u0dO/s",
	"qU85Gh0dIlltMI04muEpjVSd6aJjgj09H8JjuUL4ULw8+3Xnl+LXb/Wn272WwW5CfiPZMDiL0YTFpdBt",
	"de+xbAkTIlxfxTkilwJxoq4oiAlPAlFczLt0BbP2c82dvNcPtnQ5tvKp199texl2iC9pmIQoSsIxiaW/",
	"uoQEQzERSRzZyCMTLEOSz/pOUzLVpGspleo7a9h37JsKOU+p9FPfsCtXvgHDMmzjpTXcq7/7VgfVlBWc",
	"xarjYLGn46NyXMapGpOILGTvOKGxXDLV54b063Fanx2W9sCybzAOGX3MvWaBJ/+oXCObv7wHhyfmN3ls",
	"c2WzEFiOOc/kCozW3RoyipC67kPmXOYaEeMcYc6ZS7FczC+o8PO8rdwsskV89EqwCZYnEf2SEEQ96WxC",
	"iW7f6qroSszSagvWz2pbsG1eviICZ/m4lP488ig0jlqF+tW6ILLLV7dXW3VwWn902upO5KWQbBQmXMGS",
	"0mXjs5h4ZELlMCD75me59/oGbV6u1DGZBMRVgVXqc+l53ahZVhjyoqqk5Kwmocv304yN1lLXgdEImTZS",
	"bqpFesdELAjR14XzGXFlNfCQ6ZjUVCTrBAMSTYVfrQlqRFS3WXP1SHmOZHy6uq97qT6yhj3HMZd9Z0/2",
	"a+qOGxNZ9UcNd56r15RFSN2EVEpONVJ9p7/bcXqdfu/UeTjsPxr2drtOf/dfVqk7lj6oy+jrqjBt3Vwa",
	"44C5h7n3ZUF6/d1eXRgxjqabuoc5iTlB2uXaniEP94PVH/b39jryvw9l3cn7jKtf2L5S3TSnq88iw/Aa",
	"82VB+rsDmSf9BflSa4yvrrlqrAIB5gJpN21rQf9KtWCpcSp1p6ie5Xia9temoRYzp627ce+JnqNVJuZu",
	"SPhi7i0+O46z6/UPBr2B86ifpLW018f8NbkUR8trk3r9Trk/ismcsoSvfNO4eOACx2JTVPsyquOe2PM+",
	"p+M2qwkQHkF4BOERhEcQHkF4BOERhEcQHkF4BOERhEcQHkF4BOERhMe7OaQYB4HWPUp6oxbxzr7Z1oxx",
	"UUu/EUYRWeTEamk7AOMlKfA72NJXBIsU1AVQF34aNeFHRux4Tk7Z2+O6A4082e4JRwufKP6QxbJ0uI78",
	"XMny8t3bJMbRsa4plZQ08tNyvVG1oRShH28DDEiy0GmCJAuSLEiyIMmCkAhCIgiJICSCkAhCIgiJICSC",
	"kAhCIgiJICSCkAhCIgiJICTewV0InvKJ1GiIlS2L47STAdIOybW62k2Mx0TElMzNpiw0TusgbtMGxMfp",
	"qKoItjiDbCtmXbcVrcRZtzmf7OZZef2uu9ug1M3ZoBjzdhlx7zA67NYDaQikIZCGQBoCaeiH3a0HUhFI",
	"RSAVgVQEUhFIRSAVgVQEUhFIRSAVgVQEUhFIRSAVgVR0F3vOmiSdFvKRIlPbiEaaZeVoi6+XjY6V9y3U",
	"InVEkKwQGphdkDTDQiq8JnFE5tKWskiLkEoEatjrq+jXk7d/tBWLSORtnzjBtkzaxlAqCXu0ZcJAvgH5",
	"BuQbkG9AvgH5BuQbkG9AvgH5BuQbkG9AvgH5BuQbkG9AvgH5BuQbkG9AvgH5BuSbq8g3JdrUQrpRrne+",
	"qn/+SdJvW6k4BjS6Osz1Is5f0slfJpg2Yk4hQExYjBY+dX0TNo5Jfvu+mfPn6scMC78QP+ZFeNtIIFsH",
	"XZZE+nt7oImAJgKaCGgioImAJgIXUMEFVHABFahJoCaBmgRqEqhJoCaBmgRqEqhJoCaBmgRqEqhJoCaB",
	"mnTf1aRNOpIaiTpyFk+jDZuBpOdqVSA/QWxiQtLfbrcx6In04r36EHYIwQ6hG7/y56tlpAJr2MujKTu8",
	"qR7QluA2CvGsINsXJFVrfyUaqMrObbTwSUwQwa6vsk2JC0Uuyi5KvVMSjHqr53VTEi+1lyX1qDfsW8M9",
	"2+oNd1Vce8OBNewBawTWCKwRWCOwRmCNwBqBNQJrBNYIrBFYI7BGYI3AGoE13i/WqAGH4YBb2LB/lf8c",
	"et80qpKjziq0eqqeI2xMOFNEBUeHT1fhonZo+OJr5XEbqnj4tGyrJ+uzjkmDVXqUebwNdFsXxr1FaLWf",
	"lCrzZugEyAqQFSArQFaArABZAbICZAXICpAVICtAVoCsAFkBsgJk9f2RlYFJGUo6fFpDqOwNZyhsJlGF",
	"mVt7DLV2D6+ZJsYmCqqqhjiis0SODN5NoqrrxqO61VjtqN1V9nEbbeBOzC5vjhY+UUs0wbL5Y82JBDQy",
	"DVtXARt5ZIKTQKhlqUxnk8mcXJGNlo9DqGaK8ijLrduP5SY0dr+RIBwtAUdLwNEScLQEHC0BR0uA4gOK",
	"Dyg+oPiA4gOKDyg+oPiA4gOKDyg+oPiA4gOKDyg+oPjcnZHyGrlnhoXrr7KXdxq5bJZ7juT3IPhsEnzO",
	"dLwIF48NvL2NtvXTgGGO5+SUvT2uKFImycsDlyezrixJqXahaJ2OBffVcm9MkPTWU+KTT9DbJMbRseb1",
	"VWlKBVRJX0NvsAQNG7jgN+0ONCzQsEDDAg0LNCzQsEDDAg0LNCzQsEDDAg0LNCzQsEDDAg0LNCzQsEDD",
	"Ag0LNCzQsEDDyjUso0StlbFqz9XZmSXjgHIlbs0Yr4EzR9pBpnIJht4e1yhcjFd3NJnPQOcCneu68Pj2",
	"iGqv1+/I/+7dDlH9UZWvZTppOiMdYUS1mKjIgKweuk+ttBXTqUgneTehVzs+QWxmVCLZ36DDp4hOSqBz",
	"SRqSbmQH0+vvlrpv2Za/LSctc/q1wMCTgOFSNx0l4VhPbNYfUlUutMwlUGCgwECBgQIDBQYKDBQYKDBQ",
	"YKDAQIGBAgMFBgoMFBgo8H2gwBmqjZhYc7D6jHHBd9Ze4RhQrsCgctpwetWRfLcJ70rPlCfKKFquMLAr",
	"0CjFPmJRoAtXpp1Niqsh5VuOfpXpNfbmaEzkMoXFvzWd2KT8lR/WH9NUy7VuI24bMdByBj1hYYg7nMhc",
	"lGuWAEfTBE8JolyO/B7htjK2J8L1TWzVRZoGyrr5B7/yxszJnCyfYXWb8SjblNs4bnO616E5IisvE+76",
	"LMBqgVCXrOx1VhGbkrbO363LS53V7+W0UwOC/OfMRKUuutrpobcuqu18LxB2r9fb7fXL7Hr1HstlJL05",
	"e0TikUj/fRGxRUA8dU9DbRkYt28m/8xcbl8cDeFtXTaZz3MSa71iXXFkjlrEdMW/K8cMz2Yxm2+IWeao",
	"RcxW/Ns6ZkUnKHwsEI6LbUF4IsxGoSmdE2Ob/6ta8nI6J43djfn+hOoZVlMarhly0cH0nI7T7/Sd3h5y",
	"9obyf/vo6FWbHud5EitY5iZcsJD+nU2meBLI5WPKEuTiqNLpyfqadXkhCccklutMxoVOhY/npHAgB2Dz",
	"diKnX9lznsTYtxGWQ40ZWmLEaTQNiH5IhNt4VzEN1Fhrt52O/VhJXpV0TtMZkb3mps5SljbP+0klP2Zb",
	"gdQVyKVec5sO07ZiMiExiVzSEIcTmTS+o6cGefgxCdSGO8GqquNXS2WFnEf1ZY2Uczs1cRnu28WrPdsS",
	"TD9+VHXVL7nq9QaFu/63crL+EZOJNbR+2XFZOGOR7F93dIXhO7KHPs4StT7Fb7J532rSf//9/M3x+e+/",
	"oz/QexoEaFptzyGWNej333GU/v57PoIp6IxMHUYfo48RQr//fj56/bSFT0HQ5FNpv9abY8u2Rq+fVndr",
	"qaerai2etqpZeNquYg12+9tVLenzz5zFNSshuyaREVkQLnT0jolLoixyCxnXMUFY3yov2KxbpEhjZRpN",
	"9YfV6byZOSkZQ6+dtWxGOcq/K/nlxXgiCn/KnzzgaBbTuRyC9HKoFAM8ZzEVpPHDzMHKlyHj4tOMzZIA",
	"x8XX8ikyT1c+kWuSTzFj4SfTCS8nOx9G5U/ioXGaR0d+lvXdJS+VTO9qf/JpmXpW5GSWdulFJe2EeKZC",
	"+STK5SThU1NsdBqxmJg0VSulXFlxEnnoPJtanZsAf6WT8sM/0LmcyJz/Zpv34zSfvWtf9NyxMnW0lyZs",
	"2bdqFa0rhl5Mr9SHphv08bh+WWmVi9GyoWJDxb63FTvrvHWVVHslzVtZcWUtkc9MsVr2ctVeKSQ5V1M5",
	"Kj8jxKsOBktft177K/Ai4kSVs06dzI08j67SfFXsNq+lrhv05mMQanc+m4o807VpSrroGZZTbzwlurqp",
	"+XV/r4iI6X666Fw64uclTkhJ4JW+0l2LwAHSlk+q2stvmrJKvtyAJ+4uwsvTqXt+6LmK92oevq4mTE+9",
	"Mls6WRxl0LA6g9RvVnx9WQa21hbrgFqjRTB0A0M3MHQDQzcwdANDNzB0A0M3MHQDQzcwdANDNzB0A0M3",
	"MHQDQ7d7cWRvzkiMlZu2OzkzjKT2eEqE1VdNu5czy5Ur782N0jcTJfHeyC5d+aZs+lO1ejhEAZsTNAoC",
	"7Kuq48s1vpw7R1OZYXWnH/Ijzbw328a9Lx0Tq0hfcTysgfCqDmcMfWVzbWMt+zcU0xkLm45pPfSyAlZC",
	"Rp7eTB4yeS1ny6Vkq72wNeLy3arZ7TY7n937g37L/bjRTGQZI3NGZAVS5t2NLmDjvtff3TsDjgocFTgq",
	"cFTgqMBRgaMCRwWOChwVOCpwVOCowFGBowJHvRcctWCiNSC1sl04JjMWi52vGnZ8az4u8lg5bENatcsj",
	"TU9aHBNJvWUaWnPw4yzzbpuDH1d9LrO2wV0d4IjHCW+4jSU2uSxdqJ1P5e0ZkwmJuKwY2Z5cy7YOI7VX",
	"cBZTLEh29qNlW2/k4q9qu9vkdPVSHxaGJs21daD0cMcjAtOAVxn2XyROES0H9x8b72vRmVIE/uPdJNYE",
	"GGXHpst1lTICTASYCDARYCLARICJABMBJgJMBJgIMBFgIsBEgIkAEwEm3geYWCF/m3iiYNNpQF7SC9KC",
	"KZ4qxyigF6QNWDzN/Qa4WGoZPxgmk6XtNVzQASwMWBiwMGBhwMKAhQELAxYGLAxYGLAwYGHAwoCFAQsD",
	"FnbnLGyVWLUDYid4vgUQ43i+BRCTfgMQ+3GBmCxtAGIAxACIARADIAZADIAYADEAYgDEAIgBEAMgBkAM",
	"gBgAsfsOxErEahMQm1OyaIHCXrKp8RDJL9ZysL8oWQAB+4EJWNE6gIEBAwMGBgwMGBgwMGBgwMCAgQED",
	"AwYGDAwYGDAwYGDAwO4jA1tCVZsAWJl9eUQOMas06al63mgDpl8b+nVV8mWmiToK3u1xsNVw2lCxH/SY",
	"r5DN4ZQvgFgAsQBiAcQCiAUQCyAWQCyAWACxAGIBxAKIBRALINb9hFgV4lR7/eqU1JhpvSDNdwK8IOKa",
	"iOrujbO+L4badCEpgCMARwCOABwBOAJwBOAIwBGAIwBHAI4AHAE4AnAE4AjA0V2Ao4IA1VKjWVJDjd7N",
	"PLzGvOkouQ44MjcImnlgooK6JfOmxqDuxT2TY+P3agrkm0YaZh2igM0JGgUB9lVL8ClHskmRaCrLv6Z2",
	"U34U0znOTNkmOAlEHqtq+O99ohaLuXkY99VKaax/ynFONsmZ9k9WUlKJXmOjicmExCRyDVJbSfRJEmOf",
	"74xS7PMi9JjImYBcqnbR4QSdF76cyz5QthG9alXLTlPG+tPR0aGtl0Sa5WQfVozfFjQIZNqMaVglKR++",
	"WlxGSlb6/jf7qyXbnIyfNdy3i1d7tiWYfvyo6qpfctXrDQp3fVnFqCAhb4MVj7OoF32PheMYpypbGQsP",
	"vfosPcxbgnS1mmhToHKFUW0TeTByRJjqEV/g6aHHmwLKc1V2MUVIlCMsBJZjDBKskrmD3X45E2oCrKR0",
	"6T5S1Xh+rktITf8E1okAmQEyA2QGyAyQGSAzQGaAzACZATIDZAbIDJAZIDNA5vsImSvAuO0G2x2DZ1V+",
	"NFsvBkHGcRVjwojPiEsn1G1p1vgkCwXMG2+OY5WLbulgQMqFTGpeZsLHcvkTML2Uq2RuGwJqyq+WCAIY",
	"AzAGYAzAGIAxAGMAxgCMARgDMAZgDMAYgDEAYwDGAIzdC+vLGePiAc+ByBo8Vtio7WxkYmrJWfpCX3oq",
	"fBISG03wnMVUyGroUkFiGxmjPxTgaJrgKUFEuE3srGSpd8/22MZlSzhgPcB6gPUA6wHWA6wHWA+wHmA9",
	"wHqA9QDrAdYDrAdYD7Ceu2A9y1SmDHtKT9XO29p7NUeeqitmH6Oc2KyAnmnMkpnGPTnnOcUTTvWaWcQ4",
	"4oGqO7zxWs5KDLcwi3qVcB9PzLQ44cTroo/Rx6iH/kBvnzz/q69+IdQ3v3vm9y76Ax1GHpvhC/NkgP5A",
	"74Qf4oj+iSfcPN1Df6B/Pn/x9ujJn6PnJ+bhfvFxb+8ljUjm+mHpxX75RU/G5xR/XhBCvOzZgY6Tfuz9",
	"NciMu74kJE4L665QpfAa9l0/VxaZXYo9u2/v2gN7z963H9q9nt07OCuZsA1WN4ze2iZqHKVvJqqibtEP",
	"XpC0vOdSRfasRddhXyeUmGCPRtMStbQtTgLiCuK9Z7H3OJX/fclcrIapBYu9JwF1L54nkatD1Asnyo+1",
	"T4/TYzInum2/iT3Vvy5yj57o7D2VKSg/f0r5LMDp7adXqE7oOYvEiUnSlyTG0Sm5FOWHpQ6q/LiI8IoP",
	"8oFlm6apavHtJyYrqNNSd/odQ9X9+feoo0ogkKNAgNMxdi+OsVAV1WeLU8YCQWfvfRIdBTil0XSUeFRt",
	"41bzoFEi2IkbsyCQUZPtfUawOCFCTii+Q+QzMeMWQprjIKls01aYEMuMGsu/Jlj+R/5UrF0ByiiQ2Sj/",
	"ihOZg19kZfdVjbdsK5H/+Vv+DOWgq0ZevvgeUceJ2nof0KkvVBc0ozL2Ho4vrHIvnjm87fiUOgBVaVTf",
	"Vo1J1clqhMpHAWj/z26lwJO8hFWpq4JURa9K2KcyG1WfhtV0wteVopIUcmcpkC26g02LjZj5sxK5ipPv",
	"G8ltJbvrhlOtd+WjJ+rrpf4lO8f8i5W1zNojKm4rwz5YQvfL9Ykw72R1DGhE7j7eJmIu88inec+yzV99",
	"mcfkUnxK9Bw3+0n1dFWO/TM3e/nJxxO9mFJT0+KvT/NBtUYXwdx2N9bb+xSouYht9fbNn5Wo5E9vMS5Z",
	"YLu2FeJLGsqo9RzbCmlkftRMzb9PPS1HaX9jjG4m8KI55Ltrdnt2m8Nlbit8i0QdgSeUxx06jjoXWPi0",
	"lovcUoxMbXW6/T3b6cr/P9yze3ZP/u515f8f7tn9cr1tVT5nywEqKlG/Ni7ghWEXWpjCnkdKsEOfvVRZ",
	"SvDqakH+zMcqn4T5+uBYWUCciDQwJit6RmFXJoilyUXh+XIhmAnm2jRckHRdCkowsjqXrwkuL6W1ASpX",
	"rYL88LG2un20zlZavS4vnWK7sQ/4Ac9TKmWcySM4RAnsh8B+COyHwH4I7IfAfgjsh8B+COyHwH4I7IfA",
	"fgjsh8B+COyH7on9UNX0Z1a2Gqi3IarZNjZOgguZ3rbGRdmsp97IiDdYGek5z1ZmRo9lxMDUCEyN7pmp",
	"Udvthj80COVAQoGEAgkFEgokFEgokFAgoUBCgYQCCQUSCiQUSCiQUCCh94yEPk6CC4QbcCjfxEON+V+H",
	"Ez2D33yWVumSSPUpyj5tOCHLbMc6Ma7acM0oCcckRmyClIloNqMkQlblLjrJL9lMuLoqcapv4VSXWp6P",
	"yYTF5LwBIwZYDaPrkOENhV6YiDol297+RnPj7aPUkNQJja+Z1tapYBEx2wyX03PWNoluEnM5E5oImZc+",
	"dX059UELrK+knRKhGkNELuUcekryOG8qEZUNTdVBBbchj24/ZiWD/JDwxdxbUMdxHK9/MNh1B4PBZbyw",
	"ajI563rqdkWtSYiuoiYlQlvPzilLeDX2+cWnLWu+bFlN2ayDbJfPtxy91bz+7DhOT+Y1CVM6fZhcbpnX",
	"d3D5RKu7IKodb911uDM8pZFGidvFg0TeE1Va1UGynKO7Mkd7A+dRP0lryYuP+WtyKY6W5wn1LF25PzI1",
	"YeWbxoGcCxyLTVHty6iOe2LP+5yOW+0/AREARAAQAUAEABEARAAQAUAEABEARAAQAUAEABEARAAQAUAE",
	"uLvjFJehfIn/Gx6EchLffLDik5goo+dcUZDLiwbu30XH1QdqxacJHLogZIZEjN0LxCYqnaoqSy/QKMU+",
	"76IRishi2dOc7rkqJh6i2ohXpTGfCft4Xo2anIzRSFNDzAXqOyikUSIItxGTq6MF5cRW75uSk4dsrEA1",
	"PpRfyMFKLcZN3JsMuVcFj1s52m/pjlkfzwSJXyueX89XT5IY+xnxLx+QINhKmVrrVQrbmpOYk3WhyRy6",
	"mcCWzmKoprQak5/iTIblCmmaAJgjA4kEEgkkEkgkkEggkUAigUQCiQQSCSQSSCSQSCCRQCLv5cEMdUxy",
	"PZI0dskqjIsN5sjKd+Oywfr4RL9tY3WsQWfJylMO5MZ3tMhsC2MikjgiHvpVTbw4nZPfmgxwYxZusHm8",
	"VphFdeg7/d2Oc9BxeiqhQg6i1tD6v48fva+Dbx35Tz/75x9WS3NRFbeKNeZ1M0QdmL8xO64c5Gp+7N5k",
	"fkhH2WESOkpNydSXiqxLaK1fGQB8++549Lp6Cq9+1DKinMWahseetu0+V389Ts/RhJLAa4i2/Cy7KKUc",
	"d3UXtjVUAVn21cLLb1fIvaimz/i9MXnvVaVQvspBRodYZCJH47QhdSZKDWlTdqJP9WUeVwkxv5Kk7A9O",
	"l844L79tV5ICi4RXK0qTub92u6HeNXmYxX/05PTwr2eWbT0+fvPPZ0uVMH/ZKu6wiQM2ccAmDtjEAZs4",
	"Nm3i2OrblG/qBKSbUveOKN/JFjhzgiYsrnQJe3XqLok8NUw1T9JWR5CbmnypK4Q2nOVVF6yuCZPooeM4",
	"E7X5pH8p+tPLL7XLr3wkvlYSnasm0QzW33OMrojoShotT0eyEreLeUQ2f1mRnGEbEWwjAvEexHsQ70G8",
	"B/EexHsQ70G8B/EexHsQ70G8B/EexHsQ73/kbUQ8V8wzlT7T0FfEeVOpOvp3J4OTjXq9cZ+hSMMn5Wfr",
	"1fsn+jv966kMpYWcv61cu82tArcq32a5JAvxbzUvLPY+dZGc5s9iNqfKcEI+1zeehnTqC4QnE+JqKQO7",
	"bhJjN5Wf+2yBFmo95iZysNSMWDaMkvWEyhtNYorMuexk0dgM/u8k1iX0ySneOcF0WnsN/s8I+LM8z0H/",
	"FpB/CQi3hr2ALAFZArIEZAnIEpAlIEtAloAsAVkCsgRkCcgSkCUgS0CWd4EslziIpwlhI76Ua0m+47Jo",
	"QuNQFfezENOg+SrYExJ5cjoqhzBU/g4R+WHTQUDvZDhPVoL5LucBkSxFq0WgXuk5aaSXgqtJQoJV4Zog",
	"XPz3VKXWVbua5OQXC2toQtpkcKhd/Qjn84CRHhAvIF5AvIB4AfEC4gXEC4gXEC8gXkC8gHgB8QLiBcTr",
	"zonXBhpVIl8KQC1zr4gJOjGFzjcfr1Nx3mCmp8J5XfH3Xh+6vJIFre7TKydw1TIKtncCOQJyBOQIyBGQ",
	"IyBHQI6AHAE5AnIE5AjIEZAjIEdAju7VLXHREqtpD4x2vnIiZGkcet+UwVRSA4/elQ5/Ln+NzLc1HOko",
	"qeVIJ1lgbXZ8FufD1QZqZpvmXrd8x+MMC790imopwG12hG4ddl5f+r29g4btilezEmvLsEze8h/ykrTX",
	"tbmsLgRUS9Xs9r4yG4Mb1IDSAaUDSgeUDigdUDqgdEDpgNIBpQNKB5QOKB1QOqB094TSbaRnm4CdXBQs",
	"WOwdE05Em62NsXSIss9abGo8Wg3h/u1qrEsV7GsE7gXcC7gXcC/gXsC9gHsB9wLuBdwLuBdwL+BewL2A",
	"ewH3uuN9jXXQZiPvitmEBmTzXkbjcN0uxiPj1/eHN+vMtmTUspgBuQFyA+QGyA2QGyA3QG6A3AC5AXID",
	"5AbIDZAbIDdAboDc3NG+wndycVjQk2VgY2/eKdhIZ4q9gWU6c+vGRhMac/FabQusMzhSr1GEw+pVh9Ur",
	"CcP6mhDgdT7Lt5s8Ho8x32icVKSgFOSPYKu0cfufqm05sKrb7NeF3X7AzoCdATsDdgbsDNgZsDNgZ8DO",
	"gJ0BOwN2BuwM2Bmws3u422/WiM8q9k5f5T8RDsm3nZhMKRckHkVezKj3lMiK3Lzb79g4R8Y98tQHa/f6",
	"vTOBHdcG1eJYriy2yzSr5vStzOmWh281hVCUPw5JjBuY2dl3oYm6pIosrktHtVRQ+ZPSAWOrqXNPZ/PH",
	"nU56PKVssBe9xwcPe96b4ehodNAb//kiffmv1ye7R0cnb8MXz//8a/9JkrzrfYoe/90h/+8L+/wsfH3w",
	"5dVk6j5+++eX+bvnj544B/+L95wOfvNm8b/Hf/3P4fh0lj4K/zV4eUq/uO+D438lh9z3xDx0/7Wf9BYP",
	"/9+7LySYDB49exO+2J3sn/zZ+/OJjx+9OOgPji4PBD1xw42scil/fgpKuVSe2PPgRDJglMAogVECowRG",
	"CYwSGCUwSmCUwCiBUQKjBEYJjBIY5f1klA3YcAtOKdh0GpDnasLWjCdPlSszr1Mll8OujXjytBzCFank",
	"0rxyJ4k62d+3Dyw3BH63LPMHY3FZxq3m/nufqHVsnutULnsWxVqCqUP3Kjne0IaB3AG5A3IH5A7IHZA7",
	"IHdA7oDcAbkDcgfkDsgdkDsgd0Du7gO5ayBqdeROfkfcJJYTo+GHr9ZlR651OmqVYA0/nNnWZccNKIlE",
	"h3rywbcz29Kh1jG2o5h0ZjHzEldNlU6yvE/iwBpavhAzPtzZwTPKO7OYBHROul+SGEddNWPW1UxGwPpm",
	"r3rdxtsm786+/f8AAAD//1vyKUC6GAYA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
