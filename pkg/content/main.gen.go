// Package content provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.5.0 DO NOT EDIT.
package content

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/oapi-codegen/runtime"
)

const (
	X_auth_tokenScopes = "x_auth_token.Scopes"
	X_client_idScopes  = "x_client_id.Scopes"
)

// ServerUrlPreProductionServer defines the Server URL for Pre-production Server
const ServerUrlPreProductionServer = "https://apis-prelive.quran.foundation/content/api/v4"

// ServerUrlProductionServer defines the Server URL for Production Server
const ServerUrlProductionServer = "https://apis.quran.foundation/content/api/v4"

// Defines values for CommonErrorResponseType.
const (
	CommonErrorResponseTypeBadGateway          CommonErrorResponseType = "bad_gateway"
	CommonErrorResponseTypeForbidden           CommonErrorResponseType = "forbidden"
	CommonErrorResponseTypeGatewayTimeout      CommonErrorResponseType = "gateway_timeout"
	CommonErrorResponseTypeInsufficientScope   CommonErrorResponseType = "insufficient_scope"
	CommonErrorResponseTypeInternalServerError CommonErrorResponseType = "internal_server_error"
	CommonErrorResponseTypeInvalidPath         CommonErrorResponseType = "invalid_path"
	CommonErrorResponseTypeInvalidRequest      CommonErrorResponseType = "invalid_request"
	CommonErrorResponseTypeInvalidToken        CommonErrorResponseType = "invalid_token"
	CommonErrorResponseTypeNotFound            CommonErrorResponseType = "not_found"
	CommonErrorResponseTypeRateLimitExceeded   CommonErrorResponseType = "rate_limit_exceeded"
	CommonErrorResponseTypeServiceError        CommonErrorResponseType = "service_error"
	CommonErrorResponseTypeServiceUnavailable  CommonErrorResponseType = "service_unavailable"
	CommonErrorResponseTypeUnauthorized        CommonErrorResponseType = "unauthorized"
	CommonErrorResponseTypeUnprocessableEntity CommonErrorResponseType = "unprocessable_entity"
)

// Defines values for VersesByChapterNumberParamsWords.
const (
	VersesByChapterNumberParamsWordsFalse VersesByChapterNumberParamsWords = "false"
	VersesByChapterNumberParamsWordsTrue  VersesByChapterNumberParamsWords = "true"
)

// Defines values for VersesByHizbNumberParamsWords.
const (
	VersesByHizbNumberParamsWordsFalse VersesByHizbNumberParamsWords = "false"
	VersesByHizbNumberParamsWordsTrue  VersesByHizbNumberParamsWords = "true"
)

// Defines values for VersesByJuzNumberParamsWords.
const (
	VersesByJuzNumberParamsWordsFalse VersesByJuzNumberParamsWords = "false"
	VersesByJuzNumberParamsWordsTrue  VersesByJuzNumberParamsWords = "true"
)

// Defines values for VersesByVerseKeyParamsWords.
const (
	VersesByVerseKeyParamsWordsFalse VersesByVerseKeyParamsWords = "false"
	VersesByVerseKeyParamsWordsTrue  VersesByVerseKeyParamsWords = "true"
)

// Defines values for VersesByPageNumberParamsWords.
const (
	VersesByPageNumberParamsWordsFalse VersesByPageNumberParamsWords = "false"
	VersesByPageNumberParamsWordsTrue  VersesByPageNumberParamsWords = "true"
)

// Defines values for VersesByRubElHizbNumberParamsWords.
const (
	VersesByRubElHizbNumberParamsWordsFalse VersesByRubElHizbNumberParamsWords = "false"
	VersesByRubElHizbNumberParamsWordsTrue  VersesByRubElHizbNumberParamsWords = "true"
)

// Defines values for RandomVerseParamsWords.
const (
	False RandomVerseParamsWords = "false"
	True  RandomVerseParamsWords = "true"
)

// Audiofile defines model for audiofile.
type Audiofile struct {
	Duration *float32                  `json:"duration,omitempty"`
	Format   *string                   `json:"format,omitempty"`
	Segments *[]map[string]interface{} `json:"segments,omitempty"`
	Url      *string                   `json:"url,omitempty"`
}

// BadGatewayResponse defines model for badGatewayResponse.
type BadGatewayResponse = CommonErrorResponse

// Chapter defines model for chapter.
type Chapter struct {
	BismillahPre    *bool          `json:"bismillah_pre,omitempty"`
	Id              *int           `json:"id,omitempty"`
	NameArabic      *string        `json:"name_arabic,omitempty"`
	NameComplex     *string        `json:"name_complex,omitempty"`
	Pages           *[]int         `json:"pages,omitempty"`
	RevelationOrder *int           `json:"revelation_order,omitempty"`
	RevelationPlace *string        `json:"revelation_place,omitempty"`
	TranslatedName  TranslatedName `json:"translated_name"`
	VersesCount     *int           `json:"verses_count,omitempty"`
}

// ChapterInfo defines model for chapter-info.
type ChapterInfo struct {
	ChapterId    float32 `json:"chapter_id"`
	LanguageName *string `json:"language_name,omitempty"`
	ShortText    string  `json:"short_text"`

	// Source Name of the source, could be a book name or site name.
	Source string `json:"source"`

	// Text Long text of chapter info, this could include html tags for formatting and styling.
	Text string `json:"text"`
}

// ChapterRecitation defines model for chapter-recitation.
type ChapterRecitation struct {
	// AudioUrl The audio file's url
	AudioUrl *string `json:"audio_url,omitempty"`

	// ChapterId The chapter id
	ChapterId *int `json:"chapter_id,omitempty"`

	// FileSize The file size in bytes
	FileSize *int `json:"file_size,omitempty"`

	// Format The format of the file
	Format *string `json:"format,omitempty"`

	// Id The Id of the audio file
	Id *int `json:"id,omitempty"`

	// TotalFiles The total number of files
	TotalFiles *int `json:"total_files,omitempty"`
}

// ChapterReciters defines model for chapter-reciters.
type ChapterReciters struct {
	// ArabicName Reciter name in Arabic
	ArabicName *string `json:"arabic_name,omitempty"`

	// FilesSize Total size of all audio files in KBs
	FilesSize *float32 `json:"files_size,omitempty"`

	// Format Audio files format
	Format *string `json:"format,omitempty"`

	// Id Reciter ID
	Id int `json:"id"`

	// Name Name of reciter in English
	Name         string  `json:"name"`
	RelativePath *string `json:"relative_path,omitempty"`
}

// CommonErrorResponse defines model for commonErrorResponse.
type CommonErrorResponse struct {
	Message *string                  `json:"message,omitempty"`
	Success *bool                    `json:"success,omitempty"`
	Type    *CommonErrorResponseType `json:"type,omitempty"`
}

// CommonErrorResponseType defines model for CommonErrorResponse.Type.
type CommonErrorResponseType string

// ForbiddenResponse defines model for forbiddenResponse.
type ForbiddenResponse = CommonErrorResponse

// GatewayTimeoutResponse defines model for gatewayTimeoutResponse.
type GatewayTimeoutResponse = CommonErrorResponse

// InternalServerErrorResponse defines model for internalServerErrorResponse.
type InternalServerErrorResponse = CommonErrorResponse

// InvalidRequestResponse defines model for invalidRequestResponse.
type InvalidRequestResponse = CommonErrorResponse

// Language defines model for language.
type Language struct {
	Direction *string  `json:"direction,omitempty"`
	Id        *float32 `json:"id,omitempty"`

	// IsoCode iso code of the language, you'll pass this code in api calls for fetching content in specific language.
	IsoCode         *string           `json:"iso_code,omitempty"`
	Name            *string           `json:"name,omitempty"`
	NativeName      *string           `json:"native_name,omitempty"`
	TranslatedNames *[]TranslatedName `json:"translated_names,omitempty"`
}

// NotFoundResponse defines model for notFoundResponse.
type NotFoundResponse = CommonErrorResponse

// Pagination defines model for pagination.
type Pagination struct {
	CurrentPage *int `json:"current_page,omitempty"`

	// NextPage Next page in paginated result
	NextPage *int `json:"next_page,omitempty"`

	// PerPage Entries per api call
	PerPage *int `json:"per_page,omitempty"`

	// TotalPages Total number of pages
	TotalPages   *int `json:"total_pages=,omitempty"`
	TotalRecords *int `json:"total_records=,omitempty"`
}

// RateLimitExceededResponse defines model for rateLimitExceededResponse.
type RateLimitExceededResponse = CommonErrorResponse

// Recitation defines model for recitation.
type Recitation struct {
	Id             *int    `json:"id,omitempty"`
	ReciterName    *string `json:"reciter_name,omitempty"`
	Style          *string `json:"style,omitempty"`
	TranslatedName *struct {
		LanguageName *string `json:"language_name,omitempty"`
		Name         *string `json:"name,omitempty"`
	} `json:"translated_name,omitempty"`
}

// Resource defines model for resource.
type Resource struct {
	AuthorName     *string `json:"author_name,omitempty"`
	Id             *int    `json:"id,omitempty"`
	LanguageName   *string `json:"language_name,omitempty"`
	Name           *string `json:"name,omitempty"`
	Slug           *string `json:"slug,omitempty"`
	TranslatedName *struct {
		LanguageName *string `json:"language_name,omitempty"`
		Name         *string `json:"name,omitempty"`
	} `json:"translated_name,omitempty"`
}

// ServiceUnavailableResponse defines model for serviceUnavailableResponse.
type ServiceUnavailableResponse = CommonErrorResponse

// Tafsir defines model for tafsir.
type Tafsir struct {
	ChapterId       *int    `json:"chapter_id,omitempty"`
	HizbNumber      *int    `json:"hizb_number,omitempty"`
	Id              *int    `json:"id,omitempty"`
	JuzNumber       *int    `json:"juz_number,omitempty"`
	LanguageId      *int    `json:"language_id,omitempty"`
	LanguageName    *string `json:"language_name,omitempty"`
	PageNumber      *int    `json:"page_number,omitempty"`
	ResourceName    *string `json:"resource_name,omitempty"`
	RubElHizbNumber *int    `json:"rub_el_hizb_number,omitempty"`
	Text            *string `json:"text,omitempty"`
	VerseId         *int    `json:"verse_id,omitempty"`
	VerseKey        *string `json:"verse_key,omitempty"`
	VerseNumber     *int    `json:"verse_number,omitempty"`
}

// TranslatedName defines model for translated-name.
type TranslatedName struct {
	LanguageName string `json:"language_name"`

	// Name Name of the resource in specific language.
	Name string `json:"name"`
}

// Translation defines model for translation.
type Translation struct {
	ChapterId    *int    `json:"chapter_id,omitempty"`
	HizbNumber   *int    `json:"hizb_number,omitempty"`
	Id           *int    `json:"id,omitempty"`
	JuzNumber    *int    `json:"juz_number,omitempty"`
	LanguageId   *int    `json:"language_id,omitempty"`
	LanguageName *string `json:"language_name,omitempty"`
	PageNumber   *int    `json:"page_number,omitempty"`
	ResourceId   int     `json:"resource_id"`
	ResourceName *string `json:"resource_name,omitempty"`
	RubNumber    *int    `json:"rub_number,omitempty"`

	// Text Text of the translation, text could have HTML tags for formatting and footnotes.
	Text        string  `json:"text"`
	VerseId     *int    `json:"verse_id,omitempty"`
	VerseKey    *string `json:"verse_key,omitempty"`
	VerseNumber *int    `json:"verse_number,omitempty"`
}

// UnauthorizedResponse defines model for unauthorizedResponse.
type UnauthorizedResponse = CommonErrorResponse

// UnprocessableEntityResponse defines model for unprocessableEntityResponse.
type UnprocessableEntityResponse = CommonErrorResponse

// Verse defines model for verse.
type Verse struct {
	Audio *Audiofile `json:"audio,omitempty"`

	// ChapterId Chapter number of this verse
	ChapterId *int `json:"chapter_id,omitempty"`

	// CodeV1 Glyphs codes for QCF v1 fonts
	CodeV1 *string `json:"code_v1,omitempty"`

	// CodeV2 Glyphs codes for QCF v2 fonts
	CodeV2     *string `json:"code_v2,omitempty"`
	HizbNumber int     `json:"hizb_number"`
	Id         int     `json:"id"`
	ImageUrl   *string `json:"image_url,omitempty"`
	ImageWidth *int    `json:"image_width,omitempty"`
	JuzNumber  int     `json:"juz_number"`

	// PageNumber page_number is deprecated, please use `v1_page` instead.
	PageNumber int `json:"page_number"`
	RubNumber  int `json:"rub_number"`

	// TextImlaei Ayah text in Imla'ei script.
	//
	// Imla'ei script, is the modern Arabic writing style which is currently in use.
	TextImlaei       *string `json:"text_imlaei,omitempty"`
	TextImlaeiSimple *string `json:"text_imlaei_simple,omitempty"`
	TextIndopak      *string `json:"text_indopak,omitempty"`

	// TextUthmani Ayah text in Uthmani Script.
	//
	// Uthmani script is an old-fashion script used by the third Caliph, Uthman, to produce the first standard quran manuscript.
	TextUthmani *string `json:"text_uthmani,omitempty"`

	// TextUthmaniSimple Uthmani script diacritic marks
	TextUthmaniSimple  *string        `json:"text_uthmani_simple,omitempty"`
	TextUthmaniTajweed *string        `json:"text_uthmani_tajweed,omitempty"`
	Translations       *[]Translation `json:"translations,omitempty"`

	// V1Page Madani Mushaf Page number for v1 font. If `v1_page` value is 2, that means you'll use page 2 font file to render this ayah using v1 glyph codes.
	V1Page *int `json:"v1_page,omitempty"`

	// V2Page Madani Mushaf Page number for v2 font. If `v2_page` value is 2, that means you'll use page 2 font file to render this ayah using v2 glyph codes.
	V2Page     *int `json:"v2_page,omitempty"`
	VerseIndex *int `json:"verse_index,omitempty"`

	// VerseKey key of the verse, key is generated using chapter number and ayah number. e.g 1:1 is first ayah of first surah.
	VerseKey    string  `json:"verse_key"`
	VerseNumber int     `json:"verse_number"`
	Words       *[]Word `json:"words,omitempty"`
}

// Word defines model for word.
type Word struct {
	AudioUrl     string `json:"audio_url"`
	CharTypeName string `json:"char_type_name"`

	// CodeV1 glyph code that you can use to render the word using QCF  v1 font.
	CodeV1 *string `json:"code_v1,omitempty"`

	// CodeV2 glyph code that you can use to render the word using QCF  v2 font.
	CodeV2 *string `json:"code_v2,omitempty"`
	Id     *int    `json:"id,omitempty"`

	// LineNumber Line number in the Mushaf for this word
	LineNumber *int    `json:"line_number,omitempty"`
	Location   *string `json:"location,omitempty"`

	// PageNumber page_number is deprecated, please use `v1_page` instead.
	PageNumber *int `json:"page_number,omitempty"`

	// Position Word position within ayah
	Position int `json:"position"`

	// TextImlaei Word text in simple/Imlaei script
	TextImlaei  *string `json:"text_imlaei,omitempty"`
	TextIndopak *string `json:"text_indopak,omitempty"`

	// TextUthmani Word text in Uthmanic script
	TextUthmani *string `json:"text_uthmani,omitempty"`
	Translation struct {
		LanguageName *string `json:"language_name,omitempty"`
		Text         *string `json:"text,omitempty"`
	} `json:"translation"`
	Transliteration struct {
		LanguageName *string `json:"language_name,omitempty"`
		Text         *string `json:"text,omitempty"`
	} `json:"transliteration"`

	// V1Page Madani Mushaf Page number for v1 font. If `v1_page` value is 2, that means you'll use page 2 font file to render this word using v1 glyph codes.
	V1Page *int `json:"v1_page,omitempty"`

	// V2Page Madani Mushaf Page number for v2 font. If `v2_page` value is 2, that means you'll use page 2 font file to render this ayah using v2 glyph codes.
	V2Page   *int    `json:"v2_page,omitempty"`
	VerseKey *string `json:"verse_key,omitempty"`
}

// BadGateway defines model for badGateway.
type BadGateway = BadGatewayResponse

// Forbidden defines model for forbidden.
type Forbidden = ForbiddenResponse

// GatewayTimeout defines model for gatewayTimeout.
type GatewayTimeout = GatewayTimeoutResponse

// InternalServerError defines model for internalServerError.
type InternalServerError = InternalServerErrorResponse

// InvalidRequest defines model for invalidRequest.
type InvalidRequest = InvalidRequestResponse

// NotFound defines model for notFound.
type NotFound = NotFoundResponse

// RateLimitExceeded defines model for rateLimitExceeded.
type RateLimitExceeded = RateLimitExceededResponse

// ServiceUnavailable defines model for serviceUnavailable.
type ServiceUnavailable = ServiceUnavailableResponse

// Unauthorized defines model for unauthorized.
type Unauthorized = UnauthorizedResponse

// UnprocessableEntity defines model for unprocessableEntity.
type UnprocessableEntity = UnprocessableEntityResponse

// ChapterReciterAudioFilesParams defines parameters for ChapterReciterAudioFiles.
type ChapterReciterAudioFilesParams struct {
	Language *string `form:"language,omitempty" json:"language,omitempty"`
}

// ChaptersParams defines parameters for Chapters.
type ChaptersParams struct {
	Language *string `form:"language,omitempty" json:"language,omitempty"`
}

// ChapterInfoParams defines parameters for ChapterInfo.
type ChapterInfoParams struct {
	Language *string `form:"language,omitempty" json:"language,omitempty"`
}

// ChapterParams defines parameters for Chapter.
type ChapterParams struct {
	Language *string `form:"language,omitempty" json:"language,omitempty"`
}

// RecitationAudioFilesParams defines parameters for RecitationAudioFiles.
type RecitationAudioFilesParams struct {
	// Fields comma separated field of audio files.
	Fields *string `form:"fields,omitempty" json:"fields,omitempty"`

	// ChapterNumber If you want to get audio file of a specific surah.
	ChapterNumber *int `form:"chapter_number,omitempty" json:"chapter_number,omitempty"`

	// JuzNumber If you want to get audio file of a specific juz.
	JuzNumber *int `form:"juz_number,omitempty" json:"juz_number,omitempty"`

	// PageNumber If you want to get audio file of a Madani Mushaf page
	PageNumber *int `form:"page_number,omitempty" json:"page_number,omitempty"`

	// HizbNumber If you want to get audio file of a specific hizb.
	HizbNumber *int `form:"hizb_number,omitempty" json:"hizb_number,omitempty"`

	// RubElHizbNumber If you want to get audio file of a specific Rub el Hizb.
	RubElHizbNumber *int `form:"rub_el_hizb_number,omitempty" json:"rub_el_hizb_number,omitempty"`

	// VerseKey If you want to get audio file of a specific ayah.
	VerseKey *string `form:"verse_key,omitempty" json:"verse_key,omitempty"`
}

// TafsirParams defines parameters for Tafsir.
type TafsirParams struct {
	// Fields comma separated fields of tafsir.
	Fields *string `form:"fields,omitempty" json:"fields,omitempty"`

	// ChapterNumber If you want to get tafsir of a specific surah.
	ChapterNumber *int `form:"chapter_number,omitempty" json:"chapter_number,omitempty"`

	// JuzNumber If you want to get tafsir of a specific juz.
	JuzNumber *int `form:"juz_number,omitempty" json:"juz_number,omitempty"`

	// PageNumber If you want to get tafsir of a Madani Mushaf page
	PageNumber *int `form:"page_number,omitempty" json:"page_number,omitempty"`

	// HizbNumber If you want to get tafsir of a specific hizb.
	HizbNumber *int `form:"hizb_number,omitempty" json:"hizb_number,omitempty"`

	// RubElHizbNumber If you want to get tafsir of a specific Rub el Hizb.
	RubElHizbNumber *int `form:"rub_el_hizb_number,omitempty" json:"rub_el_hizb_number,omitempty"`

	// VerseKey If you want to get tafsir of a specific ayah.
	VerseKey *string `form:"verse_key,omitempty" json:"verse_key,omitempty"`
}

// TranslationParams defines parameters for Translation.
type TranslationParams struct {
	// Fields comma separated fields of translation.
	Fields *string `form:"fields,omitempty" json:"fields,omitempty"`

	// ChapterNumber If you want to get translation of a specific surah.
	ChapterNumber *int `form:"chapter_number,omitempty" json:"chapter_number,omitempty"`

	// JuzNumber If you want to get translation of a specific juz.
	JuzNumber *int `form:"juz_number,omitempty" json:"juz_number,omitempty"`

	// PageNumber If you want to get translation of a Madani Mushaf page
	PageNumber *int `form:"page_number,omitempty" json:"page_number,omitempty"`

	// HizbNumber If you want to get translation of a specific hizb.
	HizbNumber *int `form:"hizb_number,omitempty" json:"hizb_number,omitempty"`

	// RubElHizbNumber If you want to get translation of a specific Rub el Hizb.
	RubElHizbNumber *int `form:"rub_el_hizb_number,omitempty" json:"rub_el_hizb_number,omitempty"`

	// VerseKey If you want to get translation of a specific ayah.
	VerseKey *string `form:"verse_key,omitempty" json:"verse_key,omitempty"`
}

// QuranVersesCodeV1Params defines parameters for QuranVersesCodeV1.
type QuranVersesCodeV1Params struct {
	// ChapterNumber If you want to get text of a specific surah.
	ChapterNumber *int `form:"chapter_number,omitempty" json:"chapter_number,omitempty"`

	// JuzNumber If you want to get text of a specific juz.
	JuzNumber *int `form:"juz_number,omitempty" json:"juz_number,omitempty"`

	// PageNumber If you want to get text of a Madani Mushaf page
	PageNumber *int `form:"page_number,omitempty" json:"page_number,omitempty"`

	// HizbNumber If you want to get text of a specific hizb.
	HizbNumber *int `form:"hizb_number,omitempty" json:"hizb_number,omitempty"`

	// RubElHizbNumber If you want to get text of a specific Rub el Hizb.
	RubElHizbNumber *int `form:"rub_el_hizb_number,omitempty" json:"rub_el_hizb_number,omitempty"`

	// VerseKey If you want to get text of a specific ayah.
	VerseKey *string `form:"verse_key,omitempty" json:"verse_key,omitempty"`
}

// QuranVersesCodeV2Params defines parameters for QuranVersesCodeV2.
type QuranVersesCodeV2Params struct {
	// ChapterNumber If you want to get text of a specific surah.
	ChapterNumber *int `form:"chapter_number,omitempty" json:"chapter_number,omitempty"`

	// JuzNumber If you want to get text of a specific juz.
	JuzNumber *int `form:"juz_number,omitempty" json:"juz_number,omitempty"`

	// PageNumber If you want to get text of a Madani Mushaf page
	PageNumber *int `form:"page_number,omitempty" json:"page_number,omitempty"`

	// HizbNumber If you want to get text of a specific hizb.
	HizbNumber *int `form:"hizb_number,omitempty" json:"hizb_number,omitempty"`

	// RubElHizbNumber If you want to get text of a specific Rub el Hizb.
	RubElHizbNumber *int `form:"rub_el_hizb_number,omitempty" json:"rub_el_hizb_number,omitempty"`

	// VerseKey If you want to get text of a specific ayah.
	VerseKey *string `form:"verse_key,omitempty" json:"verse_key,omitempty"`
}

// QuranVersesImlaeiParams defines parameters for QuranVersesImlaei.
type QuranVersesImlaeiParams struct {
	// ChapterNumber If you want to get text of a specific surah.
	ChapterNumber *int `form:"chapter_number,omitempty" json:"chapter_number,omitempty"`

	// JuzNumber If you want to get text of a specific juz.
	JuzNumber *int `form:"juz_number,omitempty" json:"juz_number,omitempty"`

	// PageNumber If you want to get text of a Madani Mushaf page
	PageNumber *int `form:"page_number,omitempty" json:"page_number,omitempty"`

	// HizbNumber If you want to get text of a specific hizb.
	HizbNumber *int `form:"hizb_number,omitempty" json:"hizb_number,omitempty"`

	// RubElHizbNumber If you want to get text of a specific Rub el Hizb.
	RubElHizbNumber *int `form:"rub_el_hizb_number,omitempty" json:"rub_el_hizb_number,omitempty"`

	// VerseKey If you want to get text of a specific ayah.
	VerseKey *string `form:"verse_key,omitempty" json:"verse_key,omitempty"`
}

// QuranVersesIndopakParams defines parameters for QuranVersesIndopak.
type QuranVersesIndopakParams struct {
	// ChapterNumber If you want to get indopak script of a specific surah.
	ChapterNumber *int `form:"chapter_number,omitempty" json:"chapter_number,omitempty"`

	// JuzNumber If you want to get indopak script of a specific juz.
	JuzNumber *int `form:"juz_number,omitempty" json:"juz_number,omitempty"`

	// PageNumber If you want to get indopak script of a Madani Mushaf page
	PageNumber *int `form:"page_number,omitempty" json:"page_number,omitempty"`

	// HizbNumber If you want to get indopak script of a specific hizb.
	HizbNumber *int `form:"hizb_number,omitempty" json:"hizb_number,omitempty"`

	// RubElHizbNumber If you want to get indopak script of a specific Rub el Hizb.
	RubElHizbNumber *int `form:"rub_el_hizb_number,omitempty" json:"rub_el_hizb_number,omitempty"`

	// VerseKey If you want to get indopak script of a specific ayah.
	VerseKey *string `form:"verse_key,omitempty" json:"verse_key,omitempty"`
}

// QuranVersesUthmaniParams defines parameters for QuranVersesUthmani.
type QuranVersesUthmaniParams struct {
	// ChapterNumber If you want to get Uthmani script of a specific surah.
	ChapterNumber *int `form:"chapter_number,omitempty" json:"chapter_number,omitempty"`

	// JuzNumber If you want to get Uthmani script of a specific juz.
	JuzNumber *int `form:"juz_number,omitempty" json:"juz_number,omitempty"`

	// PageNumber If you want to get Uthmani script of a Madani Mushaf page
	PageNumber *int `form:"page_number,omitempty" json:"page_number,omitempty"`

	// HizbNumber If you want to get Uthmani script of a specific hizb.
	HizbNumber *int `form:"hizb_number,omitempty" json:"hizb_number,omitempty"`

	// RubElHizbNumber If you want to get Uthmani script of a specific Rub el Hizb.
	RubElHizbNumber *int `form:"rub_el_hizb_number,omitempty" json:"rub_el_hizb_number,omitempty"`

	// VerseKey If you want to get Uthmani script of a specific ayah.
	VerseKey *string `form:"verse_key,omitempty" json:"verse_key,omitempty"`
}

// QuranVersesUthmaniSimpleParams defines parameters for QuranVersesUthmaniSimple.
type QuranVersesUthmaniSimpleParams struct {
	// ChapterNumber If you want to get Uthmani script of a specific surah.
	ChapterNumber *int `form:"chapter_number,omitempty" json:"chapter_number,omitempty"`

	// JuzNumber If you want to get Uthmani script of a specific juz.
	JuzNumber *int `form:"juz_number,omitempty" json:"juz_number,omitempty"`

	// PageNumber If you want to get Uthmani script of a Madani Mushaf page
	PageNumber *int `form:"page_number,omitempty" json:"page_number,omitempty"`

	// HizbNumber If you want to get Uthmani script of a specific hizb.
	HizbNumber *int `form:"hizb_number,omitempty" json:"hizb_number,omitempty"`

	// RubElHizbNumber If you want to get Uthmani script of a specific Rub el Hizb.
	RubElHizbNumber *int `form:"rub_el_hizb_number,omitempty" json:"rub_el_hizb_number,omitempty"`

	// VerseKey If you want to get Uthmani script of a specific ayah.
	VerseKey *string `form:"verse_key,omitempty" json:"verse_key,omitempty"`
}

// QuranVersesUthmaniTajweedParams defines parameters for QuranVersesUthmaniTajweed.
type QuranVersesUthmaniTajweedParams struct {
	// ChapterNumber If you want to get text of a specific surah.
	ChapterNumber *int `form:"chapter_number,omitempty" json:"chapter_number,omitempty"`

	// JuzNumber If you want to get text of a specific juz.
	JuzNumber *int `form:"juz_number,omitempty" json:"juz_number,omitempty"`

	// PageNumber If you want to get text of a Madani Mushaf page
	PageNumber *int `form:"page_number,omitempty" json:"page_number,omitempty"`

	// HizbNumber If you want to get text of a specific hizb.
	HizbNumber *int `form:"hizb_number,omitempty" json:"hizb_number,omitempty"`

	// RubElHizbNumber If you want to get text of a specific Rub el Hizb.
	RubElHizbNumber *int `form:"rub_el_hizb_number,omitempty" json:"rub_el_hizb_number,omitempty"`

	// VerseKey If you want to get text of a specific ayah.
	VerseKey *string `form:"verse_key,omitempty" json:"verse_key,omitempty"`
}

// ChapterRecitersParams defines parameters for ChapterReciters.
type ChapterRecitersParams struct {
	// Language Name of reciters in specific language. Will fallback to English if we don't have names in specific language.
	Language *string `form:"language,omitempty" json:"language,omitempty"`
}

// LanguagesParams defines parameters for Languages.
type LanguagesParams struct {
	Language *string `form:"language,omitempty" json:"language,omitempty"`
}

// RecitationsParams defines parameters for Recitations.
type RecitationsParams struct {
	// Language Name of reciters in specific language. Will fallback to English if we don't have names in specific language.
	Language *string `form:"language,omitempty" json:"language,omitempty"`
}

// TafsirsParams defines parameters for Tafsirs.
type TafsirsParams struct {
	Language *string `form:"language,omitempty" json:"language,omitempty"`
}

// TranslationsParams defines parameters for Translations.
type TranslationsParams struct {
	Language *string `form:"language,omitempty" json:"language,omitempty"`
}

// SearchParams defines parameters for Search.
type SearchParams struct {
	// Q Search query, you can use *query* as well
	Q *string `form:"q,omitempty" json:"q,omitempty"`

	// Size Results per page. *s* is also valid parameter.
	Size *float32 `form:"size,omitempty" json:"size,omitempty"`

	// Page Page number, well for pagination. You can use *p* as well
	Page *float32 `form:"page,omitempty" json:"page,omitempty"`

	// Language ISO code of language, use this query params if you want to boost translations for specific language.
	// For list of available language see [/resources/languages](/docs/content_apis_versioned/languages) endpoint.
	Language *string `form:"language,omitempty" json:"language,omitempty"`
}

// VersesByChapterNumberParams defines parameters for VersesByChapterNumber.
type VersesByChapterNumberParams struct {
	// Language Language to fetch word translation in specific language.
	Language *string `form:"language,omitempty" json:"language,omitempty"`

	// Words Include words of each ayah?
	//
	// 0 or false will not include words.
	//
	// 1 or true will include the words.
	Words *VersesByChapterNumberParamsWords `form:"words,omitempty" json:"words,omitempty"`

	// Translations comma separated ids of translations to load for each ayah.
	Translations *string `form:"translations,omitempty" json:"translations,omitempty"`

	// Audio Id of recitation if you want to load audio of each ayah.
	Audio *int `form:"audio,omitempty" json:"audio,omitempty"`

	// Tafsirs Comma separated ids of tafsirs to load for each ayah if you want to load tafsirs.
	Tafsirs *string `form:"tafsirs,omitempty" json:"tafsirs,omitempty"`

	// WordFields Comma-separated list of word-level fields to include in response. [See full field reference](/docs/api/field-reference#word-level-fields).
	WordFields *string `form:"word_fields,omitempty" json:"word_fields,omitempty"`

	// TranslationFields Comma separated list of translation fields if you want to add more fields for each translation.
	TranslationFields *string `form:"translation_fields,omitempty" json:"translation_fields,omitempty"`

	// Fields Comma-separated list of verse-level fields to include in response. [See full field reference](/docs/api/field-reference#verse-level-fields).
	Fields *string `form:"fields,omitempty" json:"fields,omitempty"`

	// Page For paginating within the result
	Page *int `form:"page,omitempty" json:"page,omitempty"`

	// PerPage records per api call, you can get maximum 50 records.
	PerPage *int `form:"per_page,omitempty" json:"per_page,omitempty"`
}

// VersesByChapterNumberParamsWords defines parameters for VersesByChapterNumber.
type VersesByChapterNumberParamsWords string

// VersesByHizbNumberParams defines parameters for VersesByHizbNumber.
type VersesByHizbNumberParams struct {
	// Language Language to fetch word translation in specific language.
	Language *string `form:"language,omitempty" json:"language,omitempty"`

	// Words Include words of each ayah?
	//
	// 0 or false will not include words.
	//
	// 1 or true will include the words.
	Words *VersesByHizbNumberParamsWords `form:"words,omitempty" json:"words,omitempty"`

	// Translations comma separated ids of translations to load for each ayah.
	Translations *string `form:"translations,omitempty" json:"translations,omitempty"`

	// Audio Id of recitation if you want to load audio of each ayah.
	Audio *int `form:"audio,omitempty" json:"audio,omitempty"`

	// Tafsirs Comma separated ids of tafsirs to load for each ayah if you want to load tafsirs.
	Tafsirs *string `form:"tafsirs,omitempty" json:"tafsirs,omitempty"`

	// WordFields Comma-separated list of word-level fields to include in response. [See full field reference](/docs/api/field-reference#word-level-fields).
	WordFields *string `form:"word_fields,omitempty" json:"word_fields,omitempty"`

	// TranslationFields Comma separated list of translation fields if you want to add more fields for each translation.
	TranslationFields *string `form:"translation_fields,omitempty" json:"translation_fields,omitempty"`

	// Fields Comma-separated list of verse-level fields to include in response. [See full field reference](/docs/api/field-reference#verse-level-fields).
	Fields *string `form:"fields,omitempty" json:"fields,omitempty"`

	// Page For paginating within the result
	Page *int `form:"page,omitempty" json:"page,omitempty"`

	// PerPage records per api call, you can get maximum 50 records.
	PerPage *int `form:"per_page,omitempty" json:"per_page,omitempty"`
}

// VersesByHizbNumberParamsWords defines parameters for VersesByHizbNumber.
type VersesByHizbNumberParamsWords string

// VersesByJuzNumberParams defines parameters for VersesByJuzNumber.
type VersesByJuzNumberParams struct {
	// Language Language to fetch word translation in specific language.
	Language *string `form:"language,omitempty" json:"language,omitempty"`

	// Words Include words of each ayah?
	//
	// 0 or false will not include words.
	//
	// 1 or true will include the words.
	Words *VersesByJuzNumberParamsWords `form:"words,omitempty" json:"words,omitempty"`

	// Translations comma separated ids of translations to load for each ayah.
	Translations *string `form:"translations,omitempty" json:"translations,omitempty"`

	// Audio Id of recitation if you want to load audio of each ayah.
	Audio *int `form:"audio,omitempty" json:"audio,omitempty"`

	// Tafsirs Comma separated ids of tafsirs to load for each ayah if you want to load tafsirs.
	Tafsirs *string `form:"tafsirs,omitempty" json:"tafsirs,omitempty"`

	// WordFields Comma-separated list of word-level fields to include in response. [See full field reference](/docs/api/field-reference#word-level-fields).
	WordFields *string `form:"word_fields,omitempty" json:"word_fields,omitempty"`

	// TranslationFields Comma separated list of translation fields if you want to add more fields for each translation.
	TranslationFields *string `form:"translation_fields,omitempty" json:"translation_fields,omitempty"`

	// Fields Comma-separated list of verse-level fields to include in response. [See full field reference](/docs/api/field-reference#verse-level-fields).
	Fields *string `form:"fields,omitempty" json:"fields,omitempty"`

	// Page For paginating within the result
	Page *int `form:"page,omitempty" json:"page,omitempty"`

	// PerPage records per api call, you can get maximum 50 records.
	PerPage *int `form:"per_page,omitempty" json:"per_page,omitempty"`
}

// VersesByJuzNumberParamsWords defines parameters for VersesByJuzNumber.
type VersesByJuzNumberParamsWords string

// VersesByVerseKeyParams defines parameters for VersesByVerseKey.
type VersesByVerseKeyParams struct {
	// Language Language to fetch word translation in specific language.
	Language *string `form:"language,omitempty" json:"language,omitempty"`

	// Words Include words of each ayah?
	//
	// 0 or false will not include words.
	//
	// 1 or true will include the words.
	Words *VersesByVerseKeyParamsWords `form:"words,omitempty" json:"words,omitempty"`

	// Translations comma separated ids of translations to load for each ayah.
	Translations *string `form:"translations,omitempty" json:"translations,omitempty"`

	// Audio Id of recitation if you want to load audio of each ayah.
	Audio *int `form:"audio,omitempty" json:"audio,omitempty"`

	// Tafsirs Comma separated ids of tafsirs to load for each ayah if you want to load tafsirs.
	Tafsirs *string `form:"tafsirs,omitempty" json:"tafsirs,omitempty"`

	// WordFields Comma-separated list of word-level fields to include in response. [See full field reference](/docs/api/field-reference#word-level-fields).
	WordFields *string `form:"word_fields,omitempty" json:"word_fields,omitempty"`

	// TranslationFields Comma separated list of translation fields if you want to add more fields for each translation.
	TranslationFields *string `form:"translation_fields,omitempty" json:"translation_fields,omitempty"`

	// Fields Comma-separated list of verse-level fields to include in response. [See full field reference](/docs/api/field-reference#verse-level-fields).
	Fields *string `form:"fields,omitempty" json:"fields,omitempty"`
}

// VersesByVerseKeyParamsWords defines parameters for VersesByVerseKey.
type VersesByVerseKeyParamsWords string

// VersesByPageNumberParams defines parameters for VersesByPageNumber.
type VersesByPageNumberParams struct {
	// Language Language to fetch word translation in specific language.
	Language *string `form:"language,omitempty" json:"language,omitempty"`

	// Words Include words of each ayah?
	//
	// 0 or false will not include words.
	//
	// 1 or true will include the words.
	Words *VersesByPageNumberParamsWords `form:"words,omitempty" json:"words,omitempty"`

	// Translations comma separated ids of translations to load for each ayah.
	Translations *string `form:"translations,omitempty" json:"translations,omitempty"`

	// Audio Id of recitation if you want to load audio of each ayah.
	Audio *int `form:"audio,omitempty" json:"audio,omitempty"`

	// Tafsirs Comma separated ids of tafsirs to load for each ayah if you want to load tafsirs.
	Tafsirs *string `form:"tafsirs,omitempty" json:"tafsirs,omitempty"`

	// WordFields Comma-separated list of word-level fields to include in response. [See full field reference](/docs/api/field-reference#word-level-fields).
	WordFields *string `form:"word_fields,omitempty" json:"word_fields,omitempty"`

	// TranslationFields Comma separated list of translation fields if you want to add more fields for each translation.
	TranslationFields *string `form:"translation_fields,omitempty" json:"translation_fields,omitempty"`

	// Fields Comma-separated list of verse-level fields to include in response. [See full field reference](/docs/api/field-reference#verse-level-fields).
	Fields *string `form:"fields,omitempty" json:"fields,omitempty"`

	// Page For paginating within the result
	Page *int `form:"page,omitempty" json:"page,omitempty"`

	// PerPage records per api call, you can get maximum 50 records.
	PerPage *int `form:"per_page,omitempty" json:"per_page,omitempty"`
}

// VersesByPageNumberParamsWords defines parameters for VersesByPageNumber.
type VersesByPageNumberParamsWords string

// VersesByRubElHizbNumberParams defines parameters for VersesByRubElHizbNumber.
type VersesByRubElHizbNumberParams struct {
	// Language Language to fetch word translation in specific language.
	Language *string `form:"language,omitempty" json:"language,omitempty"`

	// Words Include words of each ayah?
	//
	// 0 or false will not include words.
	//
	// 1 or true will include the words.
	Words *VersesByRubElHizbNumberParamsWords `form:"words,omitempty" json:"words,omitempty"`

	// Translations comma separated ids of translations to load for each ayah.
	Translations *string `form:"translations,omitempty" json:"translations,omitempty"`

	// Audio Id of recitation if you want to load audio of each ayah.
	Audio *int `form:"audio,omitempty" json:"audio,omitempty"`

	// Tafsirs Comma separated ids of tafsirs to load for each ayah if you want to load tafsirs.
	Tafsirs *string `form:"tafsirs,omitempty" json:"tafsirs,omitempty"`

	// WordFields Comma-separated list of word-level fields to include in response. [See full field reference](/docs/api/field-reference#word-level-fields).
	WordFields *string `form:"word_fields,omitempty" json:"word_fields,omitempty"`

	// TranslationFields Comma separated list of translation fields if you want to add more fields for each translation.
	TranslationFields *string `form:"translation_fields,omitempty" json:"translation_fields,omitempty"`

	// Fields Comma-separated list of verse-level fields to include in response. [See full field reference](/docs/api/field-reference#verse-level-fields).
	Fields *string `form:"fields,omitempty" json:"fields,omitempty"`
}

// VersesByRubElHizbNumberParamsWords defines parameters for VersesByRubElHizbNumber.
type VersesByRubElHizbNumberParamsWords string

// RandomVerseParams defines parameters for RandomVerse.
type RandomVerseParams struct {
	// ChapterNumber Return a random verse **only from the specified chapter (sūrah)**.
	ChapterNumber *int `form:"chapter_number,omitempty" json:"chapter_number,omitempty"`

	// PageNumber Return a random verse **only from the specified Muṣḥaf page** (1 – 604).
	PageNumber *int `form:"page_number,omitempty" json:"page_number,omitempty"`

	// JuzNumber Return a random verse **only from the specified juzʾ** (1 – 30).
	JuzNumber *int `form:"juz_number,omitempty" json:"juz_number,omitempty"`

	// HizbNumber Return a random verse **only from the specified ḥizb** (1 – 60).
	HizbNumber *int `form:"hizb_number,omitempty" json:"hizb_number,omitempty"`

	// RubElHizbNumber Return a random verse **only from the specified rubʿ al-ḥizb** (1 – 240).
	RubElHizbNumber *int `form:"rub_el_hizb_number,omitempty" json:"rub_el_hizb_number,omitempty"`

	// RukuNumber Return a random verse **only from the specified rukūʿ**.
	RukuNumber *int `form:"ruku_number,omitempty" json:"ruku_number,omitempty"`

	// ManzilNumber Return a random verse **only from the specified manzil** (1 – 7).
	ManzilNumber *int `form:"manzil_number,omitempty" json:"manzil_number,omitempty"`

	// Language Language to fetch word translation in specific language.
	Language *string `form:"language,omitempty" json:"language,omitempty"`

	// Words Include words of each ayah?
	//
	// 0 or false will not include words.
	//
	// 1 or true will include the words.
	Words *RandomVerseParamsWords `form:"words,omitempty" json:"words,omitempty"`

	// Translations comma separated ids of translations to load for each ayah.
	Translations *string `form:"translations,omitempty" json:"translations,omitempty"`

	// Audio Id of recitation if you want to load audio of each ayah.
	Audio *int `form:"audio,omitempty" json:"audio,omitempty"`

	// Tafsirs Comma separated ids of tafsirs to load for each ayah if you want to load tafsirs.
	Tafsirs *string `form:"tafsirs,omitempty" json:"tafsirs,omitempty"`

	// WordFields Comma-separated list of word-level fields to include in response. [See full field reference](/docs/api/field-reference#word-level-fields).
	WordFields *string `form:"word_fields,omitempty" json:"word_fields,omitempty"`

	// TranslationFields Comma separated list of translation fields if you want to add more fields for each translation.
	TranslationFields *string `form:"translation_fields,omitempty" json:"translation_fields,omitempty"`

	// Fields Comma-separated list of verse-level fields to include in response. [See full field reference](/docs/api/field-reference#verse-level-fields).
	Fields *string `form:"fields,omitempty" json:"fields,omitempty"`
}

// RandomVerseParamsWords defines parameters for RandomVerse.
type RandomVerseParamsWords string

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// ChapterReciterAudioFiles request
	ChapterReciterAudioFiles(ctx context.Context, id float32, params *ChapterReciterAudioFilesParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ChapterReciterAudioFile request
	ChapterReciterAudioFile(ctx context.Context, id float32, chapterNumber float32, reqEditors ...RequestEditorFn) (*http.Response, error)

	// Chapters request
	Chapters(ctx context.Context, params *ChaptersParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ChapterInfo request
	ChapterInfo(ctx context.Context, chapterId int, params *ChapterInfoParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// Chapter request
	Chapter(ctx context.Context, id int, params *ChapterParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// Juzs request
	Juzs(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// RecitationAudioFiles request
	RecitationAudioFiles(ctx context.Context, recitationId float32, params *RecitationAudioFilesParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// Tafsir request
	Tafsir(ctx context.Context, tafsirId float32, params *TafsirParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// Translation request
	Translation(ctx context.Context, translationId float32, params *TranslationParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// QuranVersesCodeV1 request
	QuranVersesCodeV1(ctx context.Context, params *QuranVersesCodeV1Params, reqEditors ...RequestEditorFn) (*http.Response, error)

	// QuranVersesCodeV2 request
	QuranVersesCodeV2(ctx context.Context, params *QuranVersesCodeV2Params, reqEditors ...RequestEditorFn) (*http.Response, error)

	// QuranVersesImlaei request
	QuranVersesImlaei(ctx context.Context, params *QuranVersesImlaeiParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// QuranVersesIndopak request
	QuranVersesIndopak(ctx context.Context, params *QuranVersesIndopakParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// QuranVersesUthmani request
	QuranVersesUthmani(ctx context.Context, params *QuranVersesUthmaniParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// QuranVersesUthmaniSimple request
	QuranVersesUthmaniSimple(ctx context.Context, params *QuranVersesUthmaniSimpleParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// QuranVersesUthmaniTajweed request
	QuranVersesUthmaniTajweed(ctx context.Context, params *QuranVersesUthmaniTajweedParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AyahRecitations request
	AyahRecitations(ctx context.Context, recitationId float32, ayahKey string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ChapterRecitations request
	ChapterRecitations(ctx context.Context, recitationId float32, chapterNumber float32, reqEditors ...RequestEditorFn) (*http.Response, error)

	// HizbRecitations request
	HizbRecitations(ctx context.Context, recitationId float32, hizbNumber float32, reqEditors ...RequestEditorFn) (*http.Response, error)

	// JuzRecitations request
	JuzRecitations(ctx context.Context, recitationId float32, juzNumber float32, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ManzilRecitations request
	ManzilRecitations(ctx context.Context, recitationId float32, manzilNumber float32, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PageRecitations request
	PageRecitations(ctx context.Context, recitationId float32, pageNumber float32, reqEditors ...RequestEditorFn) (*http.Response, error)

	// RubElHizbRecitations request
	RubElHizbRecitations(ctx context.Context, recitationId float32, rubElHizbNumber float32, reqEditors ...RequestEditorFn) (*http.Response, error)

	// RukuRecitations request
	RukuRecitations(ctx context.Context, recitationId float32, rukuNumber float32, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ChapterInfos request
	ChapterInfos(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ChapterReciters request
	ChapterReciters(ctx context.Context, params *ChapterRecitersParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// Languages request
	Languages(ctx context.Context, params *LanguagesParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// RecitationStyles request
	RecitationStyles(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// Recitations request
	Recitations(ctx context.Context, params *RecitationsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// RecitationInfo request
	RecitationInfo(ctx context.Context, recitationId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// Tafsirs request
	Tafsirs(ctx context.Context, params *TafsirsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// TafsirInfo request
	TafsirInfo(ctx context.Context, tafsirId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// Translations request
	Translations(ctx context.Context, params *TranslationsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// TranslationInfo request
	TranslationInfo(ctx context.Context, translationId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// VerseMedia request
	VerseMedia(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// Search request
	Search(ctx context.Context, params *SearchParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AyahTafsirs request
	AyahTafsirs(ctx context.Context, resourceId float32, ayahKey string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ChapterTafsirs request
	ChapterTafsirs(ctx context.Context, resourceId float32, chapterNumber float32, reqEditors ...RequestEditorFn) (*http.Response, error)

	// HizbTafsirs request
	HizbTafsirs(ctx context.Context, resourceId float32, hizbNumber float32, reqEditors ...RequestEditorFn) (*http.Response, error)

	// JuzTafsirs request
	JuzTafsirs(ctx context.Context, resourceId float32, juzNumber float32, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ManzilTafsirs request
	ManzilTafsirs(ctx context.Context, resourceId float32, manzilNumber float32, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PageTafsirs request
	PageTafsirs(ctx context.Context, resourceId float32, pageNumber float32, reqEditors ...RequestEditorFn) (*http.Response, error)

	// RubElHizbTafsirs request
	RubElHizbTafsirs(ctx context.Context, resourceId float32, rubElHizbNumber float32, reqEditors ...RequestEditorFn) (*http.Response, error)

	// RukuTafsirs request
	RukuTafsirs(ctx context.Context, resourceId float32, rukuNumber float32, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AyahTranslations request
	AyahTranslations(ctx context.Context, resourceId float32, ayahKey string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ChapterTranslations request
	ChapterTranslations(ctx context.Context, resourceId float32, chapterNumber float32, reqEditors ...RequestEditorFn) (*http.Response, error)

	// HizbTranslations request
	HizbTranslations(ctx context.Context, resourceId float32, hizbNumber float32, reqEditors ...RequestEditorFn) (*http.Response, error)

	// JuzTranslations request
	JuzTranslations(ctx context.Context, resourceId float32, juzNumber float32, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ManzilTranslations request
	ManzilTranslations(ctx context.Context, resourceId float32, manzilNumber float32, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PageTranslations request
	PageTranslations(ctx context.Context, resourceId float32, pageNumber float32, reqEditors ...RequestEditorFn) (*http.Response, error)

	// RubElHizbTranslations request
	RubElHizbTranslations(ctx context.Context, resourceId float32, rubElHizbNumber float32, reqEditors ...RequestEditorFn) (*http.Response, error)

	// RukuTranslations request
	RukuTranslations(ctx context.Context, resourceId float32, rukuNumber float32, reqEditors ...RequestEditorFn) (*http.Response, error)

	// VersesByChapterNumber request
	VersesByChapterNumber(ctx context.Context, chapterNumber int, params *VersesByChapterNumberParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// VersesByHizbNumber request
	VersesByHizbNumber(ctx context.Context, hizbNumber int, params *VersesByHizbNumberParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// VersesByJuzNumber request
	VersesByJuzNumber(ctx context.Context, juzNumber int, params *VersesByJuzNumberParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// VersesByVerseKey request
	VersesByVerseKey(ctx context.Context, verseKey string, params *VersesByVerseKeyParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// VersesByPageNumber request
	VersesByPageNumber(ctx context.Context, pageNumber int, params *VersesByPageNumberParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// VersesByRubElHizbNumber request
	VersesByRubElHizbNumber(ctx context.Context, rubElHizbNumber int, params *VersesByRubElHizbNumberParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// RandomVerse request
	RandomVerse(ctx context.Context, params *RandomVerseParams, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) ChapterReciterAudioFiles(ctx context.Context, id float32, params *ChapterReciterAudioFilesParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewChapterReciterAudioFilesRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ChapterReciterAudioFile(ctx context.Context, id float32, chapterNumber float32, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewChapterReciterAudioFileRequest(c.Server, id, chapterNumber)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Chapters(ctx context.Context, params *ChaptersParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewChaptersRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ChapterInfo(ctx context.Context, chapterId int, params *ChapterInfoParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewChapterInfoRequest(c.Server, chapterId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Chapter(ctx context.Context, id int, params *ChapterParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewChapterRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Juzs(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewJuzsRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) RecitationAudioFiles(ctx context.Context, recitationId float32, params *RecitationAudioFilesParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewRecitationAudioFilesRequest(c.Server, recitationId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Tafsir(ctx context.Context, tafsirId float32, params *TafsirParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewTafsirRequest(c.Server, tafsirId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Translation(ctx context.Context, translationId float32, params *TranslationParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewTranslationRequest(c.Server, translationId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) QuranVersesCodeV1(ctx context.Context, params *QuranVersesCodeV1Params, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewQuranVersesCodeV1Request(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) QuranVersesCodeV2(ctx context.Context, params *QuranVersesCodeV2Params, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewQuranVersesCodeV2Request(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) QuranVersesImlaei(ctx context.Context, params *QuranVersesImlaeiParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewQuranVersesImlaeiRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) QuranVersesIndopak(ctx context.Context, params *QuranVersesIndopakParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewQuranVersesIndopakRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) QuranVersesUthmani(ctx context.Context, params *QuranVersesUthmaniParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewQuranVersesUthmaniRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) QuranVersesUthmaniSimple(ctx context.Context, params *QuranVersesUthmaniSimpleParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewQuranVersesUthmaniSimpleRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) QuranVersesUthmaniTajweed(ctx context.Context, params *QuranVersesUthmaniTajweedParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewQuranVersesUthmaniTajweedRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AyahRecitations(ctx context.Context, recitationId float32, ayahKey string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAyahRecitationsRequest(c.Server, recitationId, ayahKey)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ChapterRecitations(ctx context.Context, recitationId float32, chapterNumber float32, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewChapterRecitationsRequest(c.Server, recitationId, chapterNumber)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) HizbRecitations(ctx context.Context, recitationId float32, hizbNumber float32, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewHizbRecitationsRequest(c.Server, recitationId, hizbNumber)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) JuzRecitations(ctx context.Context, recitationId float32, juzNumber float32, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewJuzRecitationsRequest(c.Server, recitationId, juzNumber)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ManzilRecitations(ctx context.Context, recitationId float32, manzilNumber float32, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewManzilRecitationsRequest(c.Server, recitationId, manzilNumber)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PageRecitations(ctx context.Context, recitationId float32, pageNumber float32, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPageRecitationsRequest(c.Server, recitationId, pageNumber)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) RubElHizbRecitations(ctx context.Context, recitationId float32, rubElHizbNumber float32, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewRubElHizbRecitationsRequest(c.Server, recitationId, rubElHizbNumber)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) RukuRecitations(ctx context.Context, recitationId float32, rukuNumber float32, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewRukuRecitationsRequest(c.Server, recitationId, rukuNumber)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ChapterInfos(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewChapterInfosRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ChapterReciters(ctx context.Context, params *ChapterRecitersParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewChapterRecitersRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Languages(ctx context.Context, params *LanguagesParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewLanguagesRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) RecitationStyles(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewRecitationStylesRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Recitations(ctx context.Context, params *RecitationsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewRecitationsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) RecitationInfo(ctx context.Context, recitationId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewRecitationInfoRequest(c.Server, recitationId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Tafsirs(ctx context.Context, params *TafsirsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewTafsirsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) TafsirInfo(ctx context.Context, tafsirId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewTafsirInfoRequest(c.Server, tafsirId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Translations(ctx context.Context, params *TranslationsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewTranslationsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) TranslationInfo(ctx context.Context, translationId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewTranslationInfoRequest(c.Server, translationId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) VerseMedia(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewVerseMediaRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Search(ctx context.Context, params *SearchParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSearchRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AyahTafsirs(ctx context.Context, resourceId float32, ayahKey string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAyahTafsirsRequest(c.Server, resourceId, ayahKey)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ChapterTafsirs(ctx context.Context, resourceId float32, chapterNumber float32, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewChapterTafsirsRequest(c.Server, resourceId, chapterNumber)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) HizbTafsirs(ctx context.Context, resourceId float32, hizbNumber float32, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewHizbTafsirsRequest(c.Server, resourceId, hizbNumber)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) JuzTafsirs(ctx context.Context, resourceId float32, juzNumber float32, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewJuzTafsirsRequest(c.Server, resourceId, juzNumber)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ManzilTafsirs(ctx context.Context, resourceId float32, manzilNumber float32, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewManzilTafsirsRequest(c.Server, resourceId, manzilNumber)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PageTafsirs(ctx context.Context, resourceId float32, pageNumber float32, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPageTafsirsRequest(c.Server, resourceId, pageNumber)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) RubElHizbTafsirs(ctx context.Context, resourceId float32, rubElHizbNumber float32, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewRubElHizbTafsirsRequest(c.Server, resourceId, rubElHizbNumber)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) RukuTafsirs(ctx context.Context, resourceId float32, rukuNumber float32, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewRukuTafsirsRequest(c.Server, resourceId, rukuNumber)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AyahTranslations(ctx context.Context, resourceId float32, ayahKey string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAyahTranslationsRequest(c.Server, resourceId, ayahKey)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ChapterTranslations(ctx context.Context, resourceId float32, chapterNumber float32, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewChapterTranslationsRequest(c.Server, resourceId, chapterNumber)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) HizbTranslations(ctx context.Context, resourceId float32, hizbNumber float32, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewHizbTranslationsRequest(c.Server, resourceId, hizbNumber)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) JuzTranslations(ctx context.Context, resourceId float32, juzNumber float32, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewJuzTranslationsRequest(c.Server, resourceId, juzNumber)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ManzilTranslations(ctx context.Context, resourceId float32, manzilNumber float32, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewManzilTranslationsRequest(c.Server, resourceId, manzilNumber)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PageTranslations(ctx context.Context, resourceId float32, pageNumber float32, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPageTranslationsRequest(c.Server, resourceId, pageNumber)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) RubElHizbTranslations(ctx context.Context, resourceId float32, rubElHizbNumber float32, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewRubElHizbTranslationsRequest(c.Server, resourceId, rubElHizbNumber)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) RukuTranslations(ctx context.Context, resourceId float32, rukuNumber float32, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewRukuTranslationsRequest(c.Server, resourceId, rukuNumber)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) VersesByChapterNumber(ctx context.Context, chapterNumber int, params *VersesByChapterNumberParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewVersesByChapterNumberRequest(c.Server, chapterNumber, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) VersesByHizbNumber(ctx context.Context, hizbNumber int, params *VersesByHizbNumberParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewVersesByHizbNumberRequest(c.Server, hizbNumber, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) VersesByJuzNumber(ctx context.Context, juzNumber int, params *VersesByJuzNumberParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewVersesByJuzNumberRequest(c.Server, juzNumber, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) VersesByVerseKey(ctx context.Context, verseKey string, params *VersesByVerseKeyParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewVersesByVerseKeyRequest(c.Server, verseKey, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) VersesByPageNumber(ctx context.Context, pageNumber int, params *VersesByPageNumberParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewVersesByPageNumberRequest(c.Server, pageNumber, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) VersesByRubElHizbNumber(ctx context.Context, rubElHizbNumber int, params *VersesByRubElHizbNumberParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewVersesByRubElHizbNumberRequest(c.Server, rubElHizbNumber, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) RandomVerse(ctx context.Context, params *RandomVerseParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewRandomVerseRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewChapterReciterAudioFilesRequest generates requests for ChapterReciterAudioFiles
func NewChapterReciterAudioFilesRequest(server string, id float32, params *ChapterReciterAudioFilesParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/chapter_recitations/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Language != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "language", runtime.ParamLocationQuery, *params.Language); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewChapterReciterAudioFileRequest generates requests for ChapterReciterAudioFile
func NewChapterReciterAudioFileRequest(server string, id float32, chapterNumber float32) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "chapter_number", runtime.ParamLocationPath, chapterNumber)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/chapter_recitations/%s/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewChaptersRequest generates requests for Chapters
func NewChaptersRequest(server string, params *ChaptersParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/chapters")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Language != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "language", runtime.ParamLocationQuery, *params.Language); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewChapterInfoRequest generates requests for ChapterInfo
func NewChapterInfoRequest(server string, chapterId int, params *ChapterInfoParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "chapter_id", runtime.ParamLocationPath, chapterId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/chapters/%s/info", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Language != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "language", runtime.ParamLocationQuery, *params.Language); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewChapterRequest generates requests for Chapter
func NewChapterRequest(server string, id int, params *ChapterParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/chapters/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Language != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "language", runtime.ParamLocationQuery, *params.Language); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewJuzsRequest generates requests for Juzs
func NewJuzsRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/juzs")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewRecitationAudioFilesRequest generates requests for RecitationAudioFiles
func NewRecitationAudioFilesRequest(server string, recitationId float32, params *RecitationAudioFilesParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "recitation_id", runtime.ParamLocationPath, recitationId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/quran/recitations/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Fields != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "fields", runtime.ParamLocationQuery, *params.Fields); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ChapterNumber != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "chapter_number", runtime.ParamLocationQuery, *params.ChapterNumber); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.JuzNumber != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "juz_number", runtime.ParamLocationQuery, *params.JuzNumber); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PageNumber != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page_number", runtime.ParamLocationQuery, *params.PageNumber); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.HizbNumber != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "hizb_number", runtime.ParamLocationQuery, *params.HizbNumber); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.RubElHizbNumber != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "rub_el_hizb_number", runtime.ParamLocationQuery, *params.RubElHizbNumber); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.VerseKey != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "verse_key", runtime.ParamLocationQuery, *params.VerseKey); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewTafsirRequest generates requests for Tafsir
func NewTafsirRequest(server string, tafsirId float32, params *TafsirParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "tafsir_id", runtime.ParamLocationPath, tafsirId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/quran/tafsirs/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Fields != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "fields", runtime.ParamLocationQuery, *params.Fields); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ChapterNumber != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "chapter_number", runtime.ParamLocationQuery, *params.ChapterNumber); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.JuzNumber != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "juz_number", runtime.ParamLocationQuery, *params.JuzNumber); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PageNumber != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page_number", runtime.ParamLocationQuery, *params.PageNumber); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.HizbNumber != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "hizb_number", runtime.ParamLocationQuery, *params.HizbNumber); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.RubElHizbNumber != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "rub_el_hizb_number", runtime.ParamLocationQuery, *params.RubElHizbNumber); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.VerseKey != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "verse_key", runtime.ParamLocationQuery, *params.VerseKey); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewTranslationRequest generates requests for Translation
func NewTranslationRequest(server string, translationId float32, params *TranslationParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "translation_id", runtime.ParamLocationPath, translationId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/quran/translations/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Fields != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "fields", runtime.ParamLocationQuery, *params.Fields); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ChapterNumber != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "chapter_number", runtime.ParamLocationQuery, *params.ChapterNumber); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.JuzNumber != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "juz_number", runtime.ParamLocationQuery, *params.JuzNumber); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PageNumber != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page_number", runtime.ParamLocationQuery, *params.PageNumber); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.HizbNumber != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "hizb_number", runtime.ParamLocationQuery, *params.HizbNumber); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.RubElHizbNumber != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "rub_el_hizb_number", runtime.ParamLocationQuery, *params.RubElHizbNumber); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.VerseKey != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "verse_key", runtime.ParamLocationQuery, *params.VerseKey); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewQuranVersesCodeV1Request generates requests for QuranVersesCodeV1
func NewQuranVersesCodeV1Request(server string, params *QuranVersesCodeV1Params) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/quran/verses/code_v1")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.ChapterNumber != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "chapter_number", runtime.ParamLocationQuery, *params.ChapterNumber); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.JuzNumber != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "juz_number", runtime.ParamLocationQuery, *params.JuzNumber); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PageNumber != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page_number", runtime.ParamLocationQuery, *params.PageNumber); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.HizbNumber != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "hizb_number", runtime.ParamLocationQuery, *params.HizbNumber); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.RubElHizbNumber != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "rub_el_hizb_number", runtime.ParamLocationQuery, *params.RubElHizbNumber); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.VerseKey != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "verse_key", runtime.ParamLocationQuery, *params.VerseKey); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewQuranVersesCodeV2Request generates requests for QuranVersesCodeV2
func NewQuranVersesCodeV2Request(server string, params *QuranVersesCodeV2Params) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/quran/verses/code_v2")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.ChapterNumber != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "chapter_number", runtime.ParamLocationQuery, *params.ChapterNumber); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.JuzNumber != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "juz_number", runtime.ParamLocationQuery, *params.JuzNumber); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PageNumber != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page_number", runtime.ParamLocationQuery, *params.PageNumber); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.HizbNumber != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "hizb_number", runtime.ParamLocationQuery, *params.HizbNumber); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.RubElHizbNumber != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "rub_el_hizb_number", runtime.ParamLocationQuery, *params.RubElHizbNumber); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.VerseKey != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "verse_key", runtime.ParamLocationQuery, *params.VerseKey); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewQuranVersesImlaeiRequest generates requests for QuranVersesImlaei
func NewQuranVersesImlaeiRequest(server string, params *QuranVersesImlaeiParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/quran/verses/imlaei")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.ChapterNumber != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "chapter_number", runtime.ParamLocationQuery, *params.ChapterNumber); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.JuzNumber != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "juz_number", runtime.ParamLocationQuery, *params.JuzNumber); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PageNumber != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page_number", runtime.ParamLocationQuery, *params.PageNumber); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.HizbNumber != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "hizb_number", runtime.ParamLocationQuery, *params.HizbNumber); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.RubElHizbNumber != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "rub_el_hizb_number", runtime.ParamLocationQuery, *params.RubElHizbNumber); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.VerseKey != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "verse_key", runtime.ParamLocationQuery, *params.VerseKey); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewQuranVersesIndopakRequest generates requests for QuranVersesIndopak
func NewQuranVersesIndopakRequest(server string, params *QuranVersesIndopakParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/quran/verses/indopak")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.ChapterNumber != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "chapter_number", runtime.ParamLocationQuery, *params.ChapterNumber); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.JuzNumber != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "juz_number", runtime.ParamLocationQuery, *params.JuzNumber); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PageNumber != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page_number", runtime.ParamLocationQuery, *params.PageNumber); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.HizbNumber != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "hizb_number", runtime.ParamLocationQuery, *params.HizbNumber); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.RubElHizbNumber != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "rub_el_hizb_number", runtime.ParamLocationQuery, *params.RubElHizbNumber); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.VerseKey != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "verse_key", runtime.ParamLocationQuery, *params.VerseKey); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewQuranVersesUthmaniRequest generates requests for QuranVersesUthmani
func NewQuranVersesUthmaniRequest(server string, params *QuranVersesUthmaniParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/quran/verses/uthmani")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.ChapterNumber != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "chapter_number", runtime.ParamLocationQuery, *params.ChapterNumber); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.JuzNumber != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "juz_number", runtime.ParamLocationQuery, *params.JuzNumber); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PageNumber != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page_number", runtime.ParamLocationQuery, *params.PageNumber); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.HizbNumber != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "hizb_number", runtime.ParamLocationQuery, *params.HizbNumber); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.RubElHizbNumber != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "rub_el_hizb_number", runtime.ParamLocationQuery, *params.RubElHizbNumber); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.VerseKey != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "verse_key", runtime.ParamLocationQuery, *params.VerseKey); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewQuranVersesUthmaniSimpleRequest generates requests for QuranVersesUthmaniSimple
func NewQuranVersesUthmaniSimpleRequest(server string, params *QuranVersesUthmaniSimpleParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/quran/verses/uthmani_simple")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.ChapterNumber != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "chapter_number", runtime.ParamLocationQuery, *params.ChapterNumber); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.JuzNumber != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "juz_number", runtime.ParamLocationQuery, *params.JuzNumber); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PageNumber != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page_number", runtime.ParamLocationQuery, *params.PageNumber); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.HizbNumber != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "hizb_number", runtime.ParamLocationQuery, *params.HizbNumber); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.RubElHizbNumber != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "rub_el_hizb_number", runtime.ParamLocationQuery, *params.RubElHizbNumber); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.VerseKey != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "verse_key", runtime.ParamLocationQuery, *params.VerseKey); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewQuranVersesUthmaniTajweedRequest generates requests for QuranVersesUthmaniTajweed
func NewQuranVersesUthmaniTajweedRequest(server string, params *QuranVersesUthmaniTajweedParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/quran/verses/uthmani_tajweed")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.ChapterNumber != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "chapter_number", runtime.ParamLocationQuery, *params.ChapterNumber); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.JuzNumber != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "juz_number", runtime.ParamLocationQuery, *params.JuzNumber); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PageNumber != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page_number", runtime.ParamLocationQuery, *params.PageNumber); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.HizbNumber != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "hizb_number", runtime.ParamLocationQuery, *params.HizbNumber); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.RubElHizbNumber != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "rub_el_hizb_number", runtime.ParamLocationQuery, *params.RubElHizbNumber); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.VerseKey != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "verse_key", runtime.ParamLocationQuery, *params.VerseKey); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAyahRecitationsRequest generates requests for AyahRecitations
func NewAyahRecitationsRequest(server string, recitationId float32, ayahKey string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "recitation_id", runtime.ParamLocationPath, recitationId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "ayah_key", runtime.ParamLocationPath, ayahKey)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/recitations/%s/by_ayah/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewChapterRecitationsRequest generates requests for ChapterRecitations
func NewChapterRecitationsRequest(server string, recitationId float32, chapterNumber float32) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "recitation_id", runtime.ParamLocationPath, recitationId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "chapter_number", runtime.ParamLocationPath, chapterNumber)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/recitations/%s/by_chapter/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewHizbRecitationsRequest generates requests for HizbRecitations
func NewHizbRecitationsRequest(server string, recitationId float32, hizbNumber float32) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "recitation_id", runtime.ParamLocationPath, recitationId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "hizb_number", runtime.ParamLocationPath, hizbNumber)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/recitations/%s/by_hizb/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewJuzRecitationsRequest generates requests for JuzRecitations
func NewJuzRecitationsRequest(server string, recitationId float32, juzNumber float32) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "recitation_id", runtime.ParamLocationPath, recitationId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "juz_number", runtime.ParamLocationPath, juzNumber)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/recitations/%s/by_juz/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewManzilRecitationsRequest generates requests for ManzilRecitations
func NewManzilRecitationsRequest(server string, recitationId float32, manzilNumber float32) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "recitation_id", runtime.ParamLocationPath, recitationId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "manzil_number", runtime.ParamLocationPath, manzilNumber)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/recitations/%s/by_manzil/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPageRecitationsRequest generates requests for PageRecitations
func NewPageRecitationsRequest(server string, recitationId float32, pageNumber float32) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "recitation_id", runtime.ParamLocationPath, recitationId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "page_number", runtime.ParamLocationPath, pageNumber)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/recitations/%s/by_page/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewRubElHizbRecitationsRequest generates requests for RubElHizbRecitations
func NewRubElHizbRecitationsRequest(server string, recitationId float32, rubElHizbNumber float32) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "recitation_id", runtime.ParamLocationPath, recitationId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "rub_el_hizb_number", runtime.ParamLocationPath, rubElHizbNumber)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/recitations/%s/by_rub/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewRukuRecitationsRequest generates requests for RukuRecitations
func NewRukuRecitationsRequest(server string, recitationId float32, rukuNumber float32) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "recitation_id", runtime.ParamLocationPath, recitationId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "ruku_number", runtime.ParamLocationPath, rukuNumber)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/recitations/%s/by_ruku/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewChapterInfosRequest generates requests for ChapterInfos
func NewChapterInfosRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/resources/chapter_infos")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewChapterRecitersRequest generates requests for ChapterReciters
func NewChapterRecitersRequest(server string, params *ChapterRecitersParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/resources/chapter_reciters")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Language != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "language", runtime.ParamLocationQuery, *params.Language); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewLanguagesRequest generates requests for Languages
func NewLanguagesRequest(server string, params *LanguagesParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/resources/languages")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Language != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "language", runtime.ParamLocationQuery, *params.Language); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewRecitationStylesRequest generates requests for RecitationStyles
func NewRecitationStylesRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/resources/recitation_styles")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewRecitationsRequest generates requests for Recitations
func NewRecitationsRequest(server string, params *RecitationsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/resources/recitations")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Language != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "language", runtime.ParamLocationQuery, *params.Language); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewRecitationInfoRequest generates requests for RecitationInfo
func NewRecitationInfoRequest(server string, recitationId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "recitation_id", runtime.ParamLocationPath, recitationId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/resources/recitations/%s/info", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewTafsirsRequest generates requests for Tafsirs
func NewTafsirsRequest(server string, params *TafsirsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/resources/tafsirs")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Language != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "language", runtime.ParamLocationQuery, *params.Language); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewTafsirInfoRequest generates requests for TafsirInfo
func NewTafsirInfoRequest(server string, tafsirId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "tafsir_id", runtime.ParamLocationPath, tafsirId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/resources/tafsirs/%s/info", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewTranslationsRequest generates requests for Translations
func NewTranslationsRequest(server string, params *TranslationsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/resources/translations")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Language != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "language", runtime.ParamLocationQuery, *params.Language); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewTranslationInfoRequest generates requests for TranslationInfo
func NewTranslationInfoRequest(server string, translationId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "translation_id", runtime.ParamLocationPath, translationId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/resources/translations/%s/info", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewVerseMediaRequest generates requests for VerseMedia
func NewVerseMediaRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/resources/verse_media")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewSearchRequest generates requests for Search
func NewSearchRequest(server string, params *SearchParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/search")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Q != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "q", runtime.ParamLocationQuery, *params.Q); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Size != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "size", runtime.ParamLocationQuery, *params.Size); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Language != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "language", runtime.ParamLocationQuery, *params.Language); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAyahTafsirsRequest generates requests for AyahTafsirs
func NewAyahTafsirsRequest(server string, resourceId float32, ayahKey string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "resource_id", runtime.ParamLocationPath, resourceId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "ayah_key", runtime.ParamLocationPath, ayahKey)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/tafsirs/%s/by_ayah/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewChapterTafsirsRequest generates requests for ChapterTafsirs
func NewChapterTafsirsRequest(server string, resourceId float32, chapterNumber float32) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "resource_id", runtime.ParamLocationPath, resourceId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "chapter_number", runtime.ParamLocationPath, chapterNumber)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/tafsirs/%s/by_chapter/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewHizbTafsirsRequest generates requests for HizbTafsirs
func NewHizbTafsirsRequest(server string, resourceId float32, hizbNumber float32) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "resource_id", runtime.ParamLocationPath, resourceId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "hizb_number", runtime.ParamLocationPath, hizbNumber)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/tafsirs/%s/by_hizb/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewJuzTafsirsRequest generates requests for JuzTafsirs
func NewJuzTafsirsRequest(server string, resourceId float32, juzNumber float32) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "resource_id", runtime.ParamLocationPath, resourceId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "juz_number", runtime.ParamLocationPath, juzNumber)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/tafsirs/%s/by_juz/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewManzilTafsirsRequest generates requests for ManzilTafsirs
func NewManzilTafsirsRequest(server string, resourceId float32, manzilNumber float32) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "resource_id", runtime.ParamLocationPath, resourceId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "manzil_number", runtime.ParamLocationPath, manzilNumber)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/tafsirs/%s/by_manzil/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPageTafsirsRequest generates requests for PageTafsirs
func NewPageTafsirsRequest(server string, resourceId float32, pageNumber float32) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "resource_id", runtime.ParamLocationPath, resourceId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "page_number", runtime.ParamLocationPath, pageNumber)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/tafsirs/%s/by_page/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewRubElHizbTafsirsRequest generates requests for RubElHizbTafsirs
func NewRubElHizbTafsirsRequest(server string, resourceId float32, rubElHizbNumber float32) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "resource_id", runtime.ParamLocationPath, resourceId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "rub_el_hizb_number", runtime.ParamLocationPath, rubElHizbNumber)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/tafsirs/%s/by_rub_el_hizb/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewRukuTafsirsRequest generates requests for RukuTafsirs
func NewRukuTafsirsRequest(server string, resourceId float32, rukuNumber float32) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "resource_id", runtime.ParamLocationPath, resourceId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "ruku_number", runtime.ParamLocationPath, rukuNumber)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/tafsirs/%s/by_ruku/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAyahTranslationsRequest generates requests for AyahTranslations
func NewAyahTranslationsRequest(server string, resourceId float32, ayahKey string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "resource_id", runtime.ParamLocationPath, resourceId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "ayah_key", runtime.ParamLocationPath, ayahKey)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/translations/%s/by_ayah/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewChapterTranslationsRequest generates requests for ChapterTranslations
func NewChapterTranslationsRequest(server string, resourceId float32, chapterNumber float32) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "resource_id", runtime.ParamLocationPath, resourceId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "chapter_number", runtime.ParamLocationPath, chapterNumber)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/translations/%s/by_chapter/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewHizbTranslationsRequest generates requests for HizbTranslations
func NewHizbTranslationsRequest(server string, resourceId float32, hizbNumber float32) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "resource_id", runtime.ParamLocationPath, resourceId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "hizb_number", runtime.ParamLocationPath, hizbNumber)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/translations/%s/by_hizb/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewJuzTranslationsRequest generates requests for JuzTranslations
func NewJuzTranslationsRequest(server string, resourceId float32, juzNumber float32) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "resource_id", runtime.ParamLocationPath, resourceId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "juz_number", runtime.ParamLocationPath, juzNumber)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/translations/%s/by_juz/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewManzilTranslationsRequest generates requests for ManzilTranslations
func NewManzilTranslationsRequest(server string, resourceId float32, manzilNumber float32) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "resource_id", runtime.ParamLocationPath, resourceId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "manzil_number", runtime.ParamLocationPath, manzilNumber)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/translations/%s/by_manzil/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPageTranslationsRequest generates requests for PageTranslations
func NewPageTranslationsRequest(server string, resourceId float32, pageNumber float32) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "resource_id", runtime.ParamLocationPath, resourceId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "page_number", runtime.ParamLocationPath, pageNumber)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/translations/%s/by_page/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewRubElHizbTranslationsRequest generates requests for RubElHizbTranslations
func NewRubElHizbTranslationsRequest(server string, resourceId float32, rubElHizbNumber float32) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "resource_id", runtime.ParamLocationPath, resourceId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "rub_el_hizb_number", runtime.ParamLocationPath, rubElHizbNumber)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/translations/%s/by_rub_el_hizb/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewRukuTranslationsRequest generates requests for RukuTranslations
func NewRukuTranslationsRequest(server string, resourceId float32, rukuNumber float32) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "resource_id", runtime.ParamLocationPath, resourceId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "ruku_number", runtime.ParamLocationPath, rukuNumber)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/translations/%s/by_ruku/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewVersesByChapterNumberRequest generates requests for VersesByChapterNumber
func NewVersesByChapterNumberRequest(server string, chapterNumber int, params *VersesByChapterNumberParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "chapter_number", runtime.ParamLocationPath, chapterNumber)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/verses/by_chapter/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Language != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "language", runtime.ParamLocationQuery, *params.Language); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Words != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "words", runtime.ParamLocationQuery, *params.Words); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Translations != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "translations", runtime.ParamLocationQuery, *params.Translations); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Audio != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "audio", runtime.ParamLocationQuery, *params.Audio); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Tafsirs != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "tafsirs", runtime.ParamLocationQuery, *params.Tafsirs); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.WordFields != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "word_fields", runtime.ParamLocationQuery, *params.WordFields); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.TranslationFields != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "translation_fields", runtime.ParamLocationQuery, *params.TranslationFields); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Fields != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "fields", runtime.ParamLocationQuery, *params.Fields); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PerPage != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "per_page", runtime.ParamLocationQuery, *params.PerPage); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewVersesByHizbNumberRequest generates requests for VersesByHizbNumber
func NewVersesByHizbNumberRequest(server string, hizbNumber int, params *VersesByHizbNumberParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "hizb_number", runtime.ParamLocationPath, hizbNumber)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/verses/by_hizb/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Language != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "language", runtime.ParamLocationQuery, *params.Language); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Words != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "words", runtime.ParamLocationQuery, *params.Words); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Translations != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "translations", runtime.ParamLocationQuery, *params.Translations); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Audio != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "audio", runtime.ParamLocationQuery, *params.Audio); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Tafsirs != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "tafsirs", runtime.ParamLocationQuery, *params.Tafsirs); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.WordFields != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "word_fields", runtime.ParamLocationQuery, *params.WordFields); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.TranslationFields != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "translation_fields", runtime.ParamLocationQuery, *params.TranslationFields); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Fields != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "fields", runtime.ParamLocationQuery, *params.Fields); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PerPage != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "per_page", runtime.ParamLocationQuery, *params.PerPage); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewVersesByJuzNumberRequest generates requests for VersesByJuzNumber
func NewVersesByJuzNumberRequest(server string, juzNumber int, params *VersesByJuzNumberParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "juz_number", runtime.ParamLocationPath, juzNumber)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/verses/by_juz/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Language != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "language", runtime.ParamLocationQuery, *params.Language); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Words != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "words", runtime.ParamLocationQuery, *params.Words); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Translations != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "translations", runtime.ParamLocationQuery, *params.Translations); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Audio != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "audio", runtime.ParamLocationQuery, *params.Audio); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Tafsirs != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "tafsirs", runtime.ParamLocationQuery, *params.Tafsirs); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.WordFields != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "word_fields", runtime.ParamLocationQuery, *params.WordFields); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.TranslationFields != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "translation_fields", runtime.ParamLocationQuery, *params.TranslationFields); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Fields != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "fields", runtime.ParamLocationQuery, *params.Fields); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PerPage != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "per_page", runtime.ParamLocationQuery, *params.PerPage); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewVersesByVerseKeyRequest generates requests for VersesByVerseKey
func NewVersesByVerseKeyRequest(server string, verseKey string, params *VersesByVerseKeyParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "verse_key", runtime.ParamLocationPath, verseKey)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/verses/by_key/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Language != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "language", runtime.ParamLocationQuery, *params.Language); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Words != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "words", runtime.ParamLocationQuery, *params.Words); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Translations != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "translations", runtime.ParamLocationQuery, *params.Translations); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Audio != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "audio", runtime.ParamLocationQuery, *params.Audio); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Tafsirs != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "tafsirs", runtime.ParamLocationQuery, *params.Tafsirs); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.WordFields != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "word_fields", runtime.ParamLocationQuery, *params.WordFields); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.TranslationFields != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "translation_fields", runtime.ParamLocationQuery, *params.TranslationFields); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Fields != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "fields", runtime.ParamLocationQuery, *params.Fields); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewVersesByPageNumberRequest generates requests for VersesByPageNumber
func NewVersesByPageNumberRequest(server string, pageNumber int, params *VersesByPageNumberParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "page_number", runtime.ParamLocationPath, pageNumber)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/verses/by_page/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Language != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "language", runtime.ParamLocationQuery, *params.Language); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Words != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "words", runtime.ParamLocationQuery, *params.Words); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Translations != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "translations", runtime.ParamLocationQuery, *params.Translations); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Audio != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "audio", runtime.ParamLocationQuery, *params.Audio); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Tafsirs != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "tafsirs", runtime.ParamLocationQuery, *params.Tafsirs); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.WordFields != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "word_fields", runtime.ParamLocationQuery, *params.WordFields); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.TranslationFields != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "translation_fields", runtime.ParamLocationQuery, *params.TranslationFields); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Fields != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "fields", runtime.ParamLocationQuery, *params.Fields); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PerPage != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "per_page", runtime.ParamLocationQuery, *params.PerPage); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewVersesByRubElHizbNumberRequest generates requests for VersesByRubElHizbNumber
func NewVersesByRubElHizbNumberRequest(server string, rubElHizbNumber int, params *VersesByRubElHizbNumberParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "rub_el_hizb_number", runtime.ParamLocationPath, rubElHizbNumber)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/verses/by_rub/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Language != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "language", runtime.ParamLocationQuery, *params.Language); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Words != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "words", runtime.ParamLocationQuery, *params.Words); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Translations != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "translations", runtime.ParamLocationQuery, *params.Translations); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Audio != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "audio", runtime.ParamLocationQuery, *params.Audio); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Tafsirs != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "tafsirs", runtime.ParamLocationQuery, *params.Tafsirs); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.WordFields != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "word_fields", runtime.ParamLocationQuery, *params.WordFields); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.TranslationFields != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "translation_fields", runtime.ParamLocationQuery, *params.TranslationFields); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Fields != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "fields", runtime.ParamLocationQuery, *params.Fields); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewRandomVerseRequest generates requests for RandomVerse
func NewRandomVerseRequest(server string, params *RandomVerseParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/verses/random")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.ChapterNumber != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "chapter_number", runtime.ParamLocationQuery, *params.ChapterNumber); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PageNumber != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page_number", runtime.ParamLocationQuery, *params.PageNumber); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.JuzNumber != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "juz_number", runtime.ParamLocationQuery, *params.JuzNumber); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.HizbNumber != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "hizb_number", runtime.ParamLocationQuery, *params.HizbNumber); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.RubElHizbNumber != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "rub_el_hizb_number", runtime.ParamLocationQuery, *params.RubElHizbNumber); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.RukuNumber != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "ruku_number", runtime.ParamLocationQuery, *params.RukuNumber); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ManzilNumber != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "manzil_number", runtime.ParamLocationQuery, *params.ManzilNumber); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Language != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "language", runtime.ParamLocationQuery, *params.Language); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Words != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "words", runtime.ParamLocationQuery, *params.Words); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Translations != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "translations", runtime.ParamLocationQuery, *params.Translations); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Audio != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "audio", runtime.ParamLocationQuery, *params.Audio); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Tafsirs != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "tafsirs", runtime.ParamLocationQuery, *params.Tafsirs); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.WordFields != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "word_fields", runtime.ParamLocationQuery, *params.WordFields); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.TranslationFields != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "translation_fields", runtime.ParamLocationQuery, *params.TranslationFields); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Fields != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "fields", runtime.ParamLocationQuery, *params.Fields); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// ChapterReciterAudioFilesWithResponse request
	ChapterReciterAudioFilesWithResponse(ctx context.Context, id float32, params *ChapterReciterAudioFilesParams, reqEditors ...RequestEditorFn) (*ChapterReciterAudioFilesResponse, error)

	// ChapterReciterAudioFileWithResponse request
	ChapterReciterAudioFileWithResponse(ctx context.Context, id float32, chapterNumber float32, reqEditors ...RequestEditorFn) (*ChapterReciterAudioFileResponse, error)

	// ChaptersWithResponse request
	ChaptersWithResponse(ctx context.Context, params *ChaptersParams, reqEditors ...RequestEditorFn) (*ChaptersResponse, error)

	// ChapterInfoWithResponse request
	ChapterInfoWithResponse(ctx context.Context, chapterId int, params *ChapterInfoParams, reqEditors ...RequestEditorFn) (*ChapterInfoResponse, error)

	// ChapterWithResponse request
	ChapterWithResponse(ctx context.Context, id int, params *ChapterParams, reqEditors ...RequestEditorFn) (*ChapterResponse, error)

	// JuzsWithResponse request
	JuzsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*JuzsResponse, error)

	// RecitationAudioFilesWithResponse request
	RecitationAudioFilesWithResponse(ctx context.Context, recitationId float32, params *RecitationAudioFilesParams, reqEditors ...RequestEditorFn) (*RecitationAudioFilesResponse, error)

	// TafsirWithResponse request
	TafsirWithResponse(ctx context.Context, tafsirId float32, params *TafsirParams, reqEditors ...RequestEditorFn) (*TafsirResponse, error)

	// TranslationWithResponse request
	TranslationWithResponse(ctx context.Context, translationId float32, params *TranslationParams, reqEditors ...RequestEditorFn) (*TranslationResponse, error)

	// QuranVersesCodeV1WithResponse request
	QuranVersesCodeV1WithResponse(ctx context.Context, params *QuranVersesCodeV1Params, reqEditors ...RequestEditorFn) (*QuranVersesCodeV1Response, error)

	// QuranVersesCodeV2WithResponse request
	QuranVersesCodeV2WithResponse(ctx context.Context, params *QuranVersesCodeV2Params, reqEditors ...RequestEditorFn) (*QuranVersesCodeV2Response, error)

	// QuranVersesImlaeiWithResponse request
	QuranVersesImlaeiWithResponse(ctx context.Context, params *QuranVersesImlaeiParams, reqEditors ...RequestEditorFn) (*QuranVersesImlaeiResponse, error)

	// QuranVersesIndopakWithResponse request
	QuranVersesIndopakWithResponse(ctx context.Context, params *QuranVersesIndopakParams, reqEditors ...RequestEditorFn) (*QuranVersesIndopakResponse, error)

	// QuranVersesUthmaniWithResponse request
	QuranVersesUthmaniWithResponse(ctx context.Context, params *QuranVersesUthmaniParams, reqEditors ...RequestEditorFn) (*QuranVersesUthmaniResponse, error)

	// QuranVersesUthmaniSimpleWithResponse request
	QuranVersesUthmaniSimpleWithResponse(ctx context.Context, params *QuranVersesUthmaniSimpleParams, reqEditors ...RequestEditorFn) (*QuranVersesUthmaniSimpleResponse, error)

	// QuranVersesUthmaniTajweedWithResponse request
	QuranVersesUthmaniTajweedWithResponse(ctx context.Context, params *QuranVersesUthmaniTajweedParams, reqEditors ...RequestEditorFn) (*QuranVersesUthmaniTajweedResponse, error)

	// AyahRecitationsWithResponse request
	AyahRecitationsWithResponse(ctx context.Context, recitationId float32, ayahKey string, reqEditors ...RequestEditorFn) (*AyahRecitationsResponse, error)

	// ChapterRecitationsWithResponse request
	ChapterRecitationsWithResponse(ctx context.Context, recitationId float32, chapterNumber float32, reqEditors ...RequestEditorFn) (*ChapterRecitationsResponse, error)

	// HizbRecitationsWithResponse request
	HizbRecitationsWithResponse(ctx context.Context, recitationId float32, hizbNumber float32, reqEditors ...RequestEditorFn) (*HizbRecitationsResponse, error)

	// JuzRecitationsWithResponse request
	JuzRecitationsWithResponse(ctx context.Context, recitationId float32, juzNumber float32, reqEditors ...RequestEditorFn) (*JuzRecitationsResponse, error)

	// ManzilRecitationsWithResponse request
	ManzilRecitationsWithResponse(ctx context.Context, recitationId float32, manzilNumber float32, reqEditors ...RequestEditorFn) (*ManzilRecitationsResponse, error)

	// PageRecitationsWithResponse request
	PageRecitationsWithResponse(ctx context.Context, recitationId float32, pageNumber float32, reqEditors ...RequestEditorFn) (*PageRecitationsResponse, error)

	// RubElHizbRecitationsWithResponse request
	RubElHizbRecitationsWithResponse(ctx context.Context, recitationId float32, rubElHizbNumber float32, reqEditors ...RequestEditorFn) (*RubElHizbRecitationsResponse, error)

	// RukuRecitationsWithResponse request
	RukuRecitationsWithResponse(ctx context.Context, recitationId float32, rukuNumber float32, reqEditors ...RequestEditorFn) (*RukuRecitationsResponse, error)

	// ChapterInfosWithResponse request
	ChapterInfosWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*ChapterInfosResponse, error)

	// ChapterRecitersWithResponse request
	ChapterRecitersWithResponse(ctx context.Context, params *ChapterRecitersParams, reqEditors ...RequestEditorFn) (*ChapterRecitersResponse, error)

	// LanguagesWithResponse request
	LanguagesWithResponse(ctx context.Context, params *LanguagesParams, reqEditors ...RequestEditorFn) (*LanguagesResponse, error)

	// RecitationStylesWithResponse request
	RecitationStylesWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*RecitationStylesResponse, error)

	// RecitationsWithResponse request
	RecitationsWithResponse(ctx context.Context, params *RecitationsParams, reqEditors ...RequestEditorFn) (*RecitationsResponse, error)

	// RecitationInfoWithResponse request
	RecitationInfoWithResponse(ctx context.Context, recitationId string, reqEditors ...RequestEditorFn) (*RecitationInfoResponse, error)

	// TafsirsWithResponse request
	TafsirsWithResponse(ctx context.Context, params *TafsirsParams, reqEditors ...RequestEditorFn) (*TafsirsResponse, error)

	// TafsirInfoWithResponse request
	TafsirInfoWithResponse(ctx context.Context, tafsirId string, reqEditors ...RequestEditorFn) (*TafsirInfoResponse, error)

	// TranslationsWithResponse request
	TranslationsWithResponse(ctx context.Context, params *TranslationsParams, reqEditors ...RequestEditorFn) (*TranslationsResponse, error)

	// TranslationInfoWithResponse request
	TranslationInfoWithResponse(ctx context.Context, translationId string, reqEditors ...RequestEditorFn) (*TranslationInfoResponse, error)

	// VerseMediaWithResponse request
	VerseMediaWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*VerseMediaResponse, error)

	// SearchWithResponse request
	SearchWithResponse(ctx context.Context, params *SearchParams, reqEditors ...RequestEditorFn) (*SearchResponse, error)

	// AyahTafsirsWithResponse request
	AyahTafsirsWithResponse(ctx context.Context, resourceId float32, ayahKey string, reqEditors ...RequestEditorFn) (*AyahTafsirsResponse, error)

	// ChapterTafsirsWithResponse request
	ChapterTafsirsWithResponse(ctx context.Context, resourceId float32, chapterNumber float32, reqEditors ...RequestEditorFn) (*ChapterTafsirsResponse, error)

	// HizbTafsirsWithResponse request
	HizbTafsirsWithResponse(ctx context.Context, resourceId float32, hizbNumber float32, reqEditors ...RequestEditorFn) (*HizbTafsirsResponse, error)

	// JuzTafsirsWithResponse request
	JuzTafsirsWithResponse(ctx context.Context, resourceId float32, juzNumber float32, reqEditors ...RequestEditorFn) (*JuzTafsirsResponse, error)

	// ManzilTafsirsWithResponse request
	ManzilTafsirsWithResponse(ctx context.Context, resourceId float32, manzilNumber float32, reqEditors ...RequestEditorFn) (*ManzilTafsirsResponse, error)

	// PageTafsirsWithResponse request
	PageTafsirsWithResponse(ctx context.Context, resourceId float32, pageNumber float32, reqEditors ...RequestEditorFn) (*PageTafsirsResponse, error)

	// RubElHizbTafsirsWithResponse request
	RubElHizbTafsirsWithResponse(ctx context.Context, resourceId float32, rubElHizbNumber float32, reqEditors ...RequestEditorFn) (*RubElHizbTafsirsResponse, error)

	// RukuTafsirsWithResponse request
	RukuTafsirsWithResponse(ctx context.Context, resourceId float32, rukuNumber float32, reqEditors ...RequestEditorFn) (*RukuTafsirsResponse, error)

	// AyahTranslationsWithResponse request
	AyahTranslationsWithResponse(ctx context.Context, resourceId float32, ayahKey string, reqEditors ...RequestEditorFn) (*AyahTranslationsResponse, error)

	// ChapterTranslationsWithResponse request
	ChapterTranslationsWithResponse(ctx context.Context, resourceId float32, chapterNumber float32, reqEditors ...RequestEditorFn) (*ChapterTranslationsResponse, error)

	// HizbTranslationsWithResponse request
	HizbTranslationsWithResponse(ctx context.Context, resourceId float32, hizbNumber float32, reqEditors ...RequestEditorFn) (*HizbTranslationsResponse, error)

	// JuzTranslationsWithResponse request
	JuzTranslationsWithResponse(ctx context.Context, resourceId float32, juzNumber float32, reqEditors ...RequestEditorFn) (*JuzTranslationsResponse, error)

	// ManzilTranslationsWithResponse request
	ManzilTranslationsWithResponse(ctx context.Context, resourceId float32, manzilNumber float32, reqEditors ...RequestEditorFn) (*ManzilTranslationsResponse, error)

	// PageTranslationsWithResponse request
	PageTranslationsWithResponse(ctx context.Context, resourceId float32, pageNumber float32, reqEditors ...RequestEditorFn) (*PageTranslationsResponse, error)

	// RubElHizbTranslationsWithResponse request
	RubElHizbTranslationsWithResponse(ctx context.Context, resourceId float32, rubElHizbNumber float32, reqEditors ...RequestEditorFn) (*RubElHizbTranslationsResponse, error)

	// RukuTranslationsWithResponse request
	RukuTranslationsWithResponse(ctx context.Context, resourceId float32, rukuNumber float32, reqEditors ...RequestEditorFn) (*RukuTranslationsResponse, error)

	// VersesByChapterNumberWithResponse request
	VersesByChapterNumberWithResponse(ctx context.Context, chapterNumber int, params *VersesByChapterNumberParams, reqEditors ...RequestEditorFn) (*VersesByChapterNumberResponse, error)

	// VersesByHizbNumberWithResponse request
	VersesByHizbNumberWithResponse(ctx context.Context, hizbNumber int, params *VersesByHizbNumberParams, reqEditors ...RequestEditorFn) (*VersesByHizbNumberResponse, error)

	// VersesByJuzNumberWithResponse request
	VersesByJuzNumberWithResponse(ctx context.Context, juzNumber int, params *VersesByJuzNumberParams, reqEditors ...RequestEditorFn) (*VersesByJuzNumberResponse, error)

	// VersesByVerseKeyWithResponse request
	VersesByVerseKeyWithResponse(ctx context.Context, verseKey string, params *VersesByVerseKeyParams, reqEditors ...RequestEditorFn) (*VersesByVerseKeyResponse, error)

	// VersesByPageNumberWithResponse request
	VersesByPageNumberWithResponse(ctx context.Context, pageNumber int, params *VersesByPageNumberParams, reqEditors ...RequestEditorFn) (*VersesByPageNumberResponse, error)

	// VersesByRubElHizbNumberWithResponse request
	VersesByRubElHizbNumberWithResponse(ctx context.Context, rubElHizbNumber int, params *VersesByRubElHizbNumberParams, reqEditors ...RequestEditorFn) (*VersesByRubElHizbNumberResponse, error)

	// RandomVerseWithResponse request
	RandomVerseWithResponse(ctx context.Context, params *RandomVerseParams, reqEditors ...RequestEditorFn) (*RandomVerseResponse, error)
}

type ChapterReciterAudioFilesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		AudioFiles []ChapterRecitation `json:"audio_files"`
	}
	JSON400 *InvalidRequest
	JSON401 *Unauthorized
	JSON403 *Forbidden
	JSON404 *NotFound
	JSON422 *UnprocessableEntity
	JSON429 *RateLimitExceeded
	JSON500 *InternalServerError
	JSON502 *BadGateway
	JSON503 *ServiceUnavailable
	JSON504 *GatewayTimeout
}

// Status returns HTTPResponse.Status
func (r ChapterReciterAudioFilesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ChapterReciterAudioFilesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ChapterReciterAudioFileResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		AudioFile *ChapterRecitation `json:"audio_file,omitempty"`
	}
	JSON400 *InvalidRequest
	JSON401 *Unauthorized
	JSON403 *Forbidden
	JSON404 *NotFound
	JSON422 *UnprocessableEntity
	JSON429 *RateLimitExceeded
	JSON500 *InternalServerError
	JSON502 *BadGateway
	JSON503 *ServiceUnavailable
	JSON504 *GatewayTimeout
}

// Status returns HTTPResponse.Status
func (r ChapterReciterAudioFileResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ChapterReciterAudioFileResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ChaptersResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Chapters *[]map[string]interface{} `json:"chapters,omitempty"`
	}
	JSON400 *InvalidRequest
	JSON401 *Unauthorized
	JSON403 *Forbidden
	JSON404 *NotFound
	JSON422 *UnprocessableEntity
	JSON429 *RateLimitExceeded
	JSON500 *InternalServerError
	JSON502 *BadGateway
	JSON503 *ServiceUnavailable
	JSON504 *GatewayTimeout
}

// Status returns HTTPResponse.Status
func (r ChaptersResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ChaptersResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ChapterInfoResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		ChapterInfo *ChapterInfo `json:"chapter_info,omitempty"`
	}
	JSON400 *InvalidRequest
	JSON401 *Unauthorized
	JSON403 *Forbidden
	JSON404 *NotFound
	JSON422 *UnprocessableEntity
	JSON429 *RateLimitExceeded
	JSON500 *InternalServerError
	JSON502 *BadGateway
	JSON503 *ServiceUnavailable
	JSON504 *GatewayTimeout
}

// Status returns HTTPResponse.Status
func (r ChapterInfoResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ChapterInfoResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ChapterResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Chapter *Chapter `json:"chapter,omitempty"`
	}
	JSON400 *InvalidRequest
	JSON401 *Unauthorized
	JSON403 *Forbidden
	JSON404 *NotFound
	JSON422 *UnprocessableEntity
	JSON429 *RateLimitExceeded
	JSON500 *InternalServerError
	JSON502 *BadGateway
	JSON503 *ServiceUnavailable
	JSON504 *GatewayTimeout
}

// Status returns HTTPResponse.Status
func (r ChapterResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ChapterResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type JuzsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *map[string]interface{}
}

// Status returns HTTPResponse.Status
func (r JuzsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r JuzsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type RecitationAudioFilesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		AudioFiles []Audiofile `json:"audio_files"`
		Meta       *struct {
			ReciterName *string `json:"reciter_name,omitempty"`
		} `json:"meta,omitempty"`
	}
	JSON400 *InvalidRequest
	JSON401 *Unauthorized
	JSON403 *Forbidden
	JSON404 *NotFound
	JSON422 *UnprocessableEntity
	JSON429 *RateLimitExceeded
	JSON500 *InternalServerError
	JSON502 *BadGateway
	JSON503 *ServiceUnavailable
	JSON504 *GatewayTimeout
}

// Status returns HTTPResponse.Status
func (r RecitationAudioFilesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r RecitationAudioFilesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type TafsirResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Meta *struct {
			TafsirName *string `json:"tafsir_name,omitempty"`
		} `json:"meta,omitempty"`
		Tafsirs []Tafsir `json:"tafsirs"`
	}
	JSON400 *InvalidRequest
	JSON401 *Unauthorized
	JSON403 *Forbidden
	JSON404 *NotFound
	JSON422 *UnprocessableEntity
	JSON429 *RateLimitExceeded
	JSON500 *InternalServerError
	JSON502 *BadGateway
	JSON503 *ServiceUnavailable
	JSON504 *GatewayTimeout
}

// Status returns HTTPResponse.Status
func (r TafsirResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r TafsirResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type TranslationResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Meta *struct {
			TranslationName *string `json:"translation_name,omitempty"`
		} `json:"meta,omitempty"`
		Translations []Translation `json:"translations"`
	}
	JSON400 *InvalidRequest
	JSON401 *Unauthorized
	JSON403 *Forbidden
	JSON404 *NotFound
	JSON422 *UnprocessableEntity
	JSON429 *RateLimitExceeded
	JSON500 *InternalServerError
	JSON502 *BadGateway
	JSON503 *ServiceUnavailable
	JSON504 *GatewayTimeout
}

// Status returns HTTPResponse.Status
func (r TranslationResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r TranslationResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type QuranVersesCodeV1Response struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Verses *[]struct {
			// CodeV1 Glyph codes for v1
			CodeV1 *string `json:"code_v1,omitempty"`
			Id     *int    `json:"id,omitempty"`

			// V1Page Madani Mushaf page number. You can use `v1_page` to generate css and font faces for QCF page font.
			V1Page   *int    `json:"v1_page,omitempty"`
			VerseKey *string `json:"verse_key,omitempty"`
		} `json:"verses,omitempty"`
	}
	JSON400 *InvalidRequest
	JSON401 *Unauthorized
	JSON403 *Forbidden
	JSON404 *NotFound
	JSON422 *UnprocessableEntity
	JSON429 *RateLimitExceeded
	JSON500 *InternalServerError
	JSON502 *BadGateway
	JSON503 *ServiceUnavailable
	JSON504 *GatewayTimeout
}

// Status returns HTTPResponse.Status
func (r QuranVersesCodeV1Response) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r QuranVersesCodeV1Response) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type QuranVersesCodeV2Response struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Verses *[]struct {
			// CodeV2 Glyph codes for v2
			CodeV2 string `json:"code_v2"`
			Id     *int   `json:"id,omitempty"`

			// V2Page Madani Mushaf page number. You can use `v2_page` to generate css and font faces for QCF page font.
			V2Page   int     `json:"v2_page"`
			VerseKey *string `json:"verse_key,omitempty"`
		} `json:"verses,omitempty"`
	}
	JSON400 *InvalidRequest
	JSON401 *Unauthorized
	JSON403 *Forbidden
	JSON404 *NotFound
	JSON422 *UnprocessableEntity
	JSON429 *RateLimitExceeded
	JSON500 *InternalServerError
	JSON502 *BadGateway
	JSON503 *ServiceUnavailable
	JSON504 *GatewayTimeout
}

// Status returns HTTPResponse.Status
func (r QuranVersesCodeV2Response) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r QuranVersesCodeV2Response) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type QuranVersesImlaeiResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Verses *[]struct {
			Id         *int    `json:"id,omitempty"`
			TextImlaei *string `json:"text_imlaei,omitempty"`
			VerseKey   *string `json:"verse_key,omitempty"`
		} `json:"verses,omitempty"`
	}
	JSON400 *InvalidRequest
	JSON401 *Unauthorized
	JSON403 *Forbidden
	JSON404 *NotFound
	JSON422 *UnprocessableEntity
	JSON429 *RateLimitExceeded
	JSON500 *InternalServerError
	JSON502 *BadGateway
	JSON503 *ServiceUnavailable
	JSON504 *GatewayTimeout
}

// Status returns HTTPResponse.Status
func (r QuranVersesImlaeiResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r QuranVersesImlaeiResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type QuranVersesIndopakResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Verses *[]struct {
			Id          *int    `json:"id,omitempty"`
			TextIndopak *string `json:"text_indopak,omitempty"`
			VerseKey    *string `json:"verse_key,omitempty"`
		} `json:"verses,omitempty"`
	}
	JSON400 *InvalidRequest
	JSON401 *Unauthorized
	JSON403 *Forbidden
	JSON404 *NotFound
	JSON422 *UnprocessableEntity
	JSON429 *RateLimitExceeded
	JSON500 *InternalServerError
	JSON502 *BadGateway
	JSON503 *ServiceUnavailable
	JSON504 *GatewayTimeout
}

// Status returns HTTPResponse.Status
func (r QuranVersesIndopakResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r QuranVersesIndopakResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type QuranVersesUthmaniResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Verses *[]struct {
			Id          *int    `json:"id,omitempty"`
			TextUthmani *string `json:"text_uthmani,omitempty"`
			VerseKey    *string `json:"verse_key,omitempty"`
		} `json:"verses,omitempty"`
	}
	JSON400 *InvalidRequest
	JSON401 *Unauthorized
	JSON403 *Forbidden
	JSON404 *NotFound
	JSON422 *UnprocessableEntity
	JSON429 *RateLimitExceeded
	JSON500 *InternalServerError
	JSON502 *BadGateway
	JSON503 *ServiceUnavailable
	JSON504 *GatewayTimeout
}

// Status returns HTTPResponse.Status
func (r QuranVersesUthmaniResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r QuranVersesUthmaniResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type QuranVersesUthmaniSimpleResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Verses *[]struct {
			Id                *int    `json:"id,omitempty"`
			TextUthmaniSimple *string `json:"text_uthmani_simple,omitempty"`
			VerseKey          *string `json:"verse_key,omitempty"`
		} `json:"verses,omitempty"`
	}
	JSON400 *InvalidRequest
	JSON401 *Unauthorized
	JSON403 *Forbidden
	JSON404 *NotFound
	JSON422 *UnprocessableEntity
	JSON429 *RateLimitExceeded
	JSON500 *InternalServerError
	JSON502 *BadGateway
	JSON503 *ServiceUnavailable
	JSON504 *GatewayTimeout
}

// Status returns HTTPResponse.Status
func (r QuranVersesUthmaniSimpleResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r QuranVersesUthmaniSimpleResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type QuranVersesUthmaniTajweedResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Verses *[]struct {
			Id                 *int    `json:"id,omitempty"`
			TextUthmaniTajweed *string `json:"text_uthmani_tajweed,omitempty"`
			VerseKey           *string `json:"verse_key,omitempty"`
		} `json:"verses,omitempty"`
	}
	JSON400 *InvalidRequest
	JSON401 *Unauthorized
	JSON403 *Forbidden
	JSON404 *NotFound
	JSON422 *UnprocessableEntity
	JSON429 *RateLimitExceeded
	JSON500 *InternalServerError
	JSON502 *BadGateway
	JSON503 *ServiceUnavailable
	JSON504 *GatewayTimeout
}

// Status returns HTTPResponse.Status
func (r QuranVersesUthmaniTajweedResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r QuranVersesUthmaniTajweedResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AyahRecitationsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		AudioFiles []Audiofile `json:"audio_files"`
		Pagination Pagination  `json:"pagination"`
	}
	JSON400 *InvalidRequest
	JSON401 *Unauthorized
	JSON403 *Forbidden
	JSON404 *NotFound
	JSON422 *UnprocessableEntity
	JSON429 *RateLimitExceeded
	JSON500 *InternalServerError
	JSON502 *BadGateway
	JSON503 *ServiceUnavailable
	JSON504 *GatewayTimeout
}

// Status returns HTTPResponse.Status
func (r AyahRecitationsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AyahRecitationsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ChapterRecitationsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		AudioFiles *[]Audiofile `json:"audio_files,omitempty"`
		Pagination *Pagination  `json:"pagination,omitempty"`
	}
	JSON400 *InvalidRequest
	JSON401 *Unauthorized
	JSON403 *Forbidden
	JSON404 *NotFound
	JSON422 *UnprocessableEntity
	JSON429 *RateLimitExceeded
	JSON500 *InternalServerError
	JSON502 *BadGateway
	JSON503 *ServiceUnavailable
	JSON504 *GatewayTimeout
}

// Status returns HTTPResponse.Status
func (r ChapterRecitationsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ChapterRecitationsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type HizbRecitationsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		AudioFiles []Audiofile `json:"audio_files"`
		Pagination Pagination  `json:"pagination"`
	}
	JSON400 *InvalidRequest
	JSON401 *Unauthorized
	JSON403 *Forbidden
	JSON404 *NotFound
	JSON422 *UnprocessableEntity
	JSON429 *RateLimitExceeded
	JSON500 *InternalServerError
	JSON502 *BadGateway
	JSON503 *ServiceUnavailable
	JSON504 *GatewayTimeout
}

// Status returns HTTPResponse.Status
func (r HizbRecitationsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r HizbRecitationsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type JuzRecitationsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		AudioFiles []Audiofile `json:"audio_files"`
		Pagination Pagination  `json:"pagination"`
	}
	JSON400 *InvalidRequest
	JSON401 *Unauthorized
	JSON403 *Forbidden
	JSON404 *NotFound
	JSON422 *UnprocessableEntity
	JSON429 *RateLimitExceeded
	JSON500 *InternalServerError
	JSON502 *BadGateway
	JSON503 *ServiceUnavailable
	JSON504 *GatewayTimeout
}

// Status returns HTTPResponse.Status
func (r JuzRecitationsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r JuzRecitationsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ManzilRecitationsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		AudioFiles []Audiofile `json:"audio_files"`
		Pagination Pagination  `json:"pagination"`
	}
	JSON400 *InvalidRequest
	JSON401 *Unauthorized
	JSON403 *Forbidden
	JSON404 *NotFound
	JSON422 *UnprocessableEntity
	JSON429 *RateLimitExceeded
	JSON500 *InternalServerError
	JSON502 *BadGateway
	JSON503 *ServiceUnavailable
	JSON504 *GatewayTimeout
}

// Status returns HTTPResponse.Status
func (r ManzilRecitationsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ManzilRecitationsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PageRecitationsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		AudioFiles []Audiofile `json:"audio_files"`
		Pagination Pagination  `json:"pagination"`
	}
	JSON400 *InvalidRequest
	JSON401 *Unauthorized
	JSON403 *Forbidden
	JSON404 *NotFound
	JSON422 *UnprocessableEntity
	JSON429 *RateLimitExceeded
	JSON500 *InternalServerError
	JSON502 *BadGateway
	JSON503 *ServiceUnavailable
	JSON504 *GatewayTimeout
}

// Status returns HTTPResponse.Status
func (r PageRecitationsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PageRecitationsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type RubElHizbRecitationsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		AudioFiles []Audiofile `json:"audio_files"`
		Pagination Pagination  `json:"pagination"`
	}
	JSON400 *InvalidRequest
	JSON401 *Unauthorized
	JSON403 *Forbidden
	JSON404 *NotFound
	JSON422 *UnprocessableEntity
	JSON429 *RateLimitExceeded
	JSON500 *InternalServerError
	JSON502 *BadGateway
	JSON503 *ServiceUnavailable
	JSON504 *GatewayTimeout
}

// Status returns HTTPResponse.Status
func (r RubElHizbRecitationsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r RubElHizbRecitationsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type RukuRecitationsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		AudioFiles []Audiofile `json:"audio_files"`
		Pagination Pagination  `json:"pagination"`
	}
	JSON400 *InvalidRequest
	JSON401 *Unauthorized
	JSON403 *Forbidden
	JSON404 *NotFound
	JSON422 *UnprocessableEntity
	JSON429 *RateLimitExceeded
	JSON500 *InternalServerError
	JSON502 *BadGateway
	JSON503 *ServiceUnavailable
	JSON504 *GatewayTimeout
}

// Status returns HTTPResponse.Status
func (r RukuRecitationsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r RukuRecitationsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ChapterInfosResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		ChapterInfos *[]struct {
			AuthorName     *string `json:"author_name,omitempty"`
			Id             *int    `json:"id,omitempty"`
			LanguageName   *string `json:"language_name,omitempty"`
			Name           *string `json:"name,omitempty"`
			TranslatedName *struct {
				LanguageName *string `json:"language_name,omitempty"`
				Name         *string `json:"name,omitempty"`
			} `json:"translated_name,omitempty"`
		} `json:"chapter_infos,omitempty"`
	}
	JSON400 *InvalidRequest
	JSON401 *Unauthorized
	JSON403 *Forbidden
	JSON404 *NotFound
	JSON422 *UnprocessableEntity
	JSON429 *RateLimitExceeded
	JSON500 *InternalServerError
	JSON502 *BadGateway
	JSON503 *ServiceUnavailable
	JSON504 *GatewayTimeout
}

// Status returns HTTPResponse.Status
func (r ChapterInfosResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ChapterInfosResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ChapterRecitersResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Reciters *[]ChapterReciters `json:"reciters,omitempty"`
	}
	JSON400 *InvalidRequest
	JSON401 *Unauthorized
	JSON403 *Forbidden
	JSON404 *NotFound
	JSON422 *UnprocessableEntity
	JSON429 *RateLimitExceeded
	JSON500 *InternalServerError
	JSON502 *BadGateway
	JSON503 *ServiceUnavailable
	JSON504 *GatewayTimeout
}

// Status returns HTTPResponse.Status
func (r ChapterRecitersResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ChapterRecitersResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type LanguagesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]Language
	JSON400      *InvalidRequest
	JSON401      *Unauthorized
	JSON403      *Forbidden
	JSON404      *NotFound
	JSON422      *UnprocessableEntity
	JSON429      *RateLimitExceeded
	JSON500      *InternalServerError
	JSON502      *BadGateway
	JSON503      *ServiceUnavailable
	JSON504      *GatewayTimeout
}

// Status returns HTTPResponse.Status
func (r LanguagesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r LanguagesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type RecitationStylesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Muallim  *string `json:"muallim,omitempty"`
		Mujawwad *string `json:"mujawwad,omitempty"`
		Murattal *string `json:"murattal,omitempty"`
	}
	JSON400 *InvalidRequest
	JSON401 *Unauthorized
	JSON403 *Forbidden
	JSON404 *NotFound
	JSON422 *UnprocessableEntity
	JSON429 *RateLimitExceeded
	JSON500 *InternalServerError
	JSON502 *BadGateway
	JSON503 *ServiceUnavailable
	JSON504 *GatewayTimeout
}

// Status returns HTTPResponse.Status
func (r RecitationStylesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r RecitationStylesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type RecitationsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]Recitation
	JSON400      *InvalidRequest
	JSON401      *Unauthorized
	JSON403      *Forbidden
	JSON404      *NotFound
	JSON422      *UnprocessableEntity
	JSON429      *RateLimitExceeded
	JSON500      *InternalServerError
	JSON502      *BadGateway
	JSON503      *ServiceUnavailable
	JSON504      *GatewayTimeout
}

// Status returns HTTPResponse.Status
func (r RecitationsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r RecitationsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type RecitationInfoResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Info *struct {
			Id *int `json:"id,omitempty"`
		} `json:"info,omitempty"`
	}
	JSON400 *InvalidRequest
	JSON401 *Unauthorized
	JSON403 *Forbidden
	JSON404 *NotFound
	JSON422 *UnprocessableEntity
	JSON429 *RateLimitExceeded
	JSON500 *InternalServerError
	JSON502 *BadGateway
	JSON503 *ServiceUnavailable
	JSON504 *GatewayTimeout
}

// Status returns HTTPResponse.Status
func (r RecitationInfoResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r RecitationInfoResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type TafsirsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Tafsirs *[]Resource `json:"tafsirs,omitempty"`
	}
	JSON400 *InvalidRequest
	JSON401 *Unauthorized
	JSON403 *Forbidden
	JSON404 *NotFound
	JSON422 *UnprocessableEntity
	JSON429 *RateLimitExceeded
	JSON500 *InternalServerError
	JSON502 *BadGateway
	JSON503 *ServiceUnavailable
	JSON504 *GatewayTimeout
}

// Status returns HTTPResponse.Status
func (r TafsirsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r TafsirsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type TafsirInfoResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Id *float32 `json:"id,omitempty"`
	}
	JSON400 *InvalidRequest
	JSON401 *Unauthorized
	JSON403 *Forbidden
	JSON404 *NotFound
	JSON422 *UnprocessableEntity
	JSON429 *RateLimitExceeded
	JSON500 *InternalServerError
	JSON502 *BadGateway
	JSON503 *ServiceUnavailable
	JSON504 *GatewayTimeout
}

// Status returns HTTPResponse.Status
func (r TafsirInfoResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r TafsirInfoResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type TranslationsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Translations *[]Resource `json:"translations,omitempty"`
	}
	JSON400 *InvalidRequest
	JSON401 *Unauthorized
	JSON403 *Forbidden
	JSON404 *NotFound
	JSON422 *UnprocessableEntity
	JSON429 *RateLimitExceeded
	JSON500 *InternalServerError
	JSON502 *BadGateway
	JSON503 *ServiceUnavailable
	JSON504 *GatewayTimeout
}

// Status returns HTTPResponse.Status
func (r TranslationsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r TranslationsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type TranslationInfoResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Info *struct {
			Id *int `json:"id,omitempty"`
		} `json:"info,omitempty"`
	}
	JSON400 *InvalidRequest
	JSON401 *Unauthorized
	JSON403 *Forbidden
	JSON404 *NotFound
	JSON422 *UnprocessableEntity
	JSON429 *RateLimitExceeded
	JSON500 *InternalServerError
	JSON502 *BadGateway
	JSON503 *ServiceUnavailable
	JSON504 *GatewayTimeout
}

// Status returns HTTPResponse.Status
func (r TranslationInfoResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r TranslationInfoResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type VerseMediaResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		AuthorName   *string  `json:"author_name,omitempty"`
		Id           *float32 `json:"id,omitempty"`
		LanguageName *string  `json:"language_name,omitempty"`
		Name         *string  `json:"name,omitempty"`
	}
	JSON400 *InvalidRequest
	JSON401 *Unauthorized
	JSON403 *Forbidden
	JSON404 *NotFound
	JSON422 *UnprocessableEntity
	JSON429 *RateLimitExceeded
	JSON500 *InternalServerError
	JSON502 *BadGateway
	JSON503 *ServiceUnavailable
	JSON504 *GatewayTimeout
}

// Status returns HTTPResponse.Status
func (r VerseMediaResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r VerseMediaResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SearchResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *map[string]interface{}
}

// Status returns HTTPResponse.Status
func (r SearchResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SearchResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AyahTafsirsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Tafsir *struct {
			LanguageId   int    `json:"language_id"`
			ResourceId   int    `json:"resource_id"`
			ResourceName string `json:"resource_name"`
			Slug         string `json:"slug"`

			// Text HTML-formatted tafsir body
			Text           string `json:"text"`
			TranslatedName struct {
				LanguageName string `json:"language_name"`
				Name         string `json:"name"`
			} `json:"translated_name"`

			// Verses Hash map of ayah_key → tafsir-record
			Verses map[string]struct {
				Id int `json:"id"`
			} `json:"verses"`
		} `json:"tafsir,omitempty"`
	}
	JSON400 *InvalidRequest
	JSON401 *Unauthorized
	JSON403 *Forbidden
	JSON404 *NotFound
	JSON422 *UnprocessableEntity
	JSON429 *RateLimitExceeded
	JSON500 *InternalServerError
	JSON502 *BadGateway
	JSON503 *ServiceUnavailable
	JSON504 *GatewayTimeout
}

// Status returns HTTPResponse.Status
func (r AyahTafsirsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AyahTafsirsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ChapterTafsirsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Pagination *Pagination `json:"pagination,omitempty"`
		Tafsirs    *[]Tafsir   `json:"tafsirs,omitempty"`
	}
	JSON400 *InvalidRequest
	JSON401 *Unauthorized
	JSON403 *Forbidden
	JSON404 *NotFound
	JSON422 *UnprocessableEntity
	JSON429 *RateLimitExceeded
	JSON500 *InternalServerError
	JSON502 *BadGateway
	JSON503 *ServiceUnavailable
	JSON504 *GatewayTimeout
}

// Status returns HTTPResponse.Status
func (r ChapterTafsirsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ChapterTafsirsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type HizbTafsirsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Pagination *Pagination `json:"pagination,omitempty"`
		Tafsirs    *[]Tafsir   `json:"tafsirs,omitempty"`
	}
	JSON400 *InvalidRequest
	JSON401 *Unauthorized
	JSON403 *Forbidden
	JSON404 *NotFound
	JSON422 *UnprocessableEntity
	JSON429 *RateLimitExceeded
	JSON500 *InternalServerError
	JSON502 *BadGateway
	JSON503 *ServiceUnavailable
	JSON504 *GatewayTimeout
}

// Status returns HTTPResponse.Status
func (r HizbTafsirsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r HizbTafsirsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type JuzTafsirsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Pagination *Pagination `json:"pagination,omitempty"`
		Tafsirs    *[]Tafsir   `json:"tafsirs,omitempty"`
	}
	JSON400 *InvalidRequest
	JSON401 *Unauthorized
	JSON403 *Forbidden
	JSON404 *NotFound
	JSON422 *UnprocessableEntity
	JSON429 *RateLimitExceeded
	JSON500 *InternalServerError
	JSON502 *BadGateway
	JSON503 *ServiceUnavailable
	JSON504 *GatewayTimeout
}

// Status returns HTTPResponse.Status
func (r JuzTafsirsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r JuzTafsirsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ManzilTafsirsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Pagination *Pagination `json:"pagination,omitempty"`
		Tafsirs    *[]Tafsir   `json:"tafsirs,omitempty"`
	}
	JSON400 *InvalidRequest
	JSON401 *Unauthorized
	JSON403 *Forbidden
	JSON404 *NotFound
	JSON422 *UnprocessableEntity
	JSON429 *RateLimitExceeded
	JSON500 *InternalServerError
	JSON502 *BadGateway
	JSON503 *ServiceUnavailable
	JSON504 *GatewayTimeout
}

// Status returns HTTPResponse.Status
func (r ManzilTafsirsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ManzilTafsirsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PageTafsirsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Pagination *Pagination `json:"pagination,omitempty"`
		Tafsirs    *[]Tafsir   `json:"tafsirs,omitempty"`
	}
	JSON400 *InvalidRequest
	JSON401 *Unauthorized
	JSON403 *Forbidden
	JSON404 *NotFound
	JSON422 *UnprocessableEntity
	JSON429 *RateLimitExceeded
	JSON500 *InternalServerError
	JSON502 *BadGateway
	JSON503 *ServiceUnavailable
	JSON504 *GatewayTimeout
}

// Status returns HTTPResponse.Status
func (r PageTafsirsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PageTafsirsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type RubElHizbTafsirsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Pagination *Pagination `json:"pagination,omitempty"`
		Tafsirs    *[]Tafsir   `json:"tafsirs,omitempty"`
	}
	JSON400 *InvalidRequest
	JSON401 *Unauthorized
	JSON403 *Forbidden
	JSON404 *NotFound
	JSON422 *UnprocessableEntity
	JSON429 *RateLimitExceeded
	JSON500 *InternalServerError
	JSON502 *BadGateway
	JSON503 *ServiceUnavailable
	JSON504 *GatewayTimeout
}

// Status returns HTTPResponse.Status
func (r RubElHizbTafsirsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r RubElHizbTafsirsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type RukuTafsirsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Pagination *Pagination `json:"pagination,omitempty"`
		Tafsirs    *[]Tafsir   `json:"tafsirs,omitempty"`
	}
	JSON400 *InvalidRequest
	JSON401 *Unauthorized
	JSON403 *Forbidden
	JSON404 *NotFound
	JSON422 *UnprocessableEntity
	JSON429 *RateLimitExceeded
	JSON500 *InternalServerError
	JSON502 *BadGateway
	JSON503 *ServiceUnavailable
	JSON504 *GatewayTimeout
}

// Status returns HTTPResponse.Status
func (r RukuTafsirsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r RukuTafsirsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AyahTranslationsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Translations *[]Translation `json:"translations,omitempty"`
	}
	JSON400 *InvalidRequest
	JSON401 *Unauthorized
	JSON403 *Forbidden
	JSON404 *NotFound
	JSON422 *UnprocessableEntity
	JSON429 *RateLimitExceeded
	JSON500 *InternalServerError
	JSON502 *BadGateway
	JSON503 *ServiceUnavailable
	JSON504 *GatewayTimeout
}

// Status returns HTTPResponse.Status
func (r AyahTranslationsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AyahTranslationsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ChapterTranslationsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Pagination   *Pagination    `json:"pagination,omitempty"`
		Translations *[]Translation `json:"translations,omitempty"`
	}
	JSON400 *InvalidRequest
	JSON401 *Unauthorized
	JSON403 *Forbidden
	JSON404 *NotFound
	JSON422 *UnprocessableEntity
	JSON429 *RateLimitExceeded
	JSON500 *InternalServerError
	JSON502 *BadGateway
	JSON503 *ServiceUnavailable
	JSON504 *GatewayTimeout
}

// Status returns HTTPResponse.Status
func (r ChapterTranslationsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ChapterTranslationsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type HizbTranslationsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Pagination   *Pagination    `json:"pagination,omitempty"`
		Translations *[]Translation `json:"translations,omitempty"`
	}
	JSON400 *InvalidRequest
	JSON401 *Unauthorized
	JSON403 *Forbidden
	JSON404 *NotFound
	JSON422 *UnprocessableEntity
	JSON429 *RateLimitExceeded
	JSON500 *InternalServerError
	JSON502 *BadGateway
	JSON503 *ServiceUnavailable
	JSON504 *GatewayTimeout
}

// Status returns HTTPResponse.Status
func (r HizbTranslationsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r HizbTranslationsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type JuzTranslationsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Pagination   *Pagination    `json:"pagination,omitempty"`
		Translations *[]Translation `json:"translations,omitempty"`
	}
	JSON400 *InvalidRequest
	JSON401 *Unauthorized
	JSON403 *Forbidden
	JSON404 *NotFound
	JSON422 *UnprocessableEntity
	JSON429 *RateLimitExceeded
	JSON500 *InternalServerError
	JSON502 *BadGateway
	JSON503 *ServiceUnavailable
	JSON504 *GatewayTimeout
}

// Status returns HTTPResponse.Status
func (r JuzTranslationsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r JuzTranslationsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ManzilTranslationsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Pagination   *Pagination    `json:"pagination,omitempty"`
		Translations *[]Translation `json:"translations,omitempty"`
	}
	JSON400 *InvalidRequest
	JSON401 *Unauthorized
	JSON403 *Forbidden
	JSON404 *NotFound
	JSON422 *UnprocessableEntity
	JSON429 *RateLimitExceeded
	JSON500 *InternalServerError
	JSON502 *BadGateway
	JSON503 *ServiceUnavailable
	JSON504 *GatewayTimeout
}

// Status returns HTTPResponse.Status
func (r ManzilTranslationsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ManzilTranslationsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PageTranslationsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Pagination   *Pagination    `json:"pagination,omitempty"`
		Translations *[]Translation `json:"translations,omitempty"`
	}
	JSON400 *InvalidRequest
	JSON401 *Unauthorized
	JSON403 *Forbidden
	JSON404 *NotFound
	JSON422 *UnprocessableEntity
	JSON429 *RateLimitExceeded
	JSON500 *InternalServerError
	JSON502 *BadGateway
	JSON503 *ServiceUnavailable
	JSON504 *GatewayTimeout
}

// Status returns HTTPResponse.Status
func (r PageTranslationsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PageTranslationsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type RubElHizbTranslationsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Pagination   *Pagination    `json:"pagination,omitempty"`
		Translations *[]Translation `json:"translations,omitempty"`
	}
	JSON400 *InvalidRequest
	JSON401 *Unauthorized
	JSON403 *Forbidden
	JSON404 *NotFound
	JSON422 *UnprocessableEntity
	JSON429 *RateLimitExceeded
	JSON500 *InternalServerError
	JSON502 *BadGateway
	JSON503 *ServiceUnavailable
	JSON504 *GatewayTimeout
}

// Status returns HTTPResponse.Status
func (r RubElHizbTranslationsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r RubElHizbTranslationsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type RukuTranslationsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Pagination   *Pagination    `json:"pagination,omitempty"`
		Translations *[]Translation `json:"translations,omitempty"`
	}
	JSON400 *InvalidRequest
	JSON401 *Unauthorized
	JSON403 *Forbidden
	JSON404 *NotFound
	JSON422 *UnprocessableEntity
	JSON429 *RateLimitExceeded
	JSON500 *InternalServerError
	JSON502 *BadGateway
	JSON503 *ServiceUnavailable
	JSON504 *GatewayTimeout
}

// Status returns HTTPResponse.Status
func (r RukuTranslationsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r RukuTranslationsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type VersesByChapterNumberResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Pagination *Pagination `json:"pagination,omitempty"`
		Verses     *[]Verse    `json:"verses,omitempty"`
	}
	JSON400 *InvalidRequest
	JSON401 *Unauthorized
	JSON403 *Forbidden
	JSON404 *NotFound
	JSON422 *UnprocessableEntity
	JSON429 *RateLimitExceeded
	JSON500 *InternalServerError
	JSON502 *BadGateway
	JSON503 *ServiceUnavailable
	JSON504 *GatewayTimeout
}

// Status returns HTTPResponse.Status
func (r VersesByChapterNumberResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r VersesByChapterNumberResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type VersesByHizbNumberResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Pagination *Pagination `json:"pagination,omitempty"`
		Verses     *[]Verse    `json:"verses,omitempty"`
	}
	JSON400 *InvalidRequest
	JSON401 *Unauthorized
	JSON403 *Forbidden
	JSON404 *NotFound
	JSON422 *UnprocessableEntity
	JSON429 *RateLimitExceeded
	JSON500 *InternalServerError
	JSON502 *BadGateway
	JSON503 *ServiceUnavailable
	JSON504 *GatewayTimeout
}

// Status returns HTTPResponse.Status
func (r VersesByHizbNumberResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r VersesByHizbNumberResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type VersesByJuzNumberResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Pagination *Pagination `json:"pagination,omitempty"`
		Verses     *[]Verse    `json:"verses,omitempty"`
	}
	JSON400 *InvalidRequest
	JSON401 *Unauthorized
	JSON403 *Forbidden
	JSON404 *NotFound
	JSON422 *UnprocessableEntity
	JSON429 *RateLimitExceeded
	JSON500 *InternalServerError
	JSON502 *BadGateway
	JSON503 *ServiceUnavailable
	JSON504 *GatewayTimeout
}

// Status returns HTTPResponse.Status
func (r VersesByJuzNumberResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r VersesByJuzNumberResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type VersesByVerseKeyResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Verse Verse `json:"verse"`
	}
	JSON400 *InvalidRequest
	JSON401 *Unauthorized
	JSON403 *Forbidden
	JSON404 *NotFound
	JSON422 *UnprocessableEntity
	JSON429 *RateLimitExceeded
	JSON500 *InternalServerError
	JSON502 *BadGateway
	JSON503 *ServiceUnavailable
	JSON504 *GatewayTimeout
}

// Status returns HTTPResponse.Status
func (r VersesByVerseKeyResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r VersesByVerseKeyResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type VersesByPageNumberResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Pagination *Pagination `json:"pagination,omitempty"`
		Verses     *[]Verse    `json:"verses,omitempty"`
	}
	JSON400 *InvalidRequest
	JSON401 *Unauthorized
	JSON403 *Forbidden
	JSON404 *NotFound
	JSON422 *UnprocessableEntity
	JSON429 *RateLimitExceeded
	JSON500 *InternalServerError
	JSON502 *BadGateway
	JSON503 *ServiceUnavailable
	JSON504 *GatewayTimeout
}

// Status returns HTTPResponse.Status
func (r VersesByPageNumberResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r VersesByPageNumberResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type VersesByRubElHizbNumberResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Pagination *Pagination `json:"pagination,omitempty"`
		Verses     *[]Verse    `json:"verses,omitempty"`
	}
	JSON400 *InvalidRequest
	JSON401 *Unauthorized
	JSON403 *Forbidden
	JSON404 *NotFound
	JSON422 *UnprocessableEntity
	JSON429 *RateLimitExceeded
	JSON500 *InternalServerError
	JSON502 *BadGateway
	JSON503 *ServiceUnavailable
	JSON504 *GatewayTimeout
}

// Status returns HTTPResponse.Status
func (r VersesByRubElHizbNumberResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r VersesByRubElHizbNumberResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type RandomVerseResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Verse Verse `json:"verse"`
	}
	JSON400 *InvalidRequest
	JSON401 *Unauthorized
	JSON403 *Forbidden
	JSON404 *NotFound
	JSON422 *UnprocessableEntity
	JSON429 *RateLimitExceeded
	JSON500 *InternalServerError
	JSON502 *BadGateway
	JSON503 *ServiceUnavailable
	JSON504 *GatewayTimeout
}

// Status returns HTTPResponse.Status
func (r RandomVerseResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r RandomVerseResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// ChapterReciterAudioFilesWithResponse request returning *ChapterReciterAudioFilesResponse
func (c *ClientWithResponses) ChapterReciterAudioFilesWithResponse(ctx context.Context, id float32, params *ChapterReciterAudioFilesParams, reqEditors ...RequestEditorFn) (*ChapterReciterAudioFilesResponse, error) {
	rsp, err := c.ChapterReciterAudioFiles(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseChapterReciterAudioFilesResponse(rsp)
}

// ChapterReciterAudioFileWithResponse request returning *ChapterReciterAudioFileResponse
func (c *ClientWithResponses) ChapterReciterAudioFileWithResponse(ctx context.Context, id float32, chapterNumber float32, reqEditors ...RequestEditorFn) (*ChapterReciterAudioFileResponse, error) {
	rsp, err := c.ChapterReciterAudioFile(ctx, id, chapterNumber, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseChapterReciterAudioFileResponse(rsp)
}

// ChaptersWithResponse request returning *ChaptersResponse
func (c *ClientWithResponses) ChaptersWithResponse(ctx context.Context, params *ChaptersParams, reqEditors ...RequestEditorFn) (*ChaptersResponse, error) {
	rsp, err := c.Chapters(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseChaptersResponse(rsp)
}

// ChapterInfoWithResponse request returning *ChapterInfoResponse
func (c *ClientWithResponses) ChapterInfoWithResponse(ctx context.Context, chapterId int, params *ChapterInfoParams, reqEditors ...RequestEditorFn) (*ChapterInfoResponse, error) {
	rsp, err := c.ChapterInfo(ctx, chapterId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseChapterInfoResponse(rsp)
}

// ChapterWithResponse request returning *ChapterResponse
func (c *ClientWithResponses) ChapterWithResponse(ctx context.Context, id int, params *ChapterParams, reqEditors ...RequestEditorFn) (*ChapterResponse, error) {
	rsp, err := c.Chapter(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseChapterResponse(rsp)
}

// JuzsWithResponse request returning *JuzsResponse
func (c *ClientWithResponses) JuzsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*JuzsResponse, error) {
	rsp, err := c.Juzs(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseJuzsResponse(rsp)
}

// RecitationAudioFilesWithResponse request returning *RecitationAudioFilesResponse
func (c *ClientWithResponses) RecitationAudioFilesWithResponse(ctx context.Context, recitationId float32, params *RecitationAudioFilesParams, reqEditors ...RequestEditorFn) (*RecitationAudioFilesResponse, error) {
	rsp, err := c.RecitationAudioFiles(ctx, recitationId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseRecitationAudioFilesResponse(rsp)
}

// TafsirWithResponse request returning *TafsirResponse
func (c *ClientWithResponses) TafsirWithResponse(ctx context.Context, tafsirId float32, params *TafsirParams, reqEditors ...RequestEditorFn) (*TafsirResponse, error) {
	rsp, err := c.Tafsir(ctx, tafsirId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseTafsirResponse(rsp)
}

// TranslationWithResponse request returning *TranslationResponse
func (c *ClientWithResponses) TranslationWithResponse(ctx context.Context, translationId float32, params *TranslationParams, reqEditors ...RequestEditorFn) (*TranslationResponse, error) {
	rsp, err := c.Translation(ctx, translationId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseTranslationResponse(rsp)
}

// QuranVersesCodeV1WithResponse request returning *QuranVersesCodeV1Response
func (c *ClientWithResponses) QuranVersesCodeV1WithResponse(ctx context.Context, params *QuranVersesCodeV1Params, reqEditors ...RequestEditorFn) (*QuranVersesCodeV1Response, error) {
	rsp, err := c.QuranVersesCodeV1(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseQuranVersesCodeV1Response(rsp)
}

// QuranVersesCodeV2WithResponse request returning *QuranVersesCodeV2Response
func (c *ClientWithResponses) QuranVersesCodeV2WithResponse(ctx context.Context, params *QuranVersesCodeV2Params, reqEditors ...RequestEditorFn) (*QuranVersesCodeV2Response, error) {
	rsp, err := c.QuranVersesCodeV2(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseQuranVersesCodeV2Response(rsp)
}

// QuranVersesImlaeiWithResponse request returning *QuranVersesImlaeiResponse
func (c *ClientWithResponses) QuranVersesImlaeiWithResponse(ctx context.Context, params *QuranVersesImlaeiParams, reqEditors ...RequestEditorFn) (*QuranVersesImlaeiResponse, error) {
	rsp, err := c.QuranVersesImlaei(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseQuranVersesImlaeiResponse(rsp)
}

// QuranVersesIndopakWithResponse request returning *QuranVersesIndopakResponse
func (c *ClientWithResponses) QuranVersesIndopakWithResponse(ctx context.Context, params *QuranVersesIndopakParams, reqEditors ...RequestEditorFn) (*QuranVersesIndopakResponse, error) {
	rsp, err := c.QuranVersesIndopak(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseQuranVersesIndopakResponse(rsp)
}

// QuranVersesUthmaniWithResponse request returning *QuranVersesUthmaniResponse
func (c *ClientWithResponses) QuranVersesUthmaniWithResponse(ctx context.Context, params *QuranVersesUthmaniParams, reqEditors ...RequestEditorFn) (*QuranVersesUthmaniResponse, error) {
	rsp, err := c.QuranVersesUthmani(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseQuranVersesUthmaniResponse(rsp)
}

// QuranVersesUthmaniSimpleWithResponse request returning *QuranVersesUthmaniSimpleResponse
func (c *ClientWithResponses) QuranVersesUthmaniSimpleWithResponse(ctx context.Context, params *QuranVersesUthmaniSimpleParams, reqEditors ...RequestEditorFn) (*QuranVersesUthmaniSimpleResponse, error) {
	rsp, err := c.QuranVersesUthmaniSimple(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseQuranVersesUthmaniSimpleResponse(rsp)
}

// QuranVersesUthmaniTajweedWithResponse request returning *QuranVersesUthmaniTajweedResponse
func (c *ClientWithResponses) QuranVersesUthmaniTajweedWithResponse(ctx context.Context, params *QuranVersesUthmaniTajweedParams, reqEditors ...RequestEditorFn) (*QuranVersesUthmaniTajweedResponse, error) {
	rsp, err := c.QuranVersesUthmaniTajweed(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseQuranVersesUthmaniTajweedResponse(rsp)
}

// AyahRecitationsWithResponse request returning *AyahRecitationsResponse
func (c *ClientWithResponses) AyahRecitationsWithResponse(ctx context.Context, recitationId float32, ayahKey string, reqEditors ...RequestEditorFn) (*AyahRecitationsResponse, error) {
	rsp, err := c.AyahRecitations(ctx, recitationId, ayahKey, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAyahRecitationsResponse(rsp)
}

// ChapterRecitationsWithResponse request returning *ChapterRecitationsResponse
func (c *ClientWithResponses) ChapterRecitationsWithResponse(ctx context.Context, recitationId float32, chapterNumber float32, reqEditors ...RequestEditorFn) (*ChapterRecitationsResponse, error) {
	rsp, err := c.ChapterRecitations(ctx, recitationId, chapterNumber, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseChapterRecitationsResponse(rsp)
}

// HizbRecitationsWithResponse request returning *HizbRecitationsResponse
func (c *ClientWithResponses) HizbRecitationsWithResponse(ctx context.Context, recitationId float32, hizbNumber float32, reqEditors ...RequestEditorFn) (*HizbRecitationsResponse, error) {
	rsp, err := c.HizbRecitations(ctx, recitationId, hizbNumber, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseHizbRecitationsResponse(rsp)
}

// JuzRecitationsWithResponse request returning *JuzRecitationsResponse
func (c *ClientWithResponses) JuzRecitationsWithResponse(ctx context.Context, recitationId float32, juzNumber float32, reqEditors ...RequestEditorFn) (*JuzRecitationsResponse, error) {
	rsp, err := c.JuzRecitations(ctx, recitationId, juzNumber, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseJuzRecitationsResponse(rsp)
}

// ManzilRecitationsWithResponse request returning *ManzilRecitationsResponse
func (c *ClientWithResponses) ManzilRecitationsWithResponse(ctx context.Context, recitationId float32, manzilNumber float32, reqEditors ...RequestEditorFn) (*ManzilRecitationsResponse, error) {
	rsp, err := c.ManzilRecitations(ctx, recitationId, manzilNumber, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseManzilRecitationsResponse(rsp)
}

// PageRecitationsWithResponse request returning *PageRecitationsResponse
func (c *ClientWithResponses) PageRecitationsWithResponse(ctx context.Context, recitationId float32, pageNumber float32, reqEditors ...RequestEditorFn) (*PageRecitationsResponse, error) {
	rsp, err := c.PageRecitations(ctx, recitationId, pageNumber, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePageRecitationsResponse(rsp)
}

// RubElHizbRecitationsWithResponse request returning *RubElHizbRecitationsResponse
func (c *ClientWithResponses) RubElHizbRecitationsWithResponse(ctx context.Context, recitationId float32, rubElHizbNumber float32, reqEditors ...RequestEditorFn) (*RubElHizbRecitationsResponse, error) {
	rsp, err := c.RubElHizbRecitations(ctx, recitationId, rubElHizbNumber, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseRubElHizbRecitationsResponse(rsp)
}

// RukuRecitationsWithResponse request returning *RukuRecitationsResponse
func (c *ClientWithResponses) RukuRecitationsWithResponse(ctx context.Context, recitationId float32, rukuNumber float32, reqEditors ...RequestEditorFn) (*RukuRecitationsResponse, error) {
	rsp, err := c.RukuRecitations(ctx, recitationId, rukuNumber, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseRukuRecitationsResponse(rsp)
}

// ChapterInfosWithResponse request returning *ChapterInfosResponse
func (c *ClientWithResponses) ChapterInfosWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*ChapterInfosResponse, error) {
	rsp, err := c.ChapterInfos(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseChapterInfosResponse(rsp)
}

// ChapterRecitersWithResponse request returning *ChapterRecitersResponse
func (c *ClientWithResponses) ChapterRecitersWithResponse(ctx context.Context, params *ChapterRecitersParams, reqEditors ...RequestEditorFn) (*ChapterRecitersResponse, error) {
	rsp, err := c.ChapterReciters(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseChapterRecitersResponse(rsp)
}

// LanguagesWithResponse request returning *LanguagesResponse
func (c *ClientWithResponses) LanguagesWithResponse(ctx context.Context, params *LanguagesParams, reqEditors ...RequestEditorFn) (*LanguagesResponse, error) {
	rsp, err := c.Languages(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseLanguagesResponse(rsp)
}

// RecitationStylesWithResponse request returning *RecitationStylesResponse
func (c *ClientWithResponses) RecitationStylesWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*RecitationStylesResponse, error) {
	rsp, err := c.RecitationStyles(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseRecitationStylesResponse(rsp)
}

// RecitationsWithResponse request returning *RecitationsResponse
func (c *ClientWithResponses) RecitationsWithResponse(ctx context.Context, params *RecitationsParams, reqEditors ...RequestEditorFn) (*RecitationsResponse, error) {
	rsp, err := c.Recitations(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseRecitationsResponse(rsp)
}

// RecitationInfoWithResponse request returning *RecitationInfoResponse
func (c *ClientWithResponses) RecitationInfoWithResponse(ctx context.Context, recitationId string, reqEditors ...RequestEditorFn) (*RecitationInfoResponse, error) {
	rsp, err := c.RecitationInfo(ctx, recitationId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseRecitationInfoResponse(rsp)
}

// TafsirsWithResponse request returning *TafsirsResponse
func (c *ClientWithResponses) TafsirsWithResponse(ctx context.Context, params *TafsirsParams, reqEditors ...RequestEditorFn) (*TafsirsResponse, error) {
	rsp, err := c.Tafsirs(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseTafsirsResponse(rsp)
}

// TafsirInfoWithResponse request returning *TafsirInfoResponse
func (c *ClientWithResponses) TafsirInfoWithResponse(ctx context.Context, tafsirId string, reqEditors ...RequestEditorFn) (*TafsirInfoResponse, error) {
	rsp, err := c.TafsirInfo(ctx, tafsirId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseTafsirInfoResponse(rsp)
}

// TranslationsWithResponse request returning *TranslationsResponse
func (c *ClientWithResponses) TranslationsWithResponse(ctx context.Context, params *TranslationsParams, reqEditors ...RequestEditorFn) (*TranslationsResponse, error) {
	rsp, err := c.Translations(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseTranslationsResponse(rsp)
}

// TranslationInfoWithResponse request returning *TranslationInfoResponse
func (c *ClientWithResponses) TranslationInfoWithResponse(ctx context.Context, translationId string, reqEditors ...RequestEditorFn) (*TranslationInfoResponse, error) {
	rsp, err := c.TranslationInfo(ctx, translationId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseTranslationInfoResponse(rsp)
}

// VerseMediaWithResponse request returning *VerseMediaResponse
func (c *ClientWithResponses) VerseMediaWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*VerseMediaResponse, error) {
	rsp, err := c.VerseMedia(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseVerseMediaResponse(rsp)
}

// SearchWithResponse request returning *SearchResponse
func (c *ClientWithResponses) SearchWithResponse(ctx context.Context, params *SearchParams, reqEditors ...RequestEditorFn) (*SearchResponse, error) {
	rsp, err := c.Search(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSearchResponse(rsp)
}

// AyahTafsirsWithResponse request returning *AyahTafsirsResponse
func (c *ClientWithResponses) AyahTafsirsWithResponse(ctx context.Context, resourceId float32, ayahKey string, reqEditors ...RequestEditorFn) (*AyahTafsirsResponse, error) {
	rsp, err := c.AyahTafsirs(ctx, resourceId, ayahKey, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAyahTafsirsResponse(rsp)
}

// ChapterTafsirsWithResponse request returning *ChapterTafsirsResponse
func (c *ClientWithResponses) ChapterTafsirsWithResponse(ctx context.Context, resourceId float32, chapterNumber float32, reqEditors ...RequestEditorFn) (*ChapterTafsirsResponse, error) {
	rsp, err := c.ChapterTafsirs(ctx, resourceId, chapterNumber, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseChapterTafsirsResponse(rsp)
}

// HizbTafsirsWithResponse request returning *HizbTafsirsResponse
func (c *ClientWithResponses) HizbTafsirsWithResponse(ctx context.Context, resourceId float32, hizbNumber float32, reqEditors ...RequestEditorFn) (*HizbTafsirsResponse, error) {
	rsp, err := c.HizbTafsirs(ctx, resourceId, hizbNumber, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseHizbTafsirsResponse(rsp)
}

// JuzTafsirsWithResponse request returning *JuzTafsirsResponse
func (c *ClientWithResponses) JuzTafsirsWithResponse(ctx context.Context, resourceId float32, juzNumber float32, reqEditors ...RequestEditorFn) (*JuzTafsirsResponse, error) {
	rsp, err := c.JuzTafsirs(ctx, resourceId, juzNumber, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseJuzTafsirsResponse(rsp)
}

// ManzilTafsirsWithResponse request returning *ManzilTafsirsResponse
func (c *ClientWithResponses) ManzilTafsirsWithResponse(ctx context.Context, resourceId float32, manzilNumber float32, reqEditors ...RequestEditorFn) (*ManzilTafsirsResponse, error) {
	rsp, err := c.ManzilTafsirs(ctx, resourceId, manzilNumber, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseManzilTafsirsResponse(rsp)
}

// PageTafsirsWithResponse request returning *PageTafsirsResponse
func (c *ClientWithResponses) PageTafsirsWithResponse(ctx context.Context, resourceId float32, pageNumber float32, reqEditors ...RequestEditorFn) (*PageTafsirsResponse, error) {
	rsp, err := c.PageTafsirs(ctx, resourceId, pageNumber, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePageTafsirsResponse(rsp)
}

// RubElHizbTafsirsWithResponse request returning *RubElHizbTafsirsResponse
func (c *ClientWithResponses) RubElHizbTafsirsWithResponse(ctx context.Context, resourceId float32, rubElHizbNumber float32, reqEditors ...RequestEditorFn) (*RubElHizbTafsirsResponse, error) {
	rsp, err := c.RubElHizbTafsirs(ctx, resourceId, rubElHizbNumber, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseRubElHizbTafsirsResponse(rsp)
}

// RukuTafsirsWithResponse request returning *RukuTafsirsResponse
func (c *ClientWithResponses) RukuTafsirsWithResponse(ctx context.Context, resourceId float32, rukuNumber float32, reqEditors ...RequestEditorFn) (*RukuTafsirsResponse, error) {
	rsp, err := c.RukuTafsirs(ctx, resourceId, rukuNumber, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseRukuTafsirsResponse(rsp)
}

// AyahTranslationsWithResponse request returning *AyahTranslationsResponse
func (c *ClientWithResponses) AyahTranslationsWithResponse(ctx context.Context, resourceId float32, ayahKey string, reqEditors ...RequestEditorFn) (*AyahTranslationsResponse, error) {
	rsp, err := c.AyahTranslations(ctx, resourceId, ayahKey, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAyahTranslationsResponse(rsp)
}

// ChapterTranslationsWithResponse request returning *ChapterTranslationsResponse
func (c *ClientWithResponses) ChapterTranslationsWithResponse(ctx context.Context, resourceId float32, chapterNumber float32, reqEditors ...RequestEditorFn) (*ChapterTranslationsResponse, error) {
	rsp, err := c.ChapterTranslations(ctx, resourceId, chapterNumber, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseChapterTranslationsResponse(rsp)
}

// HizbTranslationsWithResponse request returning *HizbTranslationsResponse
func (c *ClientWithResponses) HizbTranslationsWithResponse(ctx context.Context, resourceId float32, hizbNumber float32, reqEditors ...RequestEditorFn) (*HizbTranslationsResponse, error) {
	rsp, err := c.HizbTranslations(ctx, resourceId, hizbNumber, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseHizbTranslationsResponse(rsp)
}

// JuzTranslationsWithResponse request returning *JuzTranslationsResponse
func (c *ClientWithResponses) JuzTranslationsWithResponse(ctx context.Context, resourceId float32, juzNumber float32, reqEditors ...RequestEditorFn) (*JuzTranslationsResponse, error) {
	rsp, err := c.JuzTranslations(ctx, resourceId, juzNumber, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseJuzTranslationsResponse(rsp)
}

// ManzilTranslationsWithResponse request returning *ManzilTranslationsResponse
func (c *ClientWithResponses) ManzilTranslationsWithResponse(ctx context.Context, resourceId float32, manzilNumber float32, reqEditors ...RequestEditorFn) (*ManzilTranslationsResponse, error) {
	rsp, err := c.ManzilTranslations(ctx, resourceId, manzilNumber, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseManzilTranslationsResponse(rsp)
}

// PageTranslationsWithResponse request returning *PageTranslationsResponse
func (c *ClientWithResponses) PageTranslationsWithResponse(ctx context.Context, resourceId float32, pageNumber float32, reqEditors ...RequestEditorFn) (*PageTranslationsResponse, error) {
	rsp, err := c.PageTranslations(ctx, resourceId, pageNumber, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePageTranslationsResponse(rsp)
}

// RubElHizbTranslationsWithResponse request returning *RubElHizbTranslationsResponse
func (c *ClientWithResponses) RubElHizbTranslationsWithResponse(ctx context.Context, resourceId float32, rubElHizbNumber float32, reqEditors ...RequestEditorFn) (*RubElHizbTranslationsResponse, error) {
	rsp, err := c.RubElHizbTranslations(ctx, resourceId, rubElHizbNumber, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseRubElHizbTranslationsResponse(rsp)
}

// RukuTranslationsWithResponse request returning *RukuTranslationsResponse
func (c *ClientWithResponses) RukuTranslationsWithResponse(ctx context.Context, resourceId float32, rukuNumber float32, reqEditors ...RequestEditorFn) (*RukuTranslationsResponse, error) {
	rsp, err := c.RukuTranslations(ctx, resourceId, rukuNumber, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseRukuTranslationsResponse(rsp)
}

// VersesByChapterNumberWithResponse request returning *VersesByChapterNumberResponse
func (c *ClientWithResponses) VersesByChapterNumberWithResponse(ctx context.Context, chapterNumber int, params *VersesByChapterNumberParams, reqEditors ...RequestEditorFn) (*VersesByChapterNumberResponse, error) {
	rsp, err := c.VersesByChapterNumber(ctx, chapterNumber, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseVersesByChapterNumberResponse(rsp)
}

// VersesByHizbNumberWithResponse request returning *VersesByHizbNumberResponse
func (c *ClientWithResponses) VersesByHizbNumberWithResponse(ctx context.Context, hizbNumber int, params *VersesByHizbNumberParams, reqEditors ...RequestEditorFn) (*VersesByHizbNumberResponse, error) {
	rsp, err := c.VersesByHizbNumber(ctx, hizbNumber, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseVersesByHizbNumberResponse(rsp)
}

// VersesByJuzNumberWithResponse request returning *VersesByJuzNumberResponse
func (c *ClientWithResponses) VersesByJuzNumberWithResponse(ctx context.Context, juzNumber int, params *VersesByJuzNumberParams, reqEditors ...RequestEditorFn) (*VersesByJuzNumberResponse, error) {
	rsp, err := c.VersesByJuzNumber(ctx, juzNumber, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseVersesByJuzNumberResponse(rsp)
}

// VersesByVerseKeyWithResponse request returning *VersesByVerseKeyResponse
func (c *ClientWithResponses) VersesByVerseKeyWithResponse(ctx context.Context, verseKey string, params *VersesByVerseKeyParams, reqEditors ...RequestEditorFn) (*VersesByVerseKeyResponse, error) {
	rsp, err := c.VersesByVerseKey(ctx, verseKey, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseVersesByVerseKeyResponse(rsp)
}

// VersesByPageNumberWithResponse request returning *VersesByPageNumberResponse
func (c *ClientWithResponses) VersesByPageNumberWithResponse(ctx context.Context, pageNumber int, params *VersesByPageNumberParams, reqEditors ...RequestEditorFn) (*VersesByPageNumberResponse, error) {
	rsp, err := c.VersesByPageNumber(ctx, pageNumber, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseVersesByPageNumberResponse(rsp)
}

// VersesByRubElHizbNumberWithResponse request returning *VersesByRubElHizbNumberResponse
func (c *ClientWithResponses) VersesByRubElHizbNumberWithResponse(ctx context.Context, rubElHizbNumber int, params *VersesByRubElHizbNumberParams, reqEditors ...RequestEditorFn) (*VersesByRubElHizbNumberResponse, error) {
	rsp, err := c.VersesByRubElHizbNumber(ctx, rubElHizbNumber, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseVersesByRubElHizbNumberResponse(rsp)
}

// RandomVerseWithResponse request returning *RandomVerseResponse
func (c *ClientWithResponses) RandomVerseWithResponse(ctx context.Context, params *RandomVerseParams, reqEditors ...RequestEditorFn) (*RandomVerseResponse, error) {
	rsp, err := c.RandomVerse(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseRandomVerseResponse(rsp)
}

// ParseChapterReciterAudioFilesResponse parses an HTTP response from a ChapterReciterAudioFilesWithResponse call
func ParseChapterReciterAudioFilesResponse(rsp *http.Response) (*ChapterReciterAudioFilesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ChapterReciterAudioFilesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			AudioFiles []ChapterRecitation `json:"audio_files"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest InvalidRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Forbidden
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest UnprocessableEntity
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest RateLimitExceeded
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest InternalServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 502:
		var dest BadGateway
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON502 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest ServiceUnavailable
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 504:
		var dest GatewayTimeout
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON504 = &dest

	}

	return response, nil
}

// ParseChapterReciterAudioFileResponse parses an HTTP response from a ChapterReciterAudioFileWithResponse call
func ParseChapterReciterAudioFileResponse(rsp *http.Response) (*ChapterReciterAudioFileResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ChapterReciterAudioFileResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			AudioFile *ChapterRecitation `json:"audio_file,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest InvalidRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Forbidden
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest UnprocessableEntity
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest RateLimitExceeded
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest InternalServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 502:
		var dest BadGateway
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON502 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest ServiceUnavailable
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 504:
		var dest GatewayTimeout
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON504 = &dest

	}

	return response, nil
}

// ParseChaptersResponse parses an HTTP response from a ChaptersWithResponse call
func ParseChaptersResponse(rsp *http.Response) (*ChaptersResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ChaptersResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Chapters *[]map[string]interface{} `json:"chapters,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest InvalidRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Forbidden
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest UnprocessableEntity
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest RateLimitExceeded
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest InternalServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 502:
		var dest BadGateway
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON502 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest ServiceUnavailable
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 504:
		var dest GatewayTimeout
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON504 = &dest

	}

	return response, nil
}

// ParseChapterInfoResponse parses an HTTP response from a ChapterInfoWithResponse call
func ParseChapterInfoResponse(rsp *http.Response) (*ChapterInfoResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ChapterInfoResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			ChapterInfo *ChapterInfo `json:"chapter_info,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest InvalidRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Forbidden
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest UnprocessableEntity
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest RateLimitExceeded
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest InternalServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 502:
		var dest BadGateway
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON502 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest ServiceUnavailable
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 504:
		var dest GatewayTimeout
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON504 = &dest

	}

	return response, nil
}

// ParseChapterResponse parses an HTTP response from a ChapterWithResponse call
func ParseChapterResponse(rsp *http.Response) (*ChapterResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ChapterResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Chapter *Chapter `json:"chapter,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest InvalidRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Forbidden
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest UnprocessableEntity
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest RateLimitExceeded
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest InternalServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 502:
		var dest BadGateway
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON502 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest ServiceUnavailable
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 504:
		var dest GatewayTimeout
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON504 = &dest

	}

	return response, nil
}

// ParseJuzsResponse parses an HTTP response from a JuzsWithResponse call
func ParseJuzsResponse(rsp *http.Response) (*JuzsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &JuzsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest map[string]interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseRecitationAudioFilesResponse parses an HTTP response from a RecitationAudioFilesWithResponse call
func ParseRecitationAudioFilesResponse(rsp *http.Response) (*RecitationAudioFilesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &RecitationAudioFilesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			AudioFiles []Audiofile `json:"audio_files"`
			Meta       *struct {
				ReciterName *string `json:"reciter_name,omitempty"`
			} `json:"meta,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest InvalidRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Forbidden
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest UnprocessableEntity
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest RateLimitExceeded
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest InternalServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 502:
		var dest BadGateway
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON502 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest ServiceUnavailable
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 504:
		var dest GatewayTimeout
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON504 = &dest

	}

	return response, nil
}

// ParseTafsirResponse parses an HTTP response from a TafsirWithResponse call
func ParseTafsirResponse(rsp *http.Response) (*TafsirResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &TafsirResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Meta *struct {
				TafsirName *string `json:"tafsir_name,omitempty"`
			} `json:"meta,omitempty"`
			Tafsirs []Tafsir `json:"tafsirs"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest InvalidRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Forbidden
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest UnprocessableEntity
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest RateLimitExceeded
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest InternalServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 502:
		var dest BadGateway
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON502 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest ServiceUnavailable
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 504:
		var dest GatewayTimeout
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON504 = &dest

	}

	return response, nil
}

// ParseTranslationResponse parses an HTTP response from a TranslationWithResponse call
func ParseTranslationResponse(rsp *http.Response) (*TranslationResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &TranslationResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Meta *struct {
				TranslationName *string `json:"translation_name,omitempty"`
			} `json:"meta,omitempty"`
			Translations []Translation `json:"translations"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest InvalidRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Forbidden
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest UnprocessableEntity
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest RateLimitExceeded
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest InternalServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 502:
		var dest BadGateway
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON502 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest ServiceUnavailable
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 504:
		var dest GatewayTimeout
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON504 = &dest

	}

	return response, nil
}

// ParseQuranVersesCodeV1Response parses an HTTP response from a QuranVersesCodeV1WithResponse call
func ParseQuranVersesCodeV1Response(rsp *http.Response) (*QuranVersesCodeV1Response, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &QuranVersesCodeV1Response{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Verses *[]struct {
				// CodeV1 Glyph codes for v1
				CodeV1 *string `json:"code_v1,omitempty"`
				Id     *int    `json:"id,omitempty"`

				// V1Page Madani Mushaf page number. You can use `v1_page` to generate css and font faces for QCF page font.
				V1Page   *int    `json:"v1_page,omitempty"`
				VerseKey *string `json:"verse_key,omitempty"`
			} `json:"verses,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest InvalidRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Forbidden
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest UnprocessableEntity
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest RateLimitExceeded
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest InternalServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 502:
		var dest BadGateway
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON502 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest ServiceUnavailable
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 504:
		var dest GatewayTimeout
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON504 = &dest

	}

	return response, nil
}

// ParseQuranVersesCodeV2Response parses an HTTP response from a QuranVersesCodeV2WithResponse call
func ParseQuranVersesCodeV2Response(rsp *http.Response) (*QuranVersesCodeV2Response, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &QuranVersesCodeV2Response{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Verses *[]struct {
				// CodeV2 Glyph codes for v2
				CodeV2 string `json:"code_v2"`
				Id     *int   `json:"id,omitempty"`

				// V2Page Madani Mushaf page number. You can use `v2_page` to generate css and font faces for QCF page font.
				V2Page   int     `json:"v2_page"`
				VerseKey *string `json:"verse_key,omitempty"`
			} `json:"verses,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest InvalidRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Forbidden
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest UnprocessableEntity
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest RateLimitExceeded
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest InternalServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 502:
		var dest BadGateway
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON502 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest ServiceUnavailable
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 504:
		var dest GatewayTimeout
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON504 = &dest

	}

	return response, nil
}

// ParseQuranVersesImlaeiResponse parses an HTTP response from a QuranVersesImlaeiWithResponse call
func ParseQuranVersesImlaeiResponse(rsp *http.Response) (*QuranVersesImlaeiResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &QuranVersesImlaeiResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Verses *[]struct {
				Id         *int    `json:"id,omitempty"`
				TextImlaei *string `json:"text_imlaei,omitempty"`
				VerseKey   *string `json:"verse_key,omitempty"`
			} `json:"verses,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest InvalidRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Forbidden
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest UnprocessableEntity
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest RateLimitExceeded
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest InternalServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 502:
		var dest BadGateway
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON502 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest ServiceUnavailable
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 504:
		var dest GatewayTimeout
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON504 = &dest

	}

	return response, nil
}

// ParseQuranVersesIndopakResponse parses an HTTP response from a QuranVersesIndopakWithResponse call
func ParseQuranVersesIndopakResponse(rsp *http.Response) (*QuranVersesIndopakResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &QuranVersesIndopakResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Verses *[]struct {
				Id          *int    `json:"id,omitempty"`
				TextIndopak *string `json:"text_indopak,omitempty"`
				VerseKey    *string `json:"verse_key,omitempty"`
			} `json:"verses,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest InvalidRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Forbidden
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest UnprocessableEntity
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest RateLimitExceeded
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest InternalServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 502:
		var dest BadGateway
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON502 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest ServiceUnavailable
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 504:
		var dest GatewayTimeout
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON504 = &dest

	}

	return response, nil
}

// ParseQuranVersesUthmaniResponse parses an HTTP response from a QuranVersesUthmaniWithResponse call
func ParseQuranVersesUthmaniResponse(rsp *http.Response) (*QuranVersesUthmaniResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &QuranVersesUthmaniResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Verses *[]struct {
				Id          *int    `json:"id,omitempty"`
				TextUthmani *string `json:"text_uthmani,omitempty"`
				VerseKey    *string `json:"verse_key,omitempty"`
			} `json:"verses,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest InvalidRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Forbidden
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest UnprocessableEntity
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest RateLimitExceeded
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest InternalServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 502:
		var dest BadGateway
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON502 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest ServiceUnavailable
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 504:
		var dest GatewayTimeout
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON504 = &dest

	}

	return response, nil
}

// ParseQuranVersesUthmaniSimpleResponse parses an HTTP response from a QuranVersesUthmaniSimpleWithResponse call
func ParseQuranVersesUthmaniSimpleResponse(rsp *http.Response) (*QuranVersesUthmaniSimpleResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &QuranVersesUthmaniSimpleResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Verses *[]struct {
				Id                *int    `json:"id,omitempty"`
				TextUthmaniSimple *string `json:"text_uthmani_simple,omitempty"`
				VerseKey          *string `json:"verse_key,omitempty"`
			} `json:"verses,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest InvalidRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Forbidden
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest UnprocessableEntity
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest RateLimitExceeded
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest InternalServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 502:
		var dest BadGateway
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON502 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest ServiceUnavailable
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 504:
		var dest GatewayTimeout
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON504 = &dest

	}

	return response, nil
}

// ParseQuranVersesUthmaniTajweedResponse parses an HTTP response from a QuranVersesUthmaniTajweedWithResponse call
func ParseQuranVersesUthmaniTajweedResponse(rsp *http.Response) (*QuranVersesUthmaniTajweedResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &QuranVersesUthmaniTajweedResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Verses *[]struct {
				Id                 *int    `json:"id,omitempty"`
				TextUthmaniTajweed *string `json:"text_uthmani_tajweed,omitempty"`
				VerseKey           *string `json:"verse_key,omitempty"`
			} `json:"verses,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest InvalidRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Forbidden
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest UnprocessableEntity
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest RateLimitExceeded
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest InternalServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 502:
		var dest BadGateway
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON502 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest ServiceUnavailable
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 504:
		var dest GatewayTimeout
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON504 = &dest

	}

	return response, nil
}

// ParseAyahRecitationsResponse parses an HTTP response from a AyahRecitationsWithResponse call
func ParseAyahRecitationsResponse(rsp *http.Response) (*AyahRecitationsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AyahRecitationsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			AudioFiles []Audiofile `json:"audio_files"`
			Pagination Pagination  `json:"pagination"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest InvalidRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Forbidden
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest UnprocessableEntity
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest RateLimitExceeded
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest InternalServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 502:
		var dest BadGateway
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON502 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest ServiceUnavailable
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 504:
		var dest GatewayTimeout
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON504 = &dest

	}

	return response, nil
}

// ParseChapterRecitationsResponse parses an HTTP response from a ChapterRecitationsWithResponse call
func ParseChapterRecitationsResponse(rsp *http.Response) (*ChapterRecitationsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ChapterRecitationsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			AudioFiles *[]Audiofile `json:"audio_files,omitempty"`
			Pagination *Pagination  `json:"pagination,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest InvalidRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Forbidden
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest UnprocessableEntity
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest RateLimitExceeded
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest InternalServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 502:
		var dest BadGateway
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON502 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest ServiceUnavailable
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 504:
		var dest GatewayTimeout
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON504 = &dest

	}

	return response, nil
}

// ParseHizbRecitationsResponse parses an HTTP response from a HizbRecitationsWithResponse call
func ParseHizbRecitationsResponse(rsp *http.Response) (*HizbRecitationsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &HizbRecitationsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			AudioFiles []Audiofile `json:"audio_files"`
			Pagination Pagination  `json:"pagination"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest InvalidRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Forbidden
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest UnprocessableEntity
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest RateLimitExceeded
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest InternalServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 502:
		var dest BadGateway
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON502 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest ServiceUnavailable
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 504:
		var dest GatewayTimeout
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON504 = &dest

	}

	return response, nil
}

// ParseJuzRecitationsResponse parses an HTTP response from a JuzRecitationsWithResponse call
func ParseJuzRecitationsResponse(rsp *http.Response) (*JuzRecitationsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &JuzRecitationsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			AudioFiles []Audiofile `json:"audio_files"`
			Pagination Pagination  `json:"pagination"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest InvalidRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Forbidden
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest UnprocessableEntity
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest RateLimitExceeded
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest InternalServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 502:
		var dest BadGateway
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON502 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest ServiceUnavailable
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 504:
		var dest GatewayTimeout
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON504 = &dest

	}

	return response, nil
}

// ParseManzilRecitationsResponse parses an HTTP response from a ManzilRecitationsWithResponse call
func ParseManzilRecitationsResponse(rsp *http.Response) (*ManzilRecitationsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ManzilRecitationsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			AudioFiles []Audiofile `json:"audio_files"`
			Pagination Pagination  `json:"pagination"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest InvalidRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Forbidden
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest UnprocessableEntity
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest RateLimitExceeded
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest InternalServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 502:
		var dest BadGateway
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON502 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest ServiceUnavailable
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 504:
		var dest GatewayTimeout
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON504 = &dest

	}

	return response, nil
}

// ParsePageRecitationsResponse parses an HTTP response from a PageRecitationsWithResponse call
func ParsePageRecitationsResponse(rsp *http.Response) (*PageRecitationsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PageRecitationsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			AudioFiles []Audiofile `json:"audio_files"`
			Pagination Pagination  `json:"pagination"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest InvalidRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Forbidden
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest UnprocessableEntity
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest RateLimitExceeded
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest InternalServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 502:
		var dest BadGateway
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON502 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest ServiceUnavailable
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 504:
		var dest GatewayTimeout
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON504 = &dest

	}

	return response, nil
}

// ParseRubElHizbRecitationsResponse parses an HTTP response from a RubElHizbRecitationsWithResponse call
func ParseRubElHizbRecitationsResponse(rsp *http.Response) (*RubElHizbRecitationsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &RubElHizbRecitationsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			AudioFiles []Audiofile `json:"audio_files"`
			Pagination Pagination  `json:"pagination"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest InvalidRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Forbidden
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest UnprocessableEntity
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest RateLimitExceeded
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest InternalServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 502:
		var dest BadGateway
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON502 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest ServiceUnavailable
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 504:
		var dest GatewayTimeout
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON504 = &dest

	}

	return response, nil
}

// ParseRukuRecitationsResponse parses an HTTP response from a RukuRecitationsWithResponse call
func ParseRukuRecitationsResponse(rsp *http.Response) (*RukuRecitationsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &RukuRecitationsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			AudioFiles []Audiofile `json:"audio_files"`
			Pagination Pagination  `json:"pagination"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest InvalidRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Forbidden
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest UnprocessableEntity
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest RateLimitExceeded
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest InternalServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 502:
		var dest BadGateway
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON502 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest ServiceUnavailable
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 504:
		var dest GatewayTimeout
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON504 = &dest

	}

	return response, nil
}

// ParseChapterInfosResponse parses an HTTP response from a ChapterInfosWithResponse call
func ParseChapterInfosResponse(rsp *http.Response) (*ChapterInfosResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ChapterInfosResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			ChapterInfos *[]struct {
				AuthorName     *string `json:"author_name,omitempty"`
				Id             *int    `json:"id,omitempty"`
				LanguageName   *string `json:"language_name,omitempty"`
				Name           *string `json:"name,omitempty"`
				TranslatedName *struct {
					LanguageName *string `json:"language_name,omitempty"`
					Name         *string `json:"name,omitempty"`
				} `json:"translated_name,omitempty"`
			} `json:"chapter_infos,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest InvalidRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Forbidden
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest UnprocessableEntity
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest RateLimitExceeded
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest InternalServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 502:
		var dest BadGateway
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON502 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest ServiceUnavailable
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 504:
		var dest GatewayTimeout
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON504 = &dest

	}

	return response, nil
}

// ParseChapterRecitersResponse parses an HTTP response from a ChapterRecitersWithResponse call
func ParseChapterRecitersResponse(rsp *http.Response) (*ChapterRecitersResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ChapterRecitersResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Reciters *[]ChapterReciters `json:"reciters,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest InvalidRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Forbidden
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest UnprocessableEntity
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest RateLimitExceeded
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest InternalServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 502:
		var dest BadGateway
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON502 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest ServiceUnavailable
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 504:
		var dest GatewayTimeout
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON504 = &dest

	}

	return response, nil
}

// ParseLanguagesResponse parses an HTTP response from a LanguagesWithResponse call
func ParseLanguagesResponse(rsp *http.Response) (*LanguagesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &LanguagesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []Language
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest InvalidRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Forbidden
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest UnprocessableEntity
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest RateLimitExceeded
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest InternalServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 502:
		var dest BadGateway
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON502 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest ServiceUnavailable
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 504:
		var dest GatewayTimeout
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON504 = &dest

	}

	return response, nil
}

// ParseRecitationStylesResponse parses an HTTP response from a RecitationStylesWithResponse call
func ParseRecitationStylesResponse(rsp *http.Response) (*RecitationStylesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &RecitationStylesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Muallim  *string `json:"muallim,omitempty"`
			Mujawwad *string `json:"mujawwad,omitempty"`
			Murattal *string `json:"murattal,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest InvalidRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Forbidden
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest UnprocessableEntity
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest RateLimitExceeded
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest InternalServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 502:
		var dest BadGateway
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON502 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest ServiceUnavailable
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 504:
		var dest GatewayTimeout
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON504 = &dest

	}

	return response, nil
}

// ParseRecitationsResponse parses an HTTP response from a RecitationsWithResponse call
func ParseRecitationsResponse(rsp *http.Response) (*RecitationsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &RecitationsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []Recitation
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest InvalidRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Forbidden
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest UnprocessableEntity
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest RateLimitExceeded
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest InternalServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 502:
		var dest BadGateway
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON502 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest ServiceUnavailable
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 504:
		var dest GatewayTimeout
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON504 = &dest

	}

	return response, nil
}

// ParseRecitationInfoResponse parses an HTTP response from a RecitationInfoWithResponse call
func ParseRecitationInfoResponse(rsp *http.Response) (*RecitationInfoResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &RecitationInfoResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Info *struct {
				Id *int `json:"id,omitempty"`
			} `json:"info,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest InvalidRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Forbidden
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest UnprocessableEntity
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest RateLimitExceeded
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest InternalServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 502:
		var dest BadGateway
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON502 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest ServiceUnavailable
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 504:
		var dest GatewayTimeout
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON504 = &dest

	}

	return response, nil
}

// ParseTafsirsResponse parses an HTTP response from a TafsirsWithResponse call
func ParseTafsirsResponse(rsp *http.Response) (*TafsirsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &TafsirsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Tafsirs *[]Resource `json:"tafsirs,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest InvalidRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Forbidden
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest UnprocessableEntity
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest RateLimitExceeded
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest InternalServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 502:
		var dest BadGateway
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON502 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest ServiceUnavailable
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 504:
		var dest GatewayTimeout
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON504 = &dest

	}

	return response, nil
}

// ParseTafsirInfoResponse parses an HTTP response from a TafsirInfoWithResponse call
func ParseTafsirInfoResponse(rsp *http.Response) (*TafsirInfoResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &TafsirInfoResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Id *float32 `json:"id,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest InvalidRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Forbidden
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest UnprocessableEntity
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest RateLimitExceeded
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest InternalServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 502:
		var dest BadGateway
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON502 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest ServiceUnavailable
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 504:
		var dest GatewayTimeout
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON504 = &dest

	}

	return response, nil
}

// ParseTranslationsResponse parses an HTTP response from a TranslationsWithResponse call
func ParseTranslationsResponse(rsp *http.Response) (*TranslationsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &TranslationsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Translations *[]Resource `json:"translations,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest InvalidRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Forbidden
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest UnprocessableEntity
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest RateLimitExceeded
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest InternalServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 502:
		var dest BadGateway
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON502 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest ServiceUnavailable
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 504:
		var dest GatewayTimeout
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON504 = &dest

	}

	return response, nil
}

// ParseTranslationInfoResponse parses an HTTP response from a TranslationInfoWithResponse call
func ParseTranslationInfoResponse(rsp *http.Response) (*TranslationInfoResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &TranslationInfoResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Info *struct {
				Id *int `json:"id,omitempty"`
			} `json:"info,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest InvalidRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Forbidden
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest UnprocessableEntity
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest RateLimitExceeded
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest InternalServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 502:
		var dest BadGateway
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON502 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest ServiceUnavailable
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 504:
		var dest GatewayTimeout
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON504 = &dest

	}

	return response, nil
}

// ParseVerseMediaResponse parses an HTTP response from a VerseMediaWithResponse call
func ParseVerseMediaResponse(rsp *http.Response) (*VerseMediaResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &VerseMediaResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			AuthorName   *string  `json:"author_name,omitempty"`
			Id           *float32 `json:"id,omitempty"`
			LanguageName *string  `json:"language_name,omitempty"`
			Name         *string  `json:"name,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest InvalidRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Forbidden
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest UnprocessableEntity
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest RateLimitExceeded
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest InternalServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 502:
		var dest BadGateway
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON502 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest ServiceUnavailable
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 504:
		var dest GatewayTimeout
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON504 = &dest

	}

	return response, nil
}

// ParseSearchResponse parses an HTTP response from a SearchWithResponse call
func ParseSearchResponse(rsp *http.Response) (*SearchResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &SearchResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest map[string]interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseAyahTafsirsResponse parses an HTTP response from a AyahTafsirsWithResponse call
func ParseAyahTafsirsResponse(rsp *http.Response) (*AyahTafsirsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AyahTafsirsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Tafsir *struct {
				LanguageId   int    `json:"language_id"`
				ResourceId   int    `json:"resource_id"`
				ResourceName string `json:"resource_name"`
				Slug         string `json:"slug"`

				// Text HTML-formatted tafsir body
				Text           string `json:"text"`
				TranslatedName struct {
					LanguageName string `json:"language_name"`
					Name         string `json:"name"`
				} `json:"translated_name"`

				// Verses Hash map of ayah_key → tafsir-record
				Verses map[string]struct {
					Id int `json:"id"`
				} `json:"verses"`
			} `json:"tafsir,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest InvalidRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Forbidden
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest UnprocessableEntity
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest RateLimitExceeded
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest InternalServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 502:
		var dest BadGateway
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON502 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest ServiceUnavailable
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 504:
		var dest GatewayTimeout
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON504 = &dest

	}

	return response, nil
}

// ParseChapterTafsirsResponse parses an HTTP response from a ChapterTafsirsWithResponse call
func ParseChapterTafsirsResponse(rsp *http.Response) (*ChapterTafsirsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ChapterTafsirsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Pagination *Pagination `json:"pagination,omitempty"`
			Tafsirs    *[]Tafsir   `json:"tafsirs,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest InvalidRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Forbidden
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest UnprocessableEntity
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest RateLimitExceeded
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest InternalServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 502:
		var dest BadGateway
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON502 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest ServiceUnavailable
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 504:
		var dest GatewayTimeout
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON504 = &dest

	}

	return response, nil
}

// ParseHizbTafsirsResponse parses an HTTP response from a HizbTafsirsWithResponse call
func ParseHizbTafsirsResponse(rsp *http.Response) (*HizbTafsirsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &HizbTafsirsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Pagination *Pagination `json:"pagination,omitempty"`
			Tafsirs    *[]Tafsir   `json:"tafsirs,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest InvalidRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Forbidden
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest UnprocessableEntity
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest RateLimitExceeded
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest InternalServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 502:
		var dest BadGateway
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON502 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest ServiceUnavailable
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 504:
		var dest GatewayTimeout
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON504 = &dest

	}

	return response, nil
}

// ParseJuzTafsirsResponse parses an HTTP response from a JuzTafsirsWithResponse call
func ParseJuzTafsirsResponse(rsp *http.Response) (*JuzTafsirsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &JuzTafsirsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Pagination *Pagination `json:"pagination,omitempty"`
			Tafsirs    *[]Tafsir   `json:"tafsirs,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest InvalidRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Forbidden
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest UnprocessableEntity
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest RateLimitExceeded
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest InternalServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 502:
		var dest BadGateway
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON502 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest ServiceUnavailable
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 504:
		var dest GatewayTimeout
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON504 = &dest

	}

	return response, nil
}

// ParseManzilTafsirsResponse parses an HTTP response from a ManzilTafsirsWithResponse call
func ParseManzilTafsirsResponse(rsp *http.Response) (*ManzilTafsirsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ManzilTafsirsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Pagination *Pagination `json:"pagination,omitempty"`
			Tafsirs    *[]Tafsir   `json:"tafsirs,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest InvalidRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Forbidden
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest UnprocessableEntity
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest RateLimitExceeded
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest InternalServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 502:
		var dest BadGateway
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON502 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest ServiceUnavailable
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 504:
		var dest GatewayTimeout
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON504 = &dest

	}

	return response, nil
}

// ParsePageTafsirsResponse parses an HTTP response from a PageTafsirsWithResponse call
func ParsePageTafsirsResponse(rsp *http.Response) (*PageTafsirsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PageTafsirsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Pagination *Pagination `json:"pagination,omitempty"`
			Tafsirs    *[]Tafsir   `json:"tafsirs,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest InvalidRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Forbidden
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest UnprocessableEntity
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest RateLimitExceeded
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest InternalServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 502:
		var dest BadGateway
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON502 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest ServiceUnavailable
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 504:
		var dest GatewayTimeout
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON504 = &dest

	}

	return response, nil
}

// ParseRubElHizbTafsirsResponse parses an HTTP response from a RubElHizbTafsirsWithResponse call
func ParseRubElHizbTafsirsResponse(rsp *http.Response) (*RubElHizbTafsirsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &RubElHizbTafsirsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Pagination *Pagination `json:"pagination,omitempty"`
			Tafsirs    *[]Tafsir   `json:"tafsirs,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest InvalidRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Forbidden
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest UnprocessableEntity
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest RateLimitExceeded
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest InternalServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 502:
		var dest BadGateway
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON502 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest ServiceUnavailable
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 504:
		var dest GatewayTimeout
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON504 = &dest

	}

	return response, nil
}

// ParseRukuTafsirsResponse parses an HTTP response from a RukuTafsirsWithResponse call
func ParseRukuTafsirsResponse(rsp *http.Response) (*RukuTafsirsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &RukuTafsirsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Pagination *Pagination `json:"pagination,omitempty"`
			Tafsirs    *[]Tafsir   `json:"tafsirs,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest InvalidRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Forbidden
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest UnprocessableEntity
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest RateLimitExceeded
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest InternalServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 502:
		var dest BadGateway
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON502 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest ServiceUnavailable
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 504:
		var dest GatewayTimeout
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON504 = &dest

	}

	return response, nil
}

// ParseAyahTranslationsResponse parses an HTTP response from a AyahTranslationsWithResponse call
func ParseAyahTranslationsResponse(rsp *http.Response) (*AyahTranslationsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AyahTranslationsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Translations *[]Translation `json:"translations,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest InvalidRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Forbidden
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest UnprocessableEntity
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest RateLimitExceeded
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest InternalServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 502:
		var dest BadGateway
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON502 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest ServiceUnavailable
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 504:
		var dest GatewayTimeout
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON504 = &dest

	}

	return response, nil
}

// ParseChapterTranslationsResponse parses an HTTP response from a ChapterTranslationsWithResponse call
func ParseChapterTranslationsResponse(rsp *http.Response) (*ChapterTranslationsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ChapterTranslationsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Pagination   *Pagination    `json:"pagination,omitempty"`
			Translations *[]Translation `json:"translations,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest InvalidRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Forbidden
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest UnprocessableEntity
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest RateLimitExceeded
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest InternalServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 502:
		var dest BadGateway
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON502 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest ServiceUnavailable
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 504:
		var dest GatewayTimeout
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON504 = &dest

	}

	return response, nil
}

// ParseHizbTranslationsResponse parses an HTTP response from a HizbTranslationsWithResponse call
func ParseHizbTranslationsResponse(rsp *http.Response) (*HizbTranslationsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &HizbTranslationsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Pagination   *Pagination    `json:"pagination,omitempty"`
			Translations *[]Translation `json:"translations,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest InvalidRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Forbidden
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest UnprocessableEntity
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest RateLimitExceeded
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest InternalServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 502:
		var dest BadGateway
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON502 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest ServiceUnavailable
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 504:
		var dest GatewayTimeout
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON504 = &dest

	}

	return response, nil
}

// ParseJuzTranslationsResponse parses an HTTP response from a JuzTranslationsWithResponse call
func ParseJuzTranslationsResponse(rsp *http.Response) (*JuzTranslationsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &JuzTranslationsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Pagination   *Pagination    `json:"pagination,omitempty"`
			Translations *[]Translation `json:"translations,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest InvalidRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Forbidden
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest UnprocessableEntity
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest RateLimitExceeded
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest InternalServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 502:
		var dest BadGateway
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON502 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest ServiceUnavailable
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 504:
		var dest GatewayTimeout
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON504 = &dest

	}

	return response, nil
}

// ParseManzilTranslationsResponse parses an HTTP response from a ManzilTranslationsWithResponse call
func ParseManzilTranslationsResponse(rsp *http.Response) (*ManzilTranslationsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ManzilTranslationsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Pagination   *Pagination    `json:"pagination,omitempty"`
			Translations *[]Translation `json:"translations,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest InvalidRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Forbidden
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest UnprocessableEntity
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest RateLimitExceeded
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest InternalServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 502:
		var dest BadGateway
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON502 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest ServiceUnavailable
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 504:
		var dest GatewayTimeout
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON504 = &dest

	}

	return response, nil
}

// ParsePageTranslationsResponse parses an HTTP response from a PageTranslationsWithResponse call
func ParsePageTranslationsResponse(rsp *http.Response) (*PageTranslationsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PageTranslationsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Pagination   *Pagination    `json:"pagination,omitempty"`
			Translations *[]Translation `json:"translations,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest InvalidRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Forbidden
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest UnprocessableEntity
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest RateLimitExceeded
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest InternalServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 502:
		var dest BadGateway
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON502 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest ServiceUnavailable
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 504:
		var dest GatewayTimeout
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON504 = &dest

	}

	return response, nil
}

// ParseRubElHizbTranslationsResponse parses an HTTP response from a RubElHizbTranslationsWithResponse call
func ParseRubElHizbTranslationsResponse(rsp *http.Response) (*RubElHizbTranslationsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &RubElHizbTranslationsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Pagination   *Pagination    `json:"pagination,omitempty"`
			Translations *[]Translation `json:"translations,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest InvalidRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Forbidden
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest UnprocessableEntity
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest RateLimitExceeded
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest InternalServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 502:
		var dest BadGateway
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON502 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest ServiceUnavailable
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 504:
		var dest GatewayTimeout
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON504 = &dest

	}

	return response, nil
}

// ParseRukuTranslationsResponse parses an HTTP response from a RukuTranslationsWithResponse call
func ParseRukuTranslationsResponse(rsp *http.Response) (*RukuTranslationsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &RukuTranslationsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Pagination   *Pagination    `json:"pagination,omitempty"`
			Translations *[]Translation `json:"translations,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest InvalidRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Forbidden
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest UnprocessableEntity
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest RateLimitExceeded
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest InternalServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 502:
		var dest BadGateway
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON502 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest ServiceUnavailable
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 504:
		var dest GatewayTimeout
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON504 = &dest

	}

	return response, nil
}

// ParseVersesByChapterNumberResponse parses an HTTP response from a VersesByChapterNumberWithResponse call
func ParseVersesByChapterNumberResponse(rsp *http.Response) (*VersesByChapterNumberResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &VersesByChapterNumberResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Pagination *Pagination `json:"pagination,omitempty"`
			Verses     *[]Verse    `json:"verses,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest InvalidRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Forbidden
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest UnprocessableEntity
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest RateLimitExceeded
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest InternalServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 502:
		var dest BadGateway
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON502 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest ServiceUnavailable
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 504:
		var dest GatewayTimeout
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON504 = &dest

	}

	return response, nil
}

// ParseVersesByHizbNumberResponse parses an HTTP response from a VersesByHizbNumberWithResponse call
func ParseVersesByHizbNumberResponse(rsp *http.Response) (*VersesByHizbNumberResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &VersesByHizbNumberResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Pagination *Pagination `json:"pagination,omitempty"`
			Verses     *[]Verse    `json:"verses,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest InvalidRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Forbidden
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest UnprocessableEntity
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest RateLimitExceeded
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest InternalServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 502:
		var dest BadGateway
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON502 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest ServiceUnavailable
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 504:
		var dest GatewayTimeout
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON504 = &dest

	}

	return response, nil
}

// ParseVersesByJuzNumberResponse parses an HTTP response from a VersesByJuzNumberWithResponse call
func ParseVersesByJuzNumberResponse(rsp *http.Response) (*VersesByJuzNumberResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &VersesByJuzNumberResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Pagination *Pagination `json:"pagination,omitempty"`
			Verses     *[]Verse    `json:"verses,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest InvalidRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Forbidden
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest UnprocessableEntity
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest RateLimitExceeded
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest InternalServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 502:
		var dest BadGateway
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON502 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest ServiceUnavailable
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 504:
		var dest GatewayTimeout
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON504 = &dest

	}

	return response, nil
}

// ParseVersesByVerseKeyResponse parses an HTTP response from a VersesByVerseKeyWithResponse call
func ParseVersesByVerseKeyResponse(rsp *http.Response) (*VersesByVerseKeyResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &VersesByVerseKeyResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Verse Verse `json:"verse"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest InvalidRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Forbidden
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest UnprocessableEntity
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest RateLimitExceeded
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest InternalServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 502:
		var dest BadGateway
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON502 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest ServiceUnavailable
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 504:
		var dest GatewayTimeout
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON504 = &dest

	}

	return response, nil
}

// ParseVersesByPageNumberResponse parses an HTTP response from a VersesByPageNumberWithResponse call
func ParseVersesByPageNumberResponse(rsp *http.Response) (*VersesByPageNumberResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &VersesByPageNumberResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Pagination *Pagination `json:"pagination,omitempty"`
			Verses     *[]Verse    `json:"verses,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest InvalidRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Forbidden
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest UnprocessableEntity
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest RateLimitExceeded
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest InternalServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 502:
		var dest BadGateway
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON502 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest ServiceUnavailable
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 504:
		var dest GatewayTimeout
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON504 = &dest

	}

	return response, nil
}

// ParseVersesByRubElHizbNumberResponse parses an HTTP response from a VersesByRubElHizbNumberWithResponse call
func ParseVersesByRubElHizbNumberResponse(rsp *http.Response) (*VersesByRubElHizbNumberResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &VersesByRubElHizbNumberResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Pagination *Pagination `json:"pagination,omitempty"`
			Verses     *[]Verse    `json:"verses,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest InvalidRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Forbidden
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest UnprocessableEntity
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest RateLimitExceeded
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest InternalServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 502:
		var dest BadGateway
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON502 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest ServiceUnavailable
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 504:
		var dest GatewayTimeout
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON504 = &dest

	}

	return response, nil
}

// ParseRandomVerseResponse parses an HTTP response from a RandomVerseWithResponse call
func ParseRandomVerseResponse(rsp *http.Response) (*RandomVerseResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &RandomVerseResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Verse Verse `json:"verse"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest InvalidRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Forbidden
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest UnprocessableEntity
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest RateLimitExceeded
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest InternalServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 502:
		var dest BadGateway
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON502 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest ServiceUnavailable
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 504:
		var dest GatewayTimeout
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON504 = &dest

	}

	return response, nil
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+y9bY8ct5Uv/lX4L/8BSUZ193TPg+RZBAtJtmPFnqwiyTaCsdDDrmJ3UVMPbZI1o9Zg",
	"AO9d29k1FoGTzf0AQZC17w2Mja4D7ObN3TfZN/kE0zev4i/gr3DBh6piPXZ1z4ympUsD8nRV8eHwkDzn",
	"d8jDwxPLiYJpFKKQUWv3xCKITqOQIvEwgu4PIUPHcMafnChkKGT8J5xOfexAhqOw94RGIX+HnsJg6iP+",
	"M0CUwgmydq1HHgIUkSNEwDGkADoMhxPAf4GJLBlEBExJ9HQGYOgCghyEj5ALYAhweAR9zN9JksCYRAFg",
	"HgLxlDKCYKCKtmyLxo6DKLV2x9CnyLbYbMqrH0F3qOqxTm2LOh4KIKfw/ydobO1ar/Wy1vfkV9rLWv1A",
	"1Wydnp7alouoQ/CUN9rate5AF/wwK3ockRF2XRReAKfi0EWEsihyRWsJ+jhGlNlgFDNA0DimiAIWARgz",
	"LyL4GQKY1bMgI6w1A9IsTe1/O0kEECER6YK7MAQIMw8RMELAjZGgUdAEWHSIQhBGDIwQHwBTSClybeDB",
	"I/44QryYp1NMkMvHA2+1A30fEcDIjKfIioJ8PEQxcRA4xsyLYgZQGMUTD0wRCTClOApplzdWdfwjHKAo",
	"Zi9qBLvYFQ1VIxlAwHCA/Nl5hrGqaMhUU1r3ZJ4FTd2phjJ4lFWBQ4ZICP2Hgrq3eC9fABNR6EQxLzmZ",
	"5LISOYoEBzmb4xCOfDGCeKt8xBCYRTFJ5kI9q5LyhrK6oSi2PcMq2tzENZkMvCVnwMMoQMzjw+MYhQwc",
	"kyic2HwEAziBOAQ+ZIh0JWuFaHugWnMOriqGAEyBGPzhRLwSM8lDkAsSPj4xTcRpE+tEgmHC4yWYprem",
	"iV8fYt/n0oEgFpMQueDYQ6Eu5DRCAepOum3bx0VBmvHjGJEZmEICA8QQkdIgjNjbURy6F8Bs5GYyyIli",
	"31WSDYxFBbUMDiM2lElaszahuompP44YEIm6QBKpSJOiVopN5AI3QlQQip5iygRPCGToPRxg9tZTByEX",
	"rc6cKAIBDGcJh6gNpj6CFBVHfz1zOC1DnxMzRAk1rdlUakgTvx5AhjqiJpCrCZEj7KD3Q3gEsc/FzwVI",
	"O0yBExOCQubPNKHmwdDlv7SBnyhMwFAwjQgkMxAdIeJHUKhE3lI39pELAsiFVAhDB9VzUzVmGGutac3N",
	"MicWyUDsIPB+vqo4TPHJRcy5ZNZTEFNEBPZBIVOl1PMhR0VrBui5zi3O9MK6kjNTEnFiOaveChlms4tg",
	"EFebx8j3O+OIBMgVaDGvSoWE8v3omEsDOdwoCiBno1S/tImRGtFDJKlegqGlJjfx9QMuxkXzE9WaU3Wh",
	"48cuoiAKEZ8aQURQKvuF1KddcF+KH8dDzmGuR2QCATRS2dS1TtOmCMMHxi6OxliyW+O8GxM54HZ3BOQP",
	"ILN2rWC6yRmHJoG0ovb39zfs/mDD7vQf2/v8x9Zgw954bO9vb23Yt/obtni/ub1h9zc2duzBY3t/sLm9",
	"Yw+2trfszcf2/hZPtPmGKOHxY9uKiW/tWh5jU7rb6x0hQhHtfhwTGHaFQpFD5fbIjf07kCLW24ufwONj",
	"6PaC6WZvY6O/sdHvcjJPbWtKoikiDEsTL2vRSaqm4mCEiDJqRAvTT5QRHE6ktExae2JhhgKqpYpGT5Aj",
	"8IN6AQmRVpJoR6k0nhAzzmHrNmf825zxdrm0CsNs96TQnnRuVNGcDO302yiKfATDjNQTC4VxYO3ulzC3",
	"XSlT7ZyJadfAT7t6+tgaItAtyILwtEvILHsjDCvxTOPxGDsYhWxInWiKNIITIpJMU8g8y67UuI/tqs4p",
	"doTjwSlX5vnJMcI0wL4PveGUoFR+YNfa7dtWCAM0hASOsGPtWmdfzT+d//3ZV2f/8+ybs/9hqc8S6j/l",
	"w8DvvP2nv2f4T7+FnNIpnPDe3e/ziWMRdIR8MWiHEXE5Gdu5l1MfOpzeAB4eiuyMwJBy+OEOeT2cVh+G",
	"kxhOkHphoXDiY+opSpRk/bspCuVEkDNuKCwXa/dmaRYVml41vrCrvefDZCKLzjGmYtDmOVORQDGnPA21",
	"SorzsMzCqlxlnlZUX8HcJk2QJe+I5CXmlgkRlEjIzydmscLHmfS4q8Zl/ZDt4HAcFcat+jRUI7U4NN5K",
	"hwb1IsKGDD1lYoBgCh7GBHpcyfO0LuDDFjLsQQ+MkANjikA0BphRQGNBSSeAjNuAIEmGKWAeZODYw44H",
	"oikKKYBJaq7cIBhF0aH4Fc5AJJZXhI3ZBfdC9XwcEZfaeu1YlBIRxuufEjSGDuryFgjLgIM2OJthF9we",
	"xT647UOwB2M3djHogEdw7OEAQL/zk5hcgyF/5SGwh2DIzYloLLTpT7ju4XyWzPgo3tjYdLyB+It+DAMk",
	"3/SSVx+F8sVUPr58zFPtUfR3u92yKtXHUYUyLYyrKv2kja+qz6rzTor2HwxQ0i8yja3M0hFKWBCKNARQ",
	"zJB46Fp2xVxWVefLfy8KJ4B/4pWoRgI+j2zOTKrqUqgMeCzwAYMTCsYRARJByCWz0AWUzXzOfqtKzeiT",
	"XONlji8pFxSx5ckP7vEZ3iABCHIwSzGPJgcE6BvmoZYbHYfcBJNgCzsiTdeJgp540YMccvkQesNNjreg",
	"O4R+50nswVmIUK+XwC67KGQ4thxS/AxZuzf7GzdvbZXgpErIIgb9IU9Ord1+acxpNBe7jc9a8Rnw3Nco",
	"4KkqOj0/bMtlpD3uWnaFktBaUpWbfwZULFKHYDRjiFaXkiLNiiLEt2SEj3PgMGtGHfn33CRnxoxKEnKc",
	"ripJJAByQvMyZVK7Sl8Vx+SDbMwtGpmI0OK4FOAgUUdnvzn7ev6P4Ozr+T+cPQccSJ394eyrs38/ez7/",
	"J0t2B1X90R9s39oaDLYHtypH12YKdm6PYnAHHhIu9R96kBHM4aHQ/UdIwsVdC47i4QgekiGkXod6EDKC",
	"UK8sBnPkFvn4QDZRyiMcgtsiMajqUL0lpe4QXSGGVTQG0Pe1zqW83HfvaD1TZdC4aAxjP2NIvvzbWmkq",
	"T8shlzTw3puVg6yaK4kEVwOANyBDHaVqCx1zskCUinlbg5TAg2TIVQ3LKAiiML8Gbuytq7C3yhtyph+u",
	"oh9qttNMZ1xFZzRt1ZkeuZoeqdwHNJ1xFZ2RmJvFFWxMkKNgh89IZmhgGg2dyJWLYdk62FvawpgAHaX3",
	"hfUYau3ul9fX3idunBV69tX88//zb2fP//LPZ//rL/9snT4uL0tnZJ7UAa8SusuaUARYmEaAf0lMgYQ8",
	"G8yi+JrvC4eUxJp1BTKFUyx8UJQdi5gjdvbVLg1PQafIwWPspKVV2tS11n6On4sX1vJLfEsuseXX/zQD",
	"5b1klFSMoNLes5nIVzGRp3CCw6r1CrWxPJyKLujbVoieJk8D25oikn2Sxq1YKv6BtXszeUGQExFXvCov",
	"Z+WKr1y6zuorWTToKQP8E58oqgXSbYIbXVWWUUZusay3QkYwomCKSDorGyz4pJHVNmNmvst18/pyMt6c",
	"NJn497Puqei8escEM5muYjLVLv4pLags8GG6MJLsqALx8yEMoFiRZDPR+ck264qbTNXFn5amYt3eUZ7a",
	"qnEj6Wy3bZOvc/Fydc2HMtu12dK8EJa4LpUWZvmISrj4DhzjZ+DeKATvQubhFMLsvGG32NaDY4pJPjf1",
	"44lI22HiawePws5h8nWlzcNSLacVK7daoxZhHK3PV+6XpKHrNBiyxfziUGjwQTKS8yokp5wbzVunHn42",
	"Gio8zp+fxM/0x3QUidXnW03TdSreZlkTyZCk3IOQ4HEnFruUYieSxLmqcxuTatfuTrJLD86+nn959u38",
	"l/PP5l+KNfT5p/NfzH8+/2T+s/mXcgNQ7Eon9sI7kT8Dcj80vxFoqe3rhAPy4RDNrF2rv9tPP6eUtds1",
	"1OZ7jqdVCeoy6sxvFCSrS5pcL1UrqFy3VRTBuw35w4WtrN0VzdhflU3rj9q89dVqskqK9CpJVTS38jNk",
	"SUeTBWI327VA9fsDzXsMTHcRbmnFFnYU8mSVNxcepRz5sUxQy7MKo6ZZovDXb2xsvrF961Kki6h1s0Le",
	"vEm6YC+mDI4heNeDjMGRLVh510eQgGYhdE/6hCY9cJuLoO8++RV/txdRBu5GwRSKgyuQIVu+20PEwePY",
	"7xoJ007C1GPkNiKojegpmJPKIYL3ojacbekpIX0iPHiEwDuP9t6rdYgYRxELI4Zot3IP9JKFmz6pdUaW",
	"nSseaRO2Yj5XOkwbnHYVOK3J1dr0yFX0iJiIy6s5/ifg4k96JPV6zmCwvbHTJTtdZ9zvEugcOm4ofJH6",
	"w353Gk6sJMcxdpln7e7c3C5pyZLqK2usIQ58iLC1a9XB5J+px7Pn/PHsG5Hi5/Pfzz8vfvhy/gXPbOVK",
	"HlIs+WCdfX327fyzpOifqbxn38w/m3+ePXwx/ywtIHSjKTxMafvLr3XainSJr9VUyYxJsTHzAhiWmjx/",
	"nmsyfyw0+RNVfO5TodGq8HO0OimBwSfHiIvrPJnSJFEfgeNDSn/gwWB4DKkvzZT5c2W2qETqrd64VQup",
	"yudDGAypBwOKZ9BLKqvKnWdnVVkBdF04DLnaTOj4ZP77yuZ8fuXNqG9Acjh55CNV0JfzLypbkfUoncJQ",
	"FYLC5POvVSb+sWiDhi562g4k2pbwexV7dbrf4/HouLex0R+qf5nzIhlyuZbAYZ452zqcRhRLVNQvQft6",
	"EJ6B4+vMQzdAulclCsAMkfaFjDC9FmDrtGInUbRu0ZZZdt5ngUNk4jeVbSOITUMp4qv2EpzIRcOjfrmk",
	"H/qzqSe3GyUy/Mndt8FRH4yjkNFKP01R0qBtSYP6klYG/Jo+qlqx1HXPKvZCAeznW6l9BJgCF00JcriN",
	"mR41jSkCB0d9sQF0AHBIGYIut58C+BQHHKfsbGzZVoBD+dSv6q82xkCqIIs03p5BT+J/HIJ7gQ+vIQxk",
	"gu5H4Udh/pUtHdgRCCIXkdQX8phgYR6ItXvl2547RopD3tRaB+6ikj2pS5ao0roEqVJsbOb7MhV4mDUz",
	"eSXziOW0EES+2xlD6uEoTD7EFLlgNJMmlIeJC+5CH089WxVqAxaBKYnc2EHK95dQBiiDoQuJC4QLNghg",
	"GCse17KkqIKLLSpQ7GLo8F5wQADJIQULy00Vc8PiOo7C5ffwOXkV53fUKC83ZA+6vB17MfXgGNyHE5SI",
	"Ki4YlHjpgntjbaYcQT9GvJcGtjxPESAY0sQzgs8qsZErBYp06GYRICh05XEKCiAfELE4nH/UBxMuj6Q4",
	"Wnb2HQ1Wa9dAb9fgUto1OFe7dP280JTPN/0QzZJ1BpHKBvwNpmCCQq4jkatIdPK6CYaubIB87gLUnYD+",
	"bp9nlRNJfBWO7GJaxQR63fpViCapqMBEy8Et0EOVV4q+HqErKVs6MWv6I68scmJbZ2aBdm1B44O8xs6s",
	"NUFc/cGQ5QBSqv3FRsRg57Wn49F2/28y6OTjMOPswLb8SJ1oF7hNILeixZZHW7X2WrPF1Gz4WFcM48oA",
	"tvngS9WZllx/nNTBqQpglk1zKTVmUQwcKHRuTj4gcXRMzT0OuVLxuhR6O0d1g/rqaldc9fFWOuiFw1Ss",
	"YrlmrQTuOFISUY3rioLTgbt4FfdKgF02bYoEfMj5mnwWkWRwKGRjtXNQEwAURSXISIKN3j2RVkGLetC2",
	"MhrL1amAjNNUXX5mL7vRX7MRd1q7y5MTAZdY25phIm22GkxkL7l7UcACmbAviXZtYueHdnn4adr/w5wY",
	"01xTKHJigtnsIYcqcpA+7cCYeR25dlx5MPBHHz7KB7pLI1TxjpBfRBA7DwEUutMIh0ywC/MSZBSrbEM4",
	"V18Gkqb4XSSw/9OO42MUsk7V+sRPo5gA+R3cc+uryIoo1XAqPPnlKfl84WKXs/t2GnAE3FXO0Lfv36Mg",
	"Go+RCIQ3ITAIILeeUqZkZ8avUeBEBKV+1D4+TI+YUlsiXGqDzE+P2vr2GrUFrg0igmzgYspw6DAZUS+m",
	"iHTS3WwXMigLF9trItcoig6lQTcl0RF2pfW5/z4VZy/FhrVoyuPrPTdyaI9roUlEZr1YS9GBU0xvCDsX",
	"vPYaeCc65u2bIJa0Vnz5EAFIkJonf3c7Zt4AjP3oOA3cqIIXIQnT00iOSfysLngkC6UMEqELOS4IEXJ5",
	"AfuiujA36BKiWcwigqFPexF2nd4Eic3Gjiqnw9VbJ+IVDl6LRgzikH8VLzqDjWRcOAS5nELo0xu8wgAe",
	"ZrTxF3yYcVZ1wUMcKutcjALe6jBiQGeZJP4Y+37aAoFuPAQOZIVDrcIDMCEwZIAPS8Gd/QM1WA6A2KtJ",
	"WsqrGKoqhrxXhnz04ChEbk8kpK+pjDdkYCaKQldsvKbBgDgvhQMG7yEw6G6AR2ICv6VmaVKVZFixEsU1",
	"OVU76KnjwXCCbiTjQZw51npIRjEaIT86Bi6GfJoA6okx4SExOrgxpjqs2L1qKLXhGUcvfCLNJALBY4xc",
	"cAxncsz+f/t3pXi4m2UHb/vR8ePrPRxMeuUR0OGkdafh5Aa4PeYGZkoikDGXdDptgKDj6QzmrEg2l6kc",
	"BWJfnEVpzIBBGsov4HVy5ko+7YIDXRweiPFwoImvA4F+k0OtmjhSpp8UXEdbXHBGUxTCKbd1NrsbXWla",
	"MU/I+F6y5qvJnd4Jdk/5xwmq2P7/IeKyi+oxEei13CnkaCwGmvDQtUTtUg/dc7N1ZHX8No16RAVRSdxC",
	"sTrfdKI9Kx1LJM00xyIh2zMtykiM9HBdhdMzp/aJLEQET8xK8bMDIlle3Q2pwltIxOjRwggPNjaWC3Am",
	"9b06ir9/OZEZBoOKyAyDQS6gQf+NmzffuNkfVB6f39osR2e4HFK3tipI3drKkbqztb25eXOnktJbN0uU",
	"Ps6FbqsyrdNACK2WdCqCayxa4NGreVzGYuU4g9IfYRz7aShdXseWHFxVxKWDsBChVGbrL85WjB64tbG5",
	"OFMu4PLWxtbiHGloUp5hMGhDVzmCoMj7xuK85Zifp7a13Y6J5XjAIm8LirVI4iJLCz5WxOMUWVswtBD5",
	"WQD7OAggmYlVDim1oe+nS6YNcpvBCRdCMiSE9ZiXVasteifJFylWm9WHSnuNatXnagdt1caVao1yVfrm",
	"aAruq6vL86ux6tS27PerbcuUqAvUP5cVF+gytE8rkb6KID810tlI5xcknVsJxmaxTFuBdiVKu3UytgKK",
	"rw0+zhq6f5lhN8XX1Gsti5C3jhE5mwCtPi7axqo1Ms/IvBeKSDWxk8i29FVevGUok0POZKm2VuDpcRGr",
	"D/yAN6W8AiwCByqwx0GtYFTxFRsBZ8FN7jrod/r9LXCjGQQuwJ4LAaB2tGH9hPUw6aiC63dN1Flkos5e",
	"QNRZ8orFnc0alDTxPiI4Eqbdg1TfFrgggtUuVo/pAG1jHoi0RkkaJflCDYNiiN9FenLRAr6LGMS+WvKh",
	"OJz4aKFd0Fb13XszUXs3Vlppebm13eXeB/AyGSaLBW9LmWvErRG3VyJu6yXtk/hZu8UW6PvgR/Gzkkz9",
	"ES+gIHJSCbVQ7JSWpeunRUXrbkuadIOLkyhbJldxc+v72cOw7cZwukAvHYESFZOV1AUPEQL7vXR/XK8y",
	"dUORXCh6H2gpb6RuRdyEE7EKQToedF8a4QLwU+VhCn2abcGLS5TGGPmuVIfahoj0PDiQHw/U7XpSY5S1",
	"ZBbgqf2mdpZHBpmvUJY55p9vh8KJggACijhJDLmy0YU2p85ZBZUqeWBV1Jd5rhXruzeW7i8wTN0hisua",
	"qUme+uBXVV7aK1kVLKxO35P4WR11Oef8Cso2Ny6BsLwL5FSCnSrq8qcFKshb6LB4PsZ5+NmojnP5kw6V",
	"tF0maQ/iEUA+eKeBwoogPZWEDrYulVI4q58c+pmP+sl54Z4pclfwtg/HkM6Kl61VHWOozTKozDJoyrJZ",
	"mWWzKctWZZatpizblVm2m7LsVGbZacpyszLLTYt3WYAYlHeTp0pABTYMY98vBW3cw9SDBIMHkHrYBdDv",
	"HNzmlVmnF+z0kjs1XDyilxCdr2ZBxMbKcHnGacaYA+tgDuRQbeYsUwK1NbuzElLLMIK0dyJ/LITSKWhW",
	"MTWT6164KuBgtoifVfkLsLNK1YybVaLWmFmmXw4up2HlGgGyKrkOHKesvARgrLXskkExyzp47QBxJW1X",
	"DYZ1otYNCFcy7OpBcCVZaweAK6lcA/CbQJqF8ZiVQKqPhpwkkcIuH35x543SBp8KgvOR9PT/SL5HH4rt",
	"t2NIAUFHCPrIBTgEe2Ipt7gR2FhQYadR25KDoSt2Aj+ABEcxFSEcaWXZlRuMDvR9Fdcn28LTk3eA+i+r",
	"U53Lw1TGl5QLy8kG6J0oOpTvZR3HmHlqG3JK4AwReQBnhCZx2LUanWKq8Wmu507axwVeIrKF1HiLvMOT",
	"Yg3INSD3RYLcFG+yNOCvwrLS+SCHZbVzib0T7WkJVJtlWgxtteoW4Vst6QKQq6Vsj3Q1qpeDu7kDuudd",
	"FM5z/NLAb1bLZSPgwmBYPxhcS+CVY+EiZWsHiGtZtwaouJa29YPGtaSuLT6uCB2eD1WwVIzxUkCxEn7e",
	"vKjA46vAx1KrlggUcpEh0opoUq/AQEoDKa8GUubDk9TiSulC1NMiVNUCSS3+ipCHM+gVg4mWQJioUMQ/",
	"o3cjF33QXwTFquSwin6/hhilTNmVg5OUpLVDJWVmrQEcKRO1fjikTOMaABApOMQMziIPfv/NL8D33/wS",
	"fP/Nv4Dvv/kV+P6b/57FH0yDZlUEjW7U/0lVmrIuODc2Bj7WohUf9ZcJYNcyytc0i4bVBT/VQuplIb5E",
	"T8oImsChVF3HETIwho4WSFmUJCNpXWyAK3MAzaCUNUIpH/TBD8tgoj1OGayOUwbtcMrA4BSDUwxOeRVx",
	"ysDatcD3z/8b+P75P4Dvn38Kvn/+mQZSBpcLUgYtQMpgKZAyOC9IGawJSNEXURJmZe17bFCMQTHrhWIG",
	"q6KYLKRzLYhJIjmLg2cqwvL1Y8y8KGaAQeod4o976d0R0Je3R9xIqOg2IRxZtkE4BuEYhPNqIRwFYi7v",
	"Zr2LhUR1mKYQ977mkhCz2mFwwsuAE5QqfyhVeSpD2mKF7LKGerAg0yRXSiUYALxPUc5JRoTTHmOfIcKH",
	"dewzagMfwSMkvIH0pGDkw/AQ4LwQlB495eqOvchXIVOakYdqzPLQA5ebuHYgpJHGq4YjVcStGzBpZODV",
	"Q5RG8tYOrDRSu8awZelbdx8vunb3RYKWhqt1DGoxqOUlQi1KfDzMYYo2iEW7PaoWsRQuwbxsxFKuri1i",
	"UTlXQCwVTVw7xNJI41Ujliri1g2xNDLw6hFLI3lrh1gaqV1fxHJZF/q/QNiiiWwDWwxseYlhS/6K8BVg",
	"i3Zv92L0suruzGXhnJXxjVycMijHoByDcgzKaUA5WSjUs6/Pvp1/li7MqOWXs2/mn80/zx6+mH92JVBG",
	"E+MG0RhE8wogmhzYWAXYMPjkGCG3FbJxIj8iwrHFBSpfbueqCx6ptyT2kYwEgYIRcl0ZGUOkhRQcqMwH",
	"wGOBDzitbeCIKty4qBgXFeOi8uq6qJQkU34FRYavScSPDKfjwWB4DKkvY9rMn6uANyqRequvu6xaSFU+",
	"H8JgSD0YUDxTcX/Q/NOq3PmVnqqyAui6cBhGJIAJHZ/Mf1/ZnM+vvBn1DZgiEmBK8chHqqAv519UtiLr",
	"UTqFoSoEhcnnX6tM/KN8dTW4UdOSBjga4PgKAMcEqbVaEmsIQ98bzYY8Z++E/59Pg3aR6cUBrFJ4+kQ7",
	"3a70VuZvs6g8y0R1v+faQik6MBQKUb8WQFAymsm/Wku1C+8vMD7+pUeX50wCh2gmwr9FwQiHabASgXmT",
	"K9Fg6ALZ5uQACOpOQH+3L2/IHyEwxoQy0RU8s3wSUd+q25D0f7tLZWqw16UHyh65sX8HUsR6e/ETeHwM",
	"3aWCZjdlbxFAuyl7bTDtx+JSGdWPggkxIXy8pWeSQq6r5NPAtqaIJJ82kjt61a00/e3kBUFORFz+auvW",
	"Cw1LnW9KUzFayqYo1LkiTWgVo05fpDq9XVQaXJHl1FhNMOoFKlWtQCx3n3ujbn2YLHjUX+hu1KquVl/C",
	"y+KNpks13aCk6AYbL4eeM/rL6K810V8J2l9BgXn42ah3oq1vnkN1JQupec3F3xq11UZt5VeZVzfOjMoy",
	"xpkxzoxyezWUG9cfq+m2J/Gz3km2F3sOzab2ekt3khq91kav5bbDW6i1TaPWjCVmlJpRaq+uUpN3XK+g",
	"0wIYPsN+70T+XV6zFSmCYE+UVFZv8r3RcG00XK432im5my+RjjPGk9EzRs+8jHpGCvHVVA2fsb0TzWf0",
	"HAZU2UW1rHDuwwky6qaNusn78bZaKDSbW2al0Cg7o+xebWVXcQ5iBcVH4lHvpOz5fw71VzhpkNd7D+LR",
	"W77ZJWur/CqPZLTQgXVHNIwONDrQ6ECjA18NHahpmlWV32HMtd9hfBGLiw/iw7hK4x3GRtm1U3ZpP7TT",
	"ctvbO2Zh0egZo2eMnrlkPXMY1yqYRMQmftg4HEe0lRpROQDPAY7RtSMEcAhcPB4jLheAD8NJzCd8rYf8",
	"PVHXeYVcgfL94l3N78DgGQQPohEiLAL3seNA4kbJTUTb27aVUJrkwAz6GIaZaK8tgvrxxNq1PP69Q+T3",
	"zlR973CKtGuhkZven1ysEYUTH1NvYY1C9+Sb9xDOZtgFt0exD277EOzB2I1drNq3s1luXgB9OIM+DLLq",
	"VIeAe5Ji2aww9v3VqM8VtzzNgzLNDAZibXwt6e2X6Y2JG78ocpvOapemdc2R7Vx7T9rfilWgtSJn7YeK",
	"ludpWrnsCo9/c2jcqOy1Udn6/KWaZn6QaONa7Sx0vLC8WijopJoHMlPzQTVe6ALb7scwQLzchAiu7lOQ",
	"kUzWLvgQ+z4YQ98fQecQsAi8JeUXwGNwjIAbhdcY8OARAnz61pRSE0Yl+Z6LouKiMYx9JiSldQnHnjOm",
	"c2xB4Ag7iWg++83Z1/N/BGdfz//h7LkMxvaHs6/O/v3s+fyfLNsSpsGQ4mfcChps39oaDLYHt2xrHJEA",
	"coKlrcWF62baxtujGNyBhwRAv/PQg4xgAZF8yPARGgqbc9eCo3g4godkCKnXoR6EjCDUE4uJBQq/Pfvj",
	"/B/P/i0h7rmKFLcEaVspaQ/hQewCXuVDLyZwFlRQRuFmFLlD6HeoTFNF1fwzwafn8y/A2fOzr87+kBD4",
	"x/nfn3119u38i+VI3E5J3MPUgwSDB5B62OU8PLg9hnRWQWnAk0KChwSKxEPoDzfhGEIqWNmkVvV52MoY",
	"VRO4k2Y0CsgooCtTQO9Vawi60EpMbbpGBQR9X7P+0ltQRdisFPQp6R+Ns6SVqkAtCR4kzwcqSG+qqrrg",
	"7YgAJa/BR+FHIQAHBwf8TxXlf5v8+kFMtKQfhSJGB0EsJmFWuSRSoxqHLALvS3Sf16bvpbwp6dHWquyC",
	"dZcKA9a52d/p92/tbNgWptHQiVwhdwLExLJeVn0rUZYSXhZhRmAZgXU5AkubW4vRsrayT9nMXyCtmIdA",
	"Sq62igZk3ootkTTJQ1n6SpO0DloEMfR9HFTau4Farq/5SCBj0G9nEJupaqbqpUxVbQcwnR7LTNl2tm02",
	"YbXNyaapaqzbJus24XwWN1SxYZgapcmeIRA/H8IAupxO3sXc7Eok02ormtXFF5c2W8GTrD0GoBip9+Kl",
	"3mIjqsmrQ2wZNQlAnoAEafxBLcBjVlIX3I1in9sqjh+7CLiIQewDOBK3pngokXF2Ce10wYceCkUgw2Mv",
	"AnJ7nls9DCDmNMlXtbVRZfic0+3i4kRdwlwl4uRjGPt+k+tBkqlNiNs2Gw9GBhkZdOnIS83GxbiLwTHF",
	"ZFnMpXKV5cEjVdzqKyCXDXfSBlf4CYzxM3BvFIJ3IfMwSTwEdt6wFwMY2fB8buUcgMKOrLSDR2HnMPm6",
	"Ckwq19K8+6v1bkvsJMeFWZ02cuzq5FgmRFrLr96J/NEOQ3EIVI+jZElFDKWnz4CUHH02OOaoCTNwDCmY",
	"xiM+a5FbDZlk61rDpbRdLwAq1UIgt9IL1kgEIxFepERYAtUo3brCcpKeVV4fWdp5Sm6AqdjKkmOvetXn",
	"OupOgLb5JIPCUxS6eqXZstH7xI1vdMWG1tsRqSA13aSiKO8un+51LXCWT9NlrvIV8krn5drsbJ1Y+T4u",
	"obk3SRfsxZTBMQTvepAxOEoA3Wa/BaCryG8LkX/XR5DICz8zjOfwl+IysM4xZp4CfCuivCrSF+C8wng3",
	"YM+I9pdFtOfFy3KyvXeiPZ13/UwrauECWoL7FNbD4QS4kCGxcJbgP1KD/7Jq2oPAXCvNopmRP0b+XLz8",
	"aY8v5eG4ALkYNgobkQIIv0PkctzIZYfIXJYL4l7OPVHkhRpvS3n2J8adfaHO92bymsl7KZNXzBmQTJq6",
	"eUsRJI6nTdT8xHsoPy9wD5CppAWYnWuOKQKvi3evA0jBMfL9mr39jxutIbt8jprGPqNgiogMwQVep68D",
	"TAH0aQTEDNA8IGvqFK7TlYvrgw178bVn94UDpPhsi6aJY4XZMdfMs1OwYbqIBdPatf421Nx7+HfinmTd",
	"Y9QWNTMPU90plAKcv691FEWU5Sz7/AHJzLvjRZval7UtkiZfQm0slNpStqtJpmaNnGHpKmzCmPNcY6gK",
	"a39/Ye2mU74OtYiUkAjuvVkXFyBtw4u7NvCF3xp4SRtruQUOca7llp3j6G5/R3+TnNqA1yDBYwD9zk9i",
	"ck1fWsm2zwLI03Riv/OxWn1h6CmfEvJG26m8zfa7T/71nUd774lh9Kffke8++Vd14e00ve12lUWZMoXJ",
	"PbWSXbv9fj81k/q3Tm3xapC9ekO92kxfDTZOT08X7t41nIusO5SZ43djglpwJ5lfdWpTsLw41DnHO9Kw",
	"FkhXTrVR5M7KwuqST37qARpEqiKWfVxxFjTrSOi6mDcK+vdzJLW0ZPXasVtZV4FzkHoggNMkMAufuOC7",
	"z3+peNiRLjhWlY2s16UaYJekl97Rdm7oqE4ud4fq5MfGLjfQ/krDWuhIoO4CyET5LwAi57r8sQaRNF//",
	"uDIqaYiaVHTAqQmXpL4ugKQq1eIwSSvDoZfmukfdKagAVt5IUcYdTAPs+9ADZ1/Pvzz7dv5LcdX+2Vfz",
	"T+efzn8+/8X8k/nP5l8KI00u8oix4yHwTuTPQIprlrprf7U4RfbSnj8Ka5itICPy10/kF+9MbCnzV7wv",
	"sUba19+YuD725/peVGjkm5FvRr7VyLdCBNCW4m2lK/NqhNuPai7NW2vRth531RnJZiSbkWw1ki1/d1pL",
	"wXaOe9NqxFvzvWlrLeTW5boyI+aMmDNirkbMla7uainpVry2q1bKtbu4a63l3brcl2XknZF3Rt7VyruG",
	"25tayj7tbqDVb3CqkYTt7nBaazm4ZlcnGXFoxKERhzXisPoin9ZycKVLfGolX90lPmsu7dbj7hwj5oyY",
	"M2KuVszl7pEpyLfcsbwL8QMu+mu3cwZuPK5ckHXa2R/jFvwCAkmsdE5Zy2QEoxGMVywYaw+RFP0S9aHe",
	"RkSez0OxQVYucFM8v7xs5bCoE1jjtaglWeS6qCU1/osVsTDyToyb/dSJ8V4o+J4Eu73t+9D77pNf8Xd7",
	"EWXgbhRMIeVshgzZ8t0eIg4ex2L/7MU4Lxo1YdTEK6omSr6My+qJVb0aGzREg2vjGqLp/4ecHI0cNHLw",
	"FZWDxcXSZcXgat6PDUKw1gXy5RCBr6gzpJGARgK+ohKw4Bu5rAA8j5dkgxhc4Cr5cgjDV9Zp0ohDIw5f",
	"UXFY9qFcViKu6k3ZKA1bulS+HHLxlXWuNHLRyMVXVi42+VouKyMvxuuyQWK2dL18OeTlq+6EacSmEZuv",
	"qNis8clcXl6u5p3ZKCFrXTRfFqn4ijprGnFoxOErKw7zvptlOSgjCJ7bE0mEZL5Ob4DRDCgXI9CTu96J",
	"I2N16HN6Z6bS/zgRLY0CMClceUteB30AOqDf3wI3qoXgRbruaCEfi3QlV9UDFoExYo4HjiOSv+Lnsu+E",
	"LsdOVvdYcErEPUUIOp5wLv1bcb/QBogIGEOfIulcGkYsvftC5OnyVH2eirNKJkoSMC9JVNME8bGGfl6c",
	"ZVso5PzdTx4FKVoAyvqWOVEQQEARHyoMuQDL9uUmAouAH0FXTIi04XXEsrwOXiJk9z03vT5cdXM+CrWg",
	"AcYujnI9UEeISFlFQcPYu1vDDeXNXcmISjK1Cz4rmZSeJVmCP4K4TkZcIjH48Oj46Aj5YIyR7wo6s2v3",
	"Uq3YBfsPEQLj2FcJAUFjRFDooMRdEE5xT3zqpJ9ey4rvyOJvNI3ToUyzQstAuWX6nFdNKzAbui4IIoKS",
	"z2nP5C6jWTxUVye7okOEJrjEHtHKX9QlqzTrbS1IfTgBx5h5OFTXXlMudZaNTt9K7Ms4vTJgP5xi4EDf",
	"zzvGKqUCtjfUvdq0tmeniAwb6NmwNWy9sUBBndu5NA+nnZgQFDJJHq8wRE+Tp4GdUS5oiRj0xSMVG2zy",
	"WTXe2r2pBV7eP8k5cYmbhuSFQ5pjA3/Ul7D5c8USDX9N4RMXeumbMPb99KVkkXylR/7kFd4a7Gz1V7zv",
	"NxeN3BsAx4eU/uAji2Hmo4/ke/ShhzkkgBQQdISgz6V0CPbg4SH0VKBybyCTNhf0yENgD8GQj3Hhydt5",
	"GzLsQU8cHMGMgg8gwVFMhbMvLZRt8XHxotyGeV1Fx+HkjdZnEifIq/xcHA1j4nOpPDrubWz0h+pfN5hu",
	"WjYHc0R05FAT3vx95KLhUV91w2Dntafj0Xb/b6x0OPk4zCodlMfTNKJYjvV+jkHNQeIzNl1nHrohLnHM",
	"TErMFNptVcgI02sBFjf+XYZzdRbqvJV9K5Iby9ZYtldn2d5JLUnNgpU2Y8l2XdI7Gvq+hDsUjEkUFJ2i",
	"rwMP+uPr/c7Oxo16s5WnbGez8pTKYJWFVluqF+XObKxUY6UaK9VYqcZKNVaqsVKNlWqsVGOlGivVWKnG",
	"Sr0cK1Uz7xZbqksdYGuwU5/Ez673O5tNBuqP4md19unlnSQzxqcxPo3xaYxPY3wa49MYn8b4NManMT6N",
	"8WmMT2N8Xo7xmQ8nUGN0HqJZ7ySVMwtszswCEyCYowRwiGZd8O4KwUv7u32eR0YphbmYpTKjwHVSpUpT",
	"amN3m+fYZl6avr/BPJm83tgVf98VYU4b92JFOhGH9TpQrsG7gjM3QPWubCaelwmgaoxfY/wa49cYv8b4",
	"vSLj99zGnYR3u8b6MtaXsb4K1leD8ZVOmxam06mOqPZV1sfGfjL204uznx4miFsaBndmQBoRCyyqJYMO",
	"aRt50bg50tD1PlerOxtbN2ptnftwgtp5npaLTy2zD/gsAASGE8TtrX5nZ2OrxgRqGz8IPXX8mOIjtJcs",
	"u8oUC+MKmU1DYzcZu8nYTcZuMpuGZtPQbBoas9WYrWbT0Bi9xui9HKP3fj6cZI2NS+IVgkXWWrpaZLbs",
	"LORgq8mBNY0b2c7Yra2hJjraBUd5NEasMWKNEWuMWGPEvvybf8ZIM0aaMdKMkWaMNGOkXZWRVjZnFphs",
	"BIZuFCxw7pSJpD7vgp9qC6r6l9JxwwPlK3lgH3DpcWCDgyfxM/6HayH+l8SjDvI72eNhzP/KO5kObGFN",
	"8EKPvchH4CcxgWFFOGxBg2jcQmsPsZiEhRaB11+PQn8ma+KSWjUAuYmzJ7hO/+t3BHo3Xn+9DmCUIsZe",
	"TITYZQnei//6x9/89T9+qzZuX38dXO+D7z75F7E33G1Ydm8kfIUt2GUJfxI/+/P/zshVZ1SrqM2dOb2Q",
	"M6bL0vrX//gtfjbSeVtLbH6h4ELCMS1LLYlHf/5PAP1OkexkHaWK7sp1jotZ11ie/sP/+t2f/7N+6uVj",
	"zGtEXipZUkZl3LxZy8viDXOtb5Qzi0NmccgsDpnFIbM4ZDzDzeqNWb0xnuHGM9ysv6z3tTrKeuCYp3Ll",
	"hWdATkw4Y7kMeNrhA6HDokMUWrv7j23racfxMQpZh0/l/cdcqlDBl6oFjfsEdaYkcmNH6H/JQMu2pFDx",
	"GJvS3R7Xj7QzJcjHR6j7sVhFGfNhIbWVUmJCix5tWWUVfr9VBYsLFo2LCJ7gEPodegwnE0Q6vGWynkF3",
	"w+JJKIumPp54Qq9yLlhPg9ifkugJDIjjWqen/zcAAP//vaZdA7YCAgA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
